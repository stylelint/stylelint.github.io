{"head":{"title":"Writing processors","description":"Writing processors Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifyingâ€¦"},"body":"<h1 id=\"writing-processors\"><a href=\"#writing-processors\" class=\"phenomic-HeadingAnchor\">#</a>Writing processors</h1>\n<p>Processors are functions that hook into stylelint&#x27;s pipeline, modifying code on its way into stylelint and modifying results on their way out.</p>\n<p><em>Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.</em></p>\n<p>Processor modules are functions that accept an options object and return an object with the following the functions, which hook into the processing of each file:</p>\n<ul>\n<li><strong>code</strong>: A function that accepts two arguments, the file&#x27;s code and the file&#x27;s path, and returns a string for stylelint to lint.</li>\n<li><strong>result</strong>: A function that accepts two arguments, the file&#x27;s stylelint result object and the file&#x27;s path, and either mutates the result object (returning nothing) or returns a new one.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// my-processor.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">code</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">input, filepath</span>) </span>{\n      <span class=\"hljs-comment\">// ...</span>\n      <span class=\"hljs-keyword\">return</span> transformedCode;\n    },\n    <span class=\"hljs-attr\">result</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stylelintResult, filepath</span>) </span>{\n      <span class=\"hljs-comment\">// ...</span>\n      <span class=\"hljs-keyword\">return</span> transformedResult;\n    }\n  };\n}</code></pre>\n<p>Processors can enable stylelint to lint the CSS within non-stylesheet files. For example, let&#x27;s say you want to lint the CSS within <code>&lt;style&gt;</code> tags in HTML. If you just feed stylelint your HTML code, you&#x27;ll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:</p>\n<ul>\n<li>In the <code>code</code> processor function, extract CSS from the <code>&lt;style&gt;</code> tags in the HTML code. Return a CSS string containing all that extracted CSS, which is what stylelint will inspect.</li>\n<li>Build a sourcemap while performing the extraction, so warning positions can be tailored to match the original source HTML.</li>\n<li>In the <code>result</code> processor function, modify the line/column position of each warning using your sourcemap.</li>\n</ul>\n<p><em>Processor options must be JSON-friendly</em>, because users will need to include them in <code>.stylelintrc</code> files.</p>\n<h2 id=\"sharing-processors\"><a href=\"#sharing-processors\" class=\"phenomic-HeadingAnchor\">#</a>Sharing processors</h2>\n<ul>\n<li>Use the <code>stylelint-processor</code> keyword within your <code>package.json</code>.</li>\n<li>Once your processor is published, please send us a Pull Request to add your processor to <a href=\"/user-guide/processors/\">the list</a>.</li>\n</ul>\n","rawBody":"\n# Writing processors\n\nProcessors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.\n\n*Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.*\n\nProcessor modules are functions that accept an options object and return an object with the following the functions, which hook into the processing of each file:\n\n-   **code**: A function that accepts two arguments, the file's code and the file's path, and returns a string for stylelint to lint.\n-   **result**: A function that accepts two arguments, the file's stylelint result object and the file's path, and either mutates the result object (returning nothing) or returns a new one.\n\n```js\n// my-processor.js\nmodule.exports = function(options) {\n  return {\n    code: function(input, filepath) {\n      // ...\n      return transformedCode;\n    },\n    result: function(stylelintResult, filepath) {\n      // ...\n      return transformedResult;\n    }\n  };\n}\n```\n\nProcessors can enable stylelint to lint the CSS within non-stylesheet files. For example, let's say you want to lint the CSS within `<style>` tags in HTML. If you just feed stylelint your HTML code, you'll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:\n\n-   In the `code` processor function, extract CSS from the `<style>` tags in the HTML code. Return a CSS string containing all that extracted CSS, which is what stylelint will inspect.\n-   Build a sourcemap while performing the extraction, so warning positions can be tailored to match the original source HTML.\n-   In the `result` processor function, modify the line/column position of each warning using your sourcemap.\n\n*Processor options must be JSON-friendly*, because users will need to include them in `.stylelintrc` files.\n\n## Sharing processors\n\n-   Use the `stylelint-processor` keyword within your `package.json`.\n-   Once your processor is published, please send us a Pull Request to add your processor to [the list](/user-guide/processors/).\n","raw":"---\ntitle: Writing processors\n---\n\n# Writing processors\n\nProcessors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.\n\n*Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.*\n\nProcessor modules are functions that accept an options object and return an object with the following the functions, which hook into the processing of each file:\n\n-   **code**: A function that accepts two arguments, the file's code and the file's path, and returns a string for stylelint to lint.\n-   **result**: A function that accepts two arguments, the file's stylelint result object and the file's path, and either mutates the result object (returning nothing) or returns a new one.\n\n```js\n// my-processor.js\nmodule.exports = function(options) {\n  return {\n    code: function(input, filepath) {\n      // ...\n      return transformedCode;\n    },\n    result: function(stylelintResult, filepath) {\n      // ...\n      return transformedResult;\n    }\n  };\n}\n```\n\nProcessors can enable stylelint to lint the CSS within non-stylesheet files. For example, let's say you want to lint the CSS within `<style>` tags in HTML. If you just feed stylelint your HTML code, you'll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:\n\n-   In the `code` processor function, extract CSS from the `<style>` tags in the HTML code. Return a CSS string containing all that extracted CSS, which is what stylelint will inspect.\n-   Build a sourcemap while performing the extraction, so warning positions can be tailored to match the original source HTML.\n-   In the `result` processor function, modify the line/column position of each warning using your sourcemap.\n\n*Processor options must be JSON-friendly*, because users will need to include them in `.stylelintrc` files.\n\n## Sharing processors\n\n-   Use the `stylelint-processor` keyword within your `package.json`.\n-   Once your processor is published, please send us a Pull Request to add your processor to [the list](/user-guide/processors/).\n","__filename":"developer-guide/processors.md","__url":"/developer-guide/processors/","__resourceUrl":"/developer-guide/processors/index.html","__dataUrl":"/developer-guide/processors/index.html.6419a7dbdd44e899c5f72430dd7f6c97.json"}