{"head":{"title":"Writing processors","description":"Writing processors Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifyingâ€¦"},"body":"<h1 id=\"writing-processors\"><a href=\"#writing-processors\" class=\"phenomic-HeadingAnchor\">#</a>Writing processors</h1>\n<p>Processors are functions that hook into stylelint&#x27;s pipeline, modifying code on its way into stylelint and modifying results on their way out.</p>\n<p><em>Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.</em></p>\n<p>Processor modules are functions that return an object with the following properties. The properties are functions that hook into the processing of each file.</p>\n<ul>\n<li><strong>code</strong>: A function that accepts two arguments, the file&#x27;s code and the file&#x27;s path, and returns a string for stylelint to lint.</li>\n<li><strong>result</strong>: A function that accepts two arguments, the file&#x27;s stylelint result object and the file&#x27;s path, and either mutates the result object (returning nothing) or returns a new one.</li>\n</ul>\n<p>Processors can enable stylelint to lint the CSS within non-stylesheet files. For example, let&#x27;s say you want to lint the CSS within <code>&lt;style&gt;</code> tags in HTML. If you just feed stylelint your HTML code, you&#x27;ll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:</p>\n<ul>\n<li>In the <code>code</code> processor function, extract CSS from the <code>&lt;style&gt;</code> tags in the HTML code. Return a CSS string, which is what stylelint will inspect.</li>\n<li>Build a sourcemap while performing that extraction, so warning positions can be tailored to match the original source HTML.</li>\n<li>In the <code>result</code> processor function, modify the line/column position of each warning using your sourcemap.</li>\n</ul>\n","rawBody":"\n# Writing processors\n\nProcessors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.\n\n*Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.*\n\nProcessor modules are functions that return an object with the following properties. The properties are functions that hook into the processing of each file.\n\n-   **code**: A function that accepts two arguments, the file's code and the file's path, and returns a string for stylelint to lint.\n-   **result**: A function that accepts two arguments, the file's stylelint result object and the file's path, and either mutates the result object (returning nothing) or returns a new one.\n\nProcessors can enable stylelint to lint the CSS within non-stylesheet files. For example, let's say you want to lint the CSS within `<style>` tags in HTML. If you just feed stylelint your HTML code, you'll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:\n\n-   In the `code` processor function, extract CSS from the `<style>` tags in the HTML code. Return a CSS string, which is what stylelint will inspect.\n-   Build a sourcemap while performing that extraction, so warning positions can be tailored to match the original source HTML.\n-   In the `result` processor function, modify the line/column position of each warning using your sourcemap.\n","raw":"---\ntitle: Writing processors\n---\n\n# Writing processors\n\nProcessors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.\n\n*Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.*\n\nProcessor modules are functions that return an object with the following properties. The properties are functions that hook into the processing of each file.\n\n-   **code**: A function that accepts two arguments, the file's code and the file's path, and returns a string for stylelint to lint.\n-   **result**: A function that accepts two arguments, the file's stylelint result object and the file's path, and either mutates the result object (returning nothing) or returns a new one.\n\nProcessors can enable stylelint to lint the CSS within non-stylesheet files. For example, let's say you want to lint the CSS within `<style>` tags in HTML. If you just feed stylelint your HTML code, you'll run into problems, because PostCSS does not parse HTML. Instead, you can create a processor that does the following:\n\n-   In the `code` processor function, extract CSS from the `<style>` tags in the HTML code. Return a CSS string, which is what stylelint will inspect.\n-   Build a sourcemap while performing that extraction, so warning positions can be tailored to match the original source HTML.\n-   In the `result` processor function, modify the line/column position of each warning using your sourcemap.\n","__filename":"developer-guide/processors.md","__url":"/developer-guide/processors/","__resourceUrl":"/developer-guide/processors/index.html","__dataUrl":"/developer-guide/processors/index.html.897a3cf6decd29f12a462980908acdb8.json"}