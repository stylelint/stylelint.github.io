{"head":{"description":"Rule testers stylelint rules require a lot of tests. So we've built a specialized stylelint rule testing format to speed up the massâ€¦","title":"Rule testers"},"body":"<h1 id=\"rule-testers\"><a href=\"#rule-testers\" class=\"phenomic-HeadingAnchor\">#</a>Rule testers</h1>\n<p>stylelint rules require <em>a lot</em> of tests. So we've built a specialized stylelint rule testing format to speed up the mass production of consistent, effective rule tests.</p>\n<p>There is a schema for describing tests, and a function for creating \"rule testers\" that interpret that schema using a test framework (e.g. tape or Mocha).</p>\n<p>When developing plugins, you can use the following rule testers or create your own.</p>\n<ul>\n<li>stylelint-test-rule-tape</li>\n<li>stylelint-test-rule-mocha</li>\n<li>stylelint-test-rule-ava</li>\n</ul>\n<p>The rule tester used within the stylelint codebase is at <code>lib/testUtils/testRule.js</code>. (It is the same as <code>stylelint-test-rule-tape</code>.)</p>\n<h2 id=\"using-a-rule-tester\"><a href=\"#using-a-rule-tester\" class=\"phenomic-HeadingAnchor\">#</a>Using a rule tester</h2>\n<p>To use the rule tester of your choice, do the following:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// `testRule` = the imported rule tester</span>\ntestRule(rule, testGroupDescription)</code></pre>\n<p><code>rule</code> is just the rule that you are testing (a function).</p>\n<p><code>testGroupDescription</code> is an object fitting the following schema.</p>\n<h3 id=\"the-test-group-schema\"><a href=\"#the-test-group-schema\" class=\"phenomic-HeadingAnchor\">#</a>The test group schema</h3>\n<p>Each test group object describes a set of test-cases for a certain rule with a certain configuration.</p>\n<p>Required properties:</p>\n<ul>\n<li><code>ruleName</code> {string}: The name of the rule. Used in generated test-case descriptions.</li>\n<li><code>config</code> {any}: The rule's configuration for this test group. Should match the rule configuration format you'd use in <code>.stylelintrc</code>.</li>\n<li>\n<p><code>accept</code> {array}: An array of objects describing test cases that <em>should not violate the rule</em>. Each object has these properties:</p>\n<ul>\n<li><code>code</code> {string}: The source CSS to check.</li>\n<li><code>description</code> {string}: <em>Optional.</em> A description of the case.</li>\n<li><code>only</code> {boolean}: If <code>true</code>, run only this test case.</li>\n</ul>\n</li>\n<li>\n<p><code>reject</code> {array}: An array of objects describing test cases that <em>should violate the rule once</em>. Each object has these properties:</p>\n<ul>\n<li><code>code</code> {string}: The source CSS to check.</li>\n<li><code>message</code> {string}: The message of the expected violation.</li>\n<li><code>line</code> {number}: <em>Optional but recommended.</em> The expected line number of the violation. If this is left out, the line won't be checked.</li>\n<li><code>column</code> {number}: <em>Optional but recommended.</em> The expected column number of the violation. If this is left out, the column won't be checked.</li>\n<li><code>description</code> {string}: <em>Optional.</em> A description of the case.</li>\n<li><code>only</code> {boolean}: If <code>true</code>, run only this test case.</li>\n</ul>\n</li>\n</ul>\n<p>Optional properties:</p>\n<ul>\n<li><code>syntax</code> {\"css\"|\"less\"|\"scss\"|\"sugarss\"}: Defaults to <code>\"css\"</code>. Other settings use special parsers.</li>\n<li><code>skipBasicChecks</code> {boolean}: Defaults to <code>false</code>. If <code>true</code>, a few rudimentary checks (that should almost always be included) will not be performed. You can check those out in <code>lib/testUtils/basicChecks.js</code>.</li>\n<li><code>preceedingPlugins</code> {array}: An array of PostCSS plugins that should be run before the CSS is tested.</li>\n</ul>\n<h2 id=\"creating-a-rule-tester\"><a href=\"#creating-a-rule-tester\" class=\"phenomic-HeadingAnchor\">#</a>Creating a rule tester</h2>\n<p>stylelint itself exposes a means of creating rule testers with just about any testing framework.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> testRule = stylelint.createRuleTester(equalityCheck)</code></pre>\n<p>Pass in an <code>equalityCheck</code> function. Given some information, this checker should use whatever test runner you like to perform equality checks.</p>\n<p>The <code>equalityCheck</code> function should accept two arguments:</p>\n<ul>\n<li><code>processCss</code> {Promise}: A Promise that resolves with an array of comparisons that you need to check (documented below).</li>\n<li>\n<p><code>context</code> {object}: An object that contains additional information you may need:</p>\n<ul>\n<li><code>caseDescription</code> {string}: A description of the test case as  whole. It will end up printing like something this:</li>\n</ul>\n<pre><code class=\"hljs language-bash\">> rule: value-list-comma-space-before\n> config: <span class=\"hljs-string\">\"always-single-line\"</span>\n> code: <span class=\"hljs-string\">\"a { background-size: 0 ,0;\\n}\"</span></code></pre>\n<ul>\n<li><code>comparisonCount</code> {number}: The number of comparisons that will need to be performed (e.g. useful for tape).</li>\n<li><code>completeAssertionDescription</code> {string}: While each individual comparison may have its own description, this is a description of the whole assertion (e.g. useful for Mocha).</li>\n<li><code>only</code> {boolean}: If <code>true</code>, the test runner should only run this test case (e.g. <code>test.only</code> in tape, <code>describe.only</code> in Mocha).</li>\n</ul>\n</li>\n</ul>\n<p><code>processCss</code> is a Promise that resolves with an array of comparisons. Each comparison has the following properties:</p>\n<ul>\n<li><code>actual</code> {any}: Some actual value.</li>\n<li><code>expected</code> {any}: Some expected value.</li>\n<li><code>description</code> {string}: A (possibly empty) description of the comparison.</li>\n</ul>\n<p>Within the <code>equalityCheck</code> function, you need to ensure that you do the following:</p>\n<ul>\n<li>Set up the test case.</li>\n<li>When <code>processCss</code> resolves, loop through every comparison.</li>\n<li>For each comparison, make an assertion checking that <code>actual === expected</code>.</li>\n</ul>\n<p>A <code>testRule</code> function (as described above) is returned.</p>\n","__filename":"developer-guide/rule-testers.md","__url":"/developer-guide/rule-testers/","__resourceUrl":"/developer-guide/rule-testers/index.html","__dataUrl":"/developer-guide/rule-testers/index.html.c3a511b5e0a55b4cc5fbfe836f0e38a9.json"}