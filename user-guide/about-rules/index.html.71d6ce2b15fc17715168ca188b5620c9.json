{"head":{"description":"About rules We have taken great care to consistently name rules. The rules have been designed to work together to enforce strict…","title":"About rules"},"body":"<h1 id=\"about-rules\"><a href=\"#about-rules\" class=\"phenomic-HeadingAnchor\">#</a>About rules</h1>\n<p>We have taken great care to consistently name rules.</p>\n<p>The rules have been designed to work together to enforce strict conventions.</p>\n<ul>\n<li>\n<p><a href=\"#about-rule-names\">About rule names</a></p>\n<ul>\n<li><a href=\"#no-rules\">No rules</a></li>\n<li><a href=\"#max-and-min-rules\">Max and min rules</a></li>\n<li><a href=\"#whitespace-rules\">Whitespace rules</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rules-work-together\">Rules work together</a></p>\n<ul>\n<li>\n<p><a href=\"#-newlinespace-before-and--newlinespace-after-rules\">*-newline/space-before and *-newline/space-after rules</a></p>\n<ul>\n<li><a href=\"#example-a\">Example A</a></li>\n<li><a href=\"#example-b\">Example B</a></li>\n<li><a href=\"#example-c\">Example C</a></li>\n<li><a href=\"#example-d\">Example D</a></li>\n</ul>\n</li>\n<li><a href=\"#-empty-line-before-and--max-empty-lines-rules\">*-empty-line-before and *-max-empty-lines rules</a></li>\n<li>\n<p><a href=\"#-whitelist--blacklist-color-named-and-applicable--no--rules\">*-whitelist, *-blacklist, color-named and applicable *-no-* rules</a></p>\n<ul>\n<li><a href=\"#color\">color</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"about-rule-names\"><a href=\"#about-rule-names\" class=\"phenomic-HeadingAnchor\">#</a>About rule names</h2>\n<p>Rule names are:</p>\n<ul>\n<li>made up of lowercase words separated by hyphens</li>\n<li>split into two parts</li>\n</ul>\n<p>The first part describes what <a href=\"http://apps.workflower.fi/vocabs/css/en\"><em>thing</em></a> the rule applies to. The second part describes what the rule is checking.</p>\n<p>For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"number-leading-zero\"</span>\n<span class=\"hljs-comment\">// ↑          ↑</span>\n<span class=\"hljs-comment\">// the thing  what the rule is checking</span></code></pre>\n<p>There is no first part when the rule applies to the whole stylesheet.</p>\n<p>For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"no-eol-whitespace\"</span>\n<span class=\"hljs-string\">\"indentation\"</span>\n<span class=\"hljs-comment\">//    ↑</span>\n<span class=\"hljs-comment\">// what the rules are checking</span></code></pre>\n<h3 id=\"no-rules\"><a href=\"#no-rules\" class=\"phenomic-HeadingAnchor\">#</a>No rules</h3>\n<p>Most rules require <em>or</em> disallow something.</p>\n<p>For example, whether numbers <em>must</em> or <em>must not</em> have a leading zero:</p>\n<ul>\n<li>\n<p><code>number-leading-zero</code>: <code>string - \"always\"|\"never\"</code></p>\n<ul>\n<li><code>\"always\"</code> -   there <em>must always</em> be a leading zero</li>\n<li><code>\"never\"</code> -   there <em>must never</em> be a leading zero</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0.5</span>; }\n<span class=\"hljs-comment\">/**              ↑\n * This leading zero */</span></code></pre>\n<p>However, some rules <em>just disallow</em> something. These rules include <code>*-no-*</code> in their name.</p>\n<p>For example, whether empty blocks should be disallowed:</p>\n<ul>\n<li><code>block-no-empty</code> -   blocks <em>must not</em> be empty</li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {   }\n<span class=\"hljs-comment\">/** ↑\n * Blocks like this */</span></code></pre>\n<p>Notice how, for a rule like this, it does not make sense to have an option to enforce the opposite i.e. that every block <em>must</em> be empty.</p>\n<h3 id=\"max-and-min-rules\"><a href=\"#max-and-min-rules\" class=\"phenomic-HeadingAnchor\">#</a>Max and min rules</h3>\n<p><code>*-max-*</code> and <code>*-min-*</code> rules are used to <em>set a limit</em> to something.</p>\n<p>For example, specifying the maximum number of digits after the \".\" in a number:</p>\n<ul>\n<li><code>number-max-precision</code>: <code>int</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.333em</span>; }\n<span class=\"hljs-comment\">/**             ↑\n * The maximum number of digits after this \".\" */</span></code></pre>\n<h3 id=\"whitespace-rules\"><a href=\"#whitespace-rules\" class=\"phenomic-HeadingAnchor\">#</a>Whitespace rules</h3>\n<p>Whitespace rules allow you to specify whether an empty line, a single space, a newline or no space must be used in some specific part of the stylesheet.</p>\n<p>The whitespace rules combine two sets of keywords:</p>\n<ul>\n<li><code>before</code>, <code>after</code> and <code>inside</code> are used to specify where the whitespace (if any) is expected</li>\n<li><code>empty-line</code>, <code>space</code> and <code>newline</code> are used to specify whether a single empty line, a single space, a single newline or no space is expected there</li>\n</ul>\n<p>For example, specifying if a single empty line or no space must come before all the comments in a stylesheet:</p>\n<ul>\n<li><code>comment-empty-line-before</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n              ←\n<span class=\"hljs-comment\">/* comment */</span> ↑\n              ↑\n<span class=\"hljs-comment\">/**           ↑\n * This empty line  */</span></code></pre>\n<p>Additionally, some whitespace rule make use of another set of keywords:</p>\n<ul>\n<li><code>comma</code>, <code>colon</code>, <code>semicolon</code>, <code>opening-brace</code>, <code>closing-brace</code>, <code>opening-parenthesis</code>, <code>closing-parenthesis</code>, <code>operator</code> or <code>range-operator</code> are used if a specific piece of punctuation in the <em>thing</em> is being targeted</li>\n</ul>\n<p>For example, specifying if a single space or no space must come after a comma in a function:</p>\n<ul>\n<li><code>function-comma-space-after</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1) }\n<span class=\"hljs-comment\">/**                       ↑\n * The space after this commas */</span></code></pre>\n<p>The plural of the punctuation is used for <code>inside</code> rules. For example, specifying if a single space or no space must be inside the parentheses of a function:</p>\n<ul>\n<li><code>function-parentheses-space-inside</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>( 1, 1 ); }\n<span class=\"hljs-comment\">/**                     ↑      ↑\n * The space inside these two parentheses */</span></code></pre>\n<h2 id=\"rules-work-together\"><a href=\"#rules-work-together\" class=\"phenomic-HeadingAnchor\">#</a>Rules work together</h2>\n<p>The rules can be used together to enforce strict conventions.</p>\n<h3 id=\"-newlinespace-before-and--newlinespace-after-rules\"><a href=\"#-newlinespace-before-and--newlinespace-after-rules\" class=\"phenomic-HeadingAnchor\">#</a><code>*-newline/space-before</code> and <code>*-newline/space-after</code> rules</h3>\n<p>Say you want to enforce no space before and a single space after the colon in every declaration:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n<span class=\"hljs-comment\">/**      ↑\n * No space before and a single space after this colon */</span></code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"declaration-colon-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<p>Some <em>things</em> (e.g. declaration blocks and value lists) can span more than one line. In these cases <code>newline</code> rules and extra options can be used to provide flexibility.</p>\n<p>For example, this is the complete set of <code>value-list-comma-*</code> rules and their options:</p>\n<ul>\n<li><code>value-list-comma-space-after</code>: <code>\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"</code></li>\n<li><code>value-list-comma-space-before</code>: <code>\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"</code></li>\n<li><code>value-list-comma-newline-after</code>: <code>\"always\"|\"always-multi-line|\"never-multi-line\"</code></li>\n<li><code>value-list-comma-newline-before</code>: <code>\"always\"|\"always-multi-line\"|\"never-multi-line\"</code></li>\n</ul>\n<p>Where <code>*-multi-line</code> and <code>*-single-line</code> are in reference to the value list (the <em>thing</em>). For example, given:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span>,\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* single line value list */</span>\n}              ↑                    ↑\n<span class=\"hljs-comment\">/**            ↑                    ↑\n *  The value list start here and ends here */</span></code></pre>\n<p>There is only a single-line value list in this example. The selector is multi-line, as is the declaration block and, as such, also the rule. But the value list isn't and that is what the <code>*-multi-line</code> and <code>*-single-line</code> refer to in the context of this rule.</p>\n<h4 id=\"example-a\"><a href=\"#example-a\" class=\"phenomic-HeadingAnchor\">#</a>Example A</h4>\n<p>Say you only want to allow single-line value lists. And you want to enforce no space before and a single space after the commas:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<h4 id=\"example-b\"><a href=\"#example-b\" class=\"phenomic-HeadingAnchor\">#</a>Example B</h4>\n<p>Say you want to allow both single-line and multi-line value lists. You want there to be a single space after the commas in the single-line lists and no space before the commas in both the single-line and multi-line lists:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* single-line value list with space after, but no space before */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-comment\">/* multi-line value list ... */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-comment\">/* ... with newline after, ...  */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... but no space before */</span>\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<h4 id=\"example-c\"><a href=\"#example-c\" class=\"phenomic-HeadingAnchor\">#</a>Example C</h4>\n<p>Say you want to allow both single-line and multi-line value lists. You want there to be no space before the commas in the single-line lists and always a space after the commas in both lists:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never-single-line\"</span></code></pre>\n<h4 id=\"example-d\"><a href=\"#example-d\" class=\"phenomic-HeadingAnchor\">#</a>Example D</h4>\n<p>Lastly, the rules are flexible enough to enforce entirely different conventions for single-line and multi-line lists. Say you want to allow both single-line and multi-line value lists. You want the single-line lists to have a single space before and after the colons. Whereas you want the multi-line lists to have a single newline before the commas, but no space after:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans , serif , monospace; <span class=\"hljs-comment\">/* single-line list with a single space before and after the comma */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red <span class=\"hljs-comment\">/* multi-line list ... */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset <span class=\"hljs-comment\">/* ... with newline before, ...  */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... but no space after the comma */</span>\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"never-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span></code></pre>\n<h3 id=\"-empty-line-before-and--max-empty-lines-rules\"><a href=\"#-empty-line-before-and--max-empty-lines-rules\" class=\"phenomic-HeadingAnchor\">#</a><code>*-empty-line-before</code> and <code>*-max-empty-lines</code> rules</h3>\n<p>These rules work together to control where empty lines are allowed.</p>\n<p>Each <em>thing</em> is responsible for pushing itself away from the <em>preceding thing</em>, rather than pushing the <em>subsequent thing</em> away. This consistency is to avoid conflicts, and is why there aren't any <code>*-empty-line-after</code> rules in stylelint.</p>\n<p>Say you want to enforce the following:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background</span>: green;\n  <span class=\"hljs-attribute\">color</span>: red;\n\n  @media (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">30em</span>) {\n    color: blue;\n  }\n}\n\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">--custom-property</span>: green;\n\n  <span class=\"hljs-attribute\">background</span>: pink;\n  <span class=\"hljs-attribute\">color</span>: red;\n}</code></pre>\n<p>You can do that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [<span class=\"hljs-string\">\"first-nested\"</span>]\n}],\n<span class=\"hljs-string\">\"custom-property-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [\n    <span class=\"hljs-string\">\"after-custom-property\"</span>,\n    <span class=\"hljs-string\">\"first-nested\"</span>\n  ]\n}],\n<span class=\"hljs-string\">\"declaration-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [\n    <span class=\"hljs-string\">\"after-declaration\"</span>,\n    <span class=\"hljs-string\">\"first-nested\"</span>\n  ]\n}],\n<span class=\"hljs-string\">\"block-closing-brace-empty-line-before\"</span>: <span class=\"hljs-string\">\"never\"</span>,\n<span class=\"hljs-string\">\"rule-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always-multi-line\"</span>]</code></pre>\n<p>We recommend that you set your primary option (e.g. <code>\"always\"</code> or <code>\"never\"</code>) to whatever is your most common occurrence and define your exceptions with the <code>except</code> optional secondary options. There are many values for the <code>except</code> option e.g. <code>first-nested</code>, <code>after-comment</code> etc.</p>\n<p>The <code>*-empty-line-before</code> rules control whether there must never be an empty line or whether there must be <em>one or more</em> empty lines before a <em>thing</em>. The <code>*-max-empty-lines</code> rules complement this by controlling <em>the number</em> of empty lines within <em>things</em>. The <code>max-empty-lines</code> rule is used to set a limit across the entire source. A <em>stricter</em> limit can then be set within <em>things</em> using the likes of <code>function-max-empty-lines</code>, <code>selector-max-empty-lines</code> and <code>value-list-max-empty-lines</code>.</p>\n<p>For example, say you want to enforce the following:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span>,\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">box-shadow</span>:\n    inset <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">#dcffa6</span>,\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">#000</span>;\n}\n\n<span class=\"hljs-selector-tag\">c</span> {\n  <span class=\"hljs-attribute\">transform</span>:\n    <span class=\"hljs-built_in\">translate</span>(\n      1,\n      1\n    );\n}</code></pre>\n<p>i.e. a maximum of 1 empty line within the whole source, but no empty lines within functions, selector lists and value lists.</p>\n<p>You can do that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"function-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-string\">\"max-empty-lines\"</span>: <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-string\">\"selector-list-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-string\">\"value-list-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span></code></pre>\n<h3 id=\"-whitelist--blacklist-color-named-and-applicable--no--rules\"><a href=\"#-whitelist--blacklist-color-named-and-applicable--no--rules\" class=\"phenomic-HeadingAnchor\">#</a><code>*-whitelist</code>, <code>*-blacklist</code>, <code>color-named</code> and applicable <code>*-no-*</code> rules</h3>\n<p>These rules work together to (dis)allow language features and constructs.</p>\n<p>There are <code>*-whitelist</code> and <code>*-blacklist</code> rules that target the main constructs of the CSS language: at-rules, functions, declarations (i.e. property-value pairs), properties and units. These rules can be used to (dis)allow any language features that makes use of these constructs (e.g. <code>@media</code>, <code>rgb()</code>). However, there are features not caught by these <code>*-whitelist</code> and <code>*-blacklist</code> rules (or are, but would require complex regex to configure). There are individual rules, usually a <code>*-no-*</code> rule (e.g. <code>color-no-hex</code> and <code>selector-no-id</code>), to disallow each of these features.</p>\n<p>Say you want to disallow the <code>@debug</code> language extension. You can do that using either the <code>at-rule-blacklist</code> or <code>at-rule-whitelist</code> rules because the <code>@debug</code> language extension uses the at-rule construct e.g.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-blacklist\"</span>: [<span class=\"hljs-string\">\"debug\"</span>]</code></pre>\n<p>Say you want to, for whatever reason, disallow the whole at-rule construct. You can do that using:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-whitelist\"</span>: []</code></pre>\n<p>Say you want to disallow the value <code>none</code> for the <code>border</code> properties. You can do that using either the <code>declaration-property-value-blacklist</code> or <code>declaration-property-value-whitelist</code> e.g.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"declaration-property-value-blacklist\"</span>: [{\n  <span class=\"hljs-string\">\"/^border/\"</span>: [<span class=\"hljs-string\">\"none\"</span>]\n}]</code></pre>\n<h4 id=\"color\"><a href=\"#color\" class=\"phenomic-HeadingAnchor\">#</a>color</h4>\n<p>Most <code>&#x3C;color></code> values are <em>functions</em>. As such, they can be (dis)allowed using either the <code>function-blacklist</code> or <code>function-whitelist</code> rules. There are two other color representations that aren't functions: named colors and hex colors. There are two specific rules that (dis)allow these: <code>color-named</code> and <code>color-no-hex</code>, respectively.</p>\n<p>Say you want to enforce using a named color <em>if one exists for your chosen color</em> and use <code>hwb</code> color if one does not, e.g.:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">hwb</span>(235, 0%, 0%); <span class=\"hljs-comment\">/* there is no named color equivalent for this color */</span>\n  <span class=\"hljs-attribute\">color</span>: black;\n}</code></pre>\n<p>If you're taking a whitelisting approach, you can do that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"always-where-possible\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-whitelist\"</span>: [<span class=\"hljs-string\">\"hwb\"</span>]</code></pre>\n<p>Or, if you're taking a blacklisting approach:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"always-where-possible\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-blacklist\"</span>: [<span class=\"hljs-string\">\"/^rgb/\"</span>, <span class=\"hljs-string\">\"/^hsl/\"</span>, <span class=\"hljs-string\">\"gray\"</span>]</code></pre>\n<p>This approach scales to when language extensions (that use the two built-in extendable syntactic constructs of at-rules and functions) are used. For example, say you want to disallow all standard color presentations in favour of using a custom color representation function, e.g. <code>my-color(red with a dash of green / 5%)</code>. You can do that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"never\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-whitelist\"</span>: [<span class=\"hljs-string\">\"my-color\"</span>]</code></pre>\n","__filename":"user-guide/about-rules.md","__url":"/user-guide/about-rules/","__resourceUrl":"/user-guide/about-rules/index.html","__dataUrl":"/user-guide/about-rules/index.html.71d6ce2b15fc17715168ca188b5620c9.json"}