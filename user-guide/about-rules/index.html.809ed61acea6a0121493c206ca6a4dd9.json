{"head":{"title":"About rules","description":"About rules We have taken great care to consistently name rules. The rules have been designed to work in conjunction with one another so…"},"body":"<h1 id=\"about-rules\"><a href=\"#about-rules\" class=\"phenomic-HeadingAnchor\">#</a>About rules</h1>\n<p>We have taken great care to consistently name rules.</p>\n<p>The rules have been designed to work in conjunction with one another so that strict conventions can be enforced.</p>\n<h2 id=\"about-rule-names\"><a href=\"#about-rule-names\" class=\"phenomic-HeadingAnchor\">#</a>About rule names</h2>\n<ul>\n<li>\n<p>Made of lowercase words separated by hyphens.</p>\n</li>\n<li>\n<p>Split into two parts:</p>\n<ul>\n<li>The first describes what <a href=\"http://apps.workflower.fi/vocabs/css/en\"><em>thing</em></a> the rule applies to.</li>\n<li>The second describes what the rule is checking.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"number-leading-zero\"</span>\n<span class=\"hljs-comment\">// ↑          ↑</span>\n<span class=\"hljs-comment\">// the thing  what the rule is checking</span></code></pre>\n<ul>\n<li>Except when the rule applies to the whole stylesheet:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"no-eol-whitespace\"</span>\n<span class=\"hljs-string\">\"indentation\"</span>\n<span class=\"hljs-comment\">//    ↑</span>\n<span class=\"hljs-comment\">// what the rules are checking</span></code></pre>\n<h3 id=\"no-rules\"><a href=\"#no-rules\" class=\"phenomic-HeadingAnchor\">#</a>No rules</h3>\n<p>Most rules allow you to choose whether you want to require <em>or</em> disallow something.</p>\n<p>For example, whether numbers <em>must</em> or <em>must not</em> have a leading zero:</p>\n<ul>\n<li>\n<p><code>number-leading-zero</code>: <code>string - &quot;always&quot;|&quot;never&quot;</code></p>\n<ul>\n<li><code>&quot;always&quot;</code> - there <em>must always</em> be a leading zero.</li>\n<li><code>&quot;never&quot;</code> - there <em>must never</em> be a leading zero.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0.5</span>; }\n<span class=\"hljs-comment\">/**              ↑\n * This leading zero */</span></code></pre>\n<p>However, some rules <em>just disallow</em> something. <code>*-no-*</code> is used to identify these rules.</p>\n<p>For example, whether empty blocks should be disallowed:</p>\n<ul>\n<li><code>block-no-empty</code> - blocks <em>must not</em> be empty.</li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {   }\n<span class=\"hljs-comment\">/** ↑\n * Blocks like this */</span></code></pre>\n<p>Notice how, for a rule like this, it does not make sense to have an option to enforce the opposite i.e. that every block <em>must</em> be empty.</p>\n<h3 id=\"max-rules\"><a href=\"#max-rules\" class=\"phenomic-HeadingAnchor\">#</a>Max rules</h3>\n<p><code>*-max-*</code> is used when a rule is <em>setting a limit</em> to something.</p>\n<p>For example, specifying the maximum number of digits after the &quot;.&quot; in a number:</p>\n<ul>\n<li><code>number-max-precision</code>: <code>int</code></li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.333em</span>; }\n<span class=\"hljs-comment\">/**             ↑\n * The maximum number of digits after this \".\" */</span></code></pre>\n<h3 id=\"whitespace-rules\"><a href=\"#whitespace-rules\" class=\"phenomic-HeadingAnchor\">#</a>Whitespace rules</h3>\n<p>Whitespace rules allow you to specify whether an empty line, a single space, a newline or no space must be used in some specific part of the stylesheet.</p>\n<p>The whitespace rules combine two sets of keywords:</p>\n<ol>\n<li><code>before</code>, <code>after</code> and <code>inside</code> are used to specify where the whitespace (if any) is expected.</li>\n<li><code>empty-line</code>, <code>space</code> and <code>newline</code> are used to specify whether a single empty line, a single space, a single newline or no space is expected there.</li>\n</ol>\n<p>For example, specifying if a single empty line or no space must come before all the comments in a stylesheet:</p>\n<ul>\n<li><code>comment-empty-line-before</code>: <code>string</code> - <code>&quot;always&quot;|&quot;never&quot;</code></li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n              ←\n<span class=\"hljs-comment\">/* comment */</span> ↑\n              ↑\n<span class=\"hljs-comment\">/**           ↑\n * This empty line  */</span></code></pre>\n<p>Additionally, some whitespace rule make use of another set of keywords:</p>\n<ol>\n<li><code>comma</code>, <code>colon</code>, <code>semicolon</code>, <code>opening-brace</code>, <code>closing-brace</code>, <code>opening-parenthesis</code>, <code>closing-parenthesis</code>, <code>operator</code> or <code>range-operator</code> are used if a specific piece of punctuation in the <em>thing</em> is being targetted.</li>\n</ol>\n<p>For example, specifying if a single space or no space must come after a comma in a function:</p>\n<ul>\n<li><code>function-comma-space-after</code>: <code>string</code> - <code>&quot;always&quot;|&quot;never&quot;</code></li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1) }\n<span class=\"hljs-comment\">/**                       ↑\n * The space after this commas */</span></code></pre>\n<p>The plural of the punctuation is used for <code>inside</code> rules. For example, specifying if a single space or no space must be inside the parentheses of a function:</p>\n<ul>\n<li><code>function-parentheses-space-inside</code>: <code>string</code> - <code>&quot;always&quot;|&quot;never&quot;</code></li>\n</ul>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>( 1, 1 ); }\n<span class=\"hljs-comment\">/**                     ↑      ↑\n * The space inside these two parentheses */</span></code></pre>\n<h2 id=\"rules-work-together\"><a href=\"#rules-work-together\" class=\"phenomic-HeadingAnchor\">#</a>Rules work together</h2>\n<p>The <code>*-before</code> and <code>*-after</code> whitespace rules can be used together to enforce strict conventions.</p>\n<p>Say you want to enforce no space before and a single space after the colon in every declaration:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n<span class=\"hljs-comment\">/**      ↑\n * No space before and a single space after this colon */</span></code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"declaration-colon-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span>,</code></pre>\n<p>Some <em>things</em> (e.g. declaration blocks and value lists) can span more than one line. In these cases <code>newline</code> rules and extra options can be used to provide flexibility.</p>\n<p>For example, this is the complete set of <code>value-list-comma-*</code> rules and their options:</p>\n<ul>\n<li><code>value-list-comma-space-after</code>: <code>&quot;always&quot;|&quot;never&quot;|&quot;always-single-line&quot;|&quot;never-single-line&quot;</code></li>\n<li><code>value-list-comma-space-before</code>: <code>&quot;always&quot;|&quot;never&quot;|&quot;always-single-line&quot;|&quot;never-single-line&quot;</code></li>\n<li><code>value-list-comma-newline-after</code>: <code>&quot;always&quot;|&quot;always-multi-line|&quot;never-multi-line&quot;</code></li>\n<li><code>value-list-comma-newline-before</code>: <code>&quot;always&quot;|&quot;always-multi-line&quot;|&quot;never-multi-line&quot;</code></li>\n</ul>\n<p>Where <code>*-multi-line</code> and <code>*-single-line</code> are in reference to the value list (the <em>thing</em>). For example, given:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span>,\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* single line value list */</span>\n}              ↑                    ↑\n<span class=\"hljs-comment\">/**            ↑                    ↑\n *  The value list start here and ends here */</span></code></pre>\n<p>There is only a single-line value list in this example. The selector is multi-line, as is the declaration block and, as such, also the rule. But the value list isn&#x27;t and that is what the <code>*-multi-line</code> and <code>*-single-line</code> refer to in the context of this rule.</p>\n<h3 id=\"example-a\"><a href=\"#example-a\" class=\"phenomic-HeadingAnchor\">#</a>Example A</h3>\n<p>Say you only want to allow single-line value lists. And you want to enforce no space before and a single space after the commas:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span>,</code></pre>\n<h3 id=\"example-b\"><a href=\"#example-b\" class=\"phenomic-HeadingAnchor\">#</a>Example B</h3>\n<p>Say you want to allow both single-line and multi-line value lists. You want there to be a single space after the commas in the single-line lists and no space before the commas in both the single-line and multi-line lists:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* single-line value list with space after, but no space before */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-comment\">/* multi-line value list ... */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-comment\">/* ... with newline after, ...  */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... but no space before */</span>\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span>,</code></pre>\n<h3 id=\"example-c\"><a href=\"#example-c\" class=\"phenomic-HeadingAnchor\">#</a>Example C</h3>\n<p>Say you want to allow both single-line and multi-line value lists. You want there to be no space before the commas in the single-line lists and always a space after the commas in both lists:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never-single-line\"</span>,</code></pre>\n<h3 id=\"example-d\"><a href=\"#example-d\" class=\"phenomic-HeadingAnchor\">#</a>Example D</h3>\n<p>Lastly, the rules are flexible enough to enforce entirely different conventions for single-line and multi-line lists. Say you want to allow both single-line and multi-line value lists. You want the single-line lists to have a single space before and after the colons. Whereas you want the multi-line lists to have a single newline before the commas, but no space after:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans , serif , monospace; <span class=\"hljs-comment\">/* single-line list with a single space before and after the comma */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red <span class=\"hljs-comment\">/* multi-line list ... */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset <span class=\"hljs-comment\">/* ... with newline before, ...  */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... but no space after the comma */</span>\n}</code></pre>\n<p>You can enforce that with:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"never-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,</code></pre>\n","rawBody":"\n# About rules\n\nWe have taken great care to consistently name rules.\n\nThe rules have been designed to work in conjunction with one another so that strict conventions can be enforced.\n\n## About rule names\n\n- Made of lowercase words separated by hyphens.\n- Split into two parts:\n\n  - The first describes what [*thing*](http://apps.workflower.fi/vocabs/css/en) the rule applies to.\n  - The second describes what the rule is checking.\n\n```js\n\"number-leading-zero\"\n// ↑          ↑\n// the thing  what the rule is checking\n```\n\n- Except when the rule applies to the whole stylesheet:\n\n```js\n\"no-eol-whitespace\"\n\"indentation\"\n//    ↑\n// what the rules are checking\n```\n\n### No rules\n\nMost rules allow you to choose whether you want to require *or* disallow something.\n\nFor example, whether numbers *must* or *must not* have a leading zero:\n\n- `number-leading-zero`: `string - \"always\"|\"never\"`\n\n  - `\"always\"` - there *must always* be a leading zero.\n  - `\"never\"` - there *must never* be a leading zero.\n\n```css\na { line-height: 0.5; }\n/**              ↑\n * This leading zero */\n```\n\nHowever, some rules *just disallow* something. `*-no-*` is used to identify these rules.\n\nFor example, whether empty blocks should be disallowed:\n\n- `block-no-empty` - blocks *must not* be empty.\n\n```css\na {   }\n/** ↑\n * Blocks like this */\n```\n\nNotice how, for a rule like this, it does not make sense to have an option to enforce the opposite i.e. that every block *must* be empty.\n\n### Max rules\n\n`*-max-*` is used when a rule is *setting a limit* to something.\n\nFor example, specifying the maximum number of digits after the \".\" in a number:\n\n- `number-max-precision`: `int`\n\n```css\na { font-size: 1.333em; }\n/**             ↑\n * The maximum number of digits after this \".\" */\n```\n\n### Whitespace rules\n\nWhitespace rules allow you to specify whether an empty line, a single space, a newline or no space must be used in some specific part of the stylesheet.\n\nThe whitespace rules combine two sets of keywords:\n\n1. `before`, `after` and `inside` are used to specify where the whitespace (if any) is expected.\n2. `empty-line`, `space` and `newline` are used to specify whether a single empty line, a single space, a single newline or no space is expected there.\n\nFor example, specifying if a single empty line or no space must come before all the comments in a stylesheet:\n\n- `comment-empty-line-before`: `string` - `\"always\"|\"never\"`\n\n```css\na {}\n              ←\n/* comment */ ↑\n              ↑\n/**           ↑\n * This empty line  */\n```\n\nAdditionally, some whitespace rule make use of another set of keywords:\n\n1. `comma`, `colon`, `semicolon`, `opening-brace`, `closing-brace`, `opening-parenthesis`, `closing-parenthesis`, `operator` or `range-operator` are used if a specific piece of punctuation in the *thing* is being targetted.\n\nFor example, specifying if a single space or no space must come after a comma in a function:\n\n- `function-comma-space-after`: `string` - `\"always\"|\"never\"`\n\n```css\na { transform: translate(1, 1) }\n/**                       ↑\n * The space after this commas */\n```\n\nThe plural of the punctuation is used for `inside` rules. For example, specifying if a single space or no space must be inside the parentheses of a function:\n\n- `function-parentheses-space-inside`: `string` - `\"always\"|\"never\"`\n\n```css\na { transform: translate( 1, 1 ); }\n/**                     ↑      ↑\n * The space inside these two parentheses */\n```\n\n## Rules work together\n\nThe `*-before` and `*-after` whitespace rules can be used together to enforce strict conventions.\n\nSay you want to enforce no space before and a single space after the colon in every declaration:\n\n```css\na { color: pink; }\n/**      ↑\n * No space before and a single space after this colon */\n```\n\nYou can enforce that with:\n\n```js\n\"declaration-colon-space-after\": \"always\",\n\"declaration-colon-space-before\": \"never\",\n```\n\nSome *things* (e.g. declaration blocks and value lists) can span more than one line. In these cases `newline` rules and extra options can be used to provide flexibility.\n\nFor example, this is the complete set of `value-list-comma-*` rules and their options:\n\n- `value-list-comma-space-after`: `\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"`\n- `value-list-comma-space-before`: `\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"`\n- `value-list-comma-newline-after`: `\"always\"|\"always-multi-line|\"never-multi-line\"`\n- `value-list-comma-newline-before`: `\"always\"|\"always-multi-line\"|\"never-multi-line\"`\n\nWhere `*-multi-line` and `*-single-line` are in reference to the value list (the *thing*). For example, given:\n\n```css\na,\nb {\n  color: red;\n  font-family: sans, serif, monospace; /* single line value list */\n}              ↑                    ↑\n/**            ↑                    ↑\n *  The value list start here and ends here */\n```\n\nThere is only a single-line value list in this example. The selector is multi-line, as is the declaration block and, as such, also the rule. But the value list isn't and that is what the `*-multi-line` and `*-single-line` refer to in the context of this rule.\n\n### Example A\n\nSay you only want to allow single-line value lists. And you want to enforce no space before and a single space after the commas:\n\n```css\na {\n  font-family: sans, serif, monospace;\n  box-shadow: 1px 1px 1px red, 2px 2px 1px 1px blue inset, 2px 2px 1px 2px blue inset;\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-space-after\": \"always\",\n\"value-list-comma-space-before\": \"never\",\n```\n\n### Example B\n\nSay you want to allow both single-line and multi-line value lists. You want there to be a single space after the commas in the single-line lists and no space before the commas in both the single-line and multi-line lists:\n\n```css\na {\n  font-family: sans, serif, monospace; /* single-line value list with space after, but no space before */\n  box-shadow: 1px 1px 1px red, /* multi-line value list ... */\n    2px 2px 1px 1px blue inset, /* ... with newline after, ...  */\n    2px 2px 1px 2px blue inset; /* ... but no space before */\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-after\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always-single-line\",\n\"value-list-comma-space-before\": \"never\",\n```\n\n### Example C\n\nSay you want to allow both single-line and multi-line value lists. You want there to be no space before the commas in the single-line lists and always a space after the commas in both lists:\n\n```css\na {\n  font-family: sans, serif, monospace;\n  box-shadow: 1px 1px 1px red\n    , 2px 2px 1px 1px blue inset\n    , 2px 2px 1px 2px blue inset;\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-before\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always\",\n\"value-list-comma-space-before\": \"never-single-line\",\n```\n\n### Example D\n\nLastly, the rules are flexible enough to enforce entirely different conventions for single-line and multi-line lists. Say you want to allow both single-line and multi-line value lists. You want the single-line lists to have a single space before and after the colons. Whereas you want the multi-line lists to have a single newline before the commas, but no space after:\n\n```css\na {\n  font-family: sans , serif , monospace; /* single-line list with a single space before and after the comma */\n  box-shadow: 1px 1px 1px red /* multi-line list ... */\n    ,2px 2px 1px 1px blue inset /* ... with newline before, ...  */\n    ,2px 2px 1px 2px blue inset; /* ... but no space after the comma */\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-after\": \"never-multi-line\",\n\"value-list-comma-newline-before\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always-single-line\",\n\"value-list-comma-space-before\": \"always-single-line\",\n```\n","raw":"---\ntitle: About rules\n---\n\n# About rules\n\nWe have taken great care to consistently name rules.\n\nThe rules have been designed to work in conjunction with one another so that strict conventions can be enforced.\n\n## About rule names\n\n- Made of lowercase words separated by hyphens.\n- Split into two parts:\n\n  - The first describes what [*thing*](http://apps.workflower.fi/vocabs/css/en) the rule applies to.\n  - The second describes what the rule is checking.\n\n```js\n\"number-leading-zero\"\n// ↑          ↑\n// the thing  what the rule is checking\n```\n\n- Except when the rule applies to the whole stylesheet:\n\n```js\n\"no-eol-whitespace\"\n\"indentation\"\n//    ↑\n// what the rules are checking\n```\n\n### No rules\n\nMost rules allow you to choose whether you want to require *or* disallow something.\n\nFor example, whether numbers *must* or *must not* have a leading zero:\n\n- `number-leading-zero`: `string - \"always\"|\"never\"`\n\n  - `\"always\"` - there *must always* be a leading zero.\n  - `\"never\"` - there *must never* be a leading zero.\n\n```css\na { line-height: 0.5; }\n/**              ↑\n * This leading zero */\n```\n\nHowever, some rules *just disallow* something. `*-no-*` is used to identify these rules.\n\nFor example, whether empty blocks should be disallowed:\n\n- `block-no-empty` - blocks *must not* be empty.\n\n```css\na {   }\n/** ↑\n * Blocks like this */\n```\n\nNotice how, for a rule like this, it does not make sense to have an option to enforce the opposite i.e. that every block *must* be empty.\n\n### Max rules\n\n`*-max-*` is used when a rule is *setting a limit* to something.\n\nFor example, specifying the maximum number of digits after the \".\" in a number:\n\n- `number-max-precision`: `int`\n\n```css\na { font-size: 1.333em; }\n/**             ↑\n * The maximum number of digits after this \".\" */\n```\n\n### Whitespace rules\n\nWhitespace rules allow you to specify whether an empty line, a single space, a newline or no space must be used in some specific part of the stylesheet.\n\nThe whitespace rules combine two sets of keywords:\n\n1. `before`, `after` and `inside` are used to specify where the whitespace (if any) is expected.\n2. `empty-line`, `space` and `newline` are used to specify whether a single empty line, a single space, a single newline or no space is expected there.\n\nFor example, specifying if a single empty line or no space must come before all the comments in a stylesheet:\n\n- `comment-empty-line-before`: `string` - `\"always\"|\"never\"`\n\n```css\na {}\n              ←\n/* comment */ ↑\n              ↑\n/**           ↑\n * This empty line  */\n```\n\nAdditionally, some whitespace rule make use of another set of keywords:\n\n1. `comma`, `colon`, `semicolon`, `opening-brace`, `closing-brace`, `opening-parenthesis`, `closing-parenthesis`, `operator` or `range-operator` are used if a specific piece of punctuation in the *thing* is being targetted.\n\nFor example, specifying if a single space or no space must come after a comma in a function:\n\n- `function-comma-space-after`: `string` - `\"always\"|\"never\"`\n\n```css\na { transform: translate(1, 1) }\n/**                       ↑\n * The space after this commas */\n```\n\nThe plural of the punctuation is used for `inside` rules. For example, specifying if a single space or no space must be inside the parentheses of a function:\n\n- `function-parentheses-space-inside`: `string` - `\"always\"|\"never\"`\n\n```css\na { transform: translate( 1, 1 ); }\n/**                     ↑      ↑\n * The space inside these two parentheses */\n```\n\n## Rules work together\n\nThe `*-before` and `*-after` whitespace rules can be used together to enforce strict conventions.\n\nSay you want to enforce no space before and a single space after the colon in every declaration:\n\n```css\na { color: pink; }\n/**      ↑\n * No space before and a single space after this colon */\n```\n\nYou can enforce that with:\n\n```js\n\"declaration-colon-space-after\": \"always\",\n\"declaration-colon-space-before\": \"never\",\n```\n\nSome *things* (e.g. declaration blocks and value lists) can span more than one line. In these cases `newline` rules and extra options can be used to provide flexibility.\n\nFor example, this is the complete set of `value-list-comma-*` rules and their options:\n\n- `value-list-comma-space-after`: `\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"`\n- `value-list-comma-space-before`: `\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"`\n- `value-list-comma-newline-after`: `\"always\"|\"always-multi-line|\"never-multi-line\"`\n- `value-list-comma-newline-before`: `\"always\"|\"always-multi-line\"|\"never-multi-line\"`\n\nWhere `*-multi-line` and `*-single-line` are in reference to the value list (the *thing*). For example, given:\n\n```css\na,\nb {\n  color: red;\n  font-family: sans, serif, monospace; /* single line value list */\n}              ↑                    ↑\n/**            ↑                    ↑\n *  The value list start here and ends here */\n```\n\nThere is only a single-line value list in this example. The selector is multi-line, as is the declaration block and, as such, also the rule. But the value list isn't and that is what the `*-multi-line` and `*-single-line` refer to in the context of this rule.\n\n### Example A\n\nSay you only want to allow single-line value lists. And you want to enforce no space before and a single space after the commas:\n\n```css\na {\n  font-family: sans, serif, monospace;\n  box-shadow: 1px 1px 1px red, 2px 2px 1px 1px blue inset, 2px 2px 1px 2px blue inset;\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-space-after\": \"always\",\n\"value-list-comma-space-before\": \"never\",\n```\n\n### Example B\n\nSay you want to allow both single-line and multi-line value lists. You want there to be a single space after the commas in the single-line lists and no space before the commas in both the single-line and multi-line lists:\n\n```css\na {\n  font-family: sans, serif, monospace; /* single-line value list with space after, but no space before */\n  box-shadow: 1px 1px 1px red, /* multi-line value list ... */\n    2px 2px 1px 1px blue inset, /* ... with newline after, ...  */\n    2px 2px 1px 2px blue inset; /* ... but no space before */\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-after\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always-single-line\",\n\"value-list-comma-space-before\": \"never\",\n```\n\n### Example C\n\nSay you want to allow both single-line and multi-line value lists. You want there to be no space before the commas in the single-line lists and always a space after the commas in both lists:\n\n```css\na {\n  font-family: sans, serif, monospace;\n  box-shadow: 1px 1px 1px red\n    , 2px 2px 1px 1px blue inset\n    , 2px 2px 1px 2px blue inset;\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-before\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always\",\n\"value-list-comma-space-before\": \"never-single-line\",\n```\n\n### Example D\n\nLastly, the rules are flexible enough to enforce entirely different conventions for single-line and multi-line lists. Say you want to allow both single-line and multi-line value lists. You want the single-line lists to have a single space before and after the colons. Whereas you want the multi-line lists to have a single newline before the commas, but no space after:\n\n```css\na {\n  font-family: sans , serif , monospace; /* single-line list with a single space before and after the comma */\n  box-shadow: 1px 1px 1px red /* multi-line list ... */\n    ,2px 2px 1px 1px blue inset /* ... with newline before, ...  */\n    ,2px 2px 1px 2px blue inset; /* ... but no space after the comma */\n}\n```\n\nYou can enforce that with:\n\n```js\n\"value-list-comma-newline-after\": \"never-multi-line\",\n\"value-list-comma-newline-before\": \"always-multi-line\",\n\"value-list-comma-space-after\": \"always-single-line\",\n\"value-list-comma-space-before\": \"always-single-line\",\n```\n","__filename":"user-guide/about-rules.md","__url":"/user-guide/about-rules/","__resourceUrl":"/user-guide/about-rules/index.html","__dataUrl":"/user-guide/about-rules/index.html.809ed61acea6a0121493c206ca6a4dd9.json"}