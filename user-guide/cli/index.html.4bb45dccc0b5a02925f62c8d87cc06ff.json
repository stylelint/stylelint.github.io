{"head":{"title":"The stylelint CLI","description":"The stylelint CLI stylelint --help prints the CLI documentation. The CLI outputs formatted results into process.stdout, which you can readâ€¦"},"body":"<h1 id=\"the-stylelint-cli\"><a href=\"#the-stylelint-cli\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint CLI</h1>\n<p><code>stylelint --help</code> prints the CLI documentation.</p>\n<p>The CLI outputs formatted results into <code>process.stdout</code>, which you can read with your human eyes or pipe elsewhere (e.g. write the information to a file).</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>Looking for <code>.stylelintrc</code> and linting all <code>.css</code> files in the <code>foo</code> directory:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\"</code></pre>\n<p>Looking for <code>.stylelintrc</code> and linting <code>stdin</code>:</p>\n<pre><code class=\"hljs language-shell\">echo \"a { color: pink; }\" | stylelint</code></pre>\n<p>Using <code>bar/mySpecialConfig.json</code> as config to lint all <code>.css</code> files in the <code>foo</code> directory, then writing the output to <code>myTestReport.txt</code>:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\" --config bar/mySpecialConfig.json &gt; myTestReport.txt</code></pre>\n<p>Using <code>bar/mySpecialConfig.json</code> as config, with quiet mode on, to lint all <code>.css</code> files in the <code>foo</code> directory and any of its subdirectories and also all <code>.css</code> files in the <code>bar directory</code>, then writing the JSON-formatted output to <code>myJsonReport.json</code>:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.css bar/*.css\" -q -f json --config bar/mySpecialConfig.json &gt; myJsonReport.json</code></pre>\n<p>Linting all the <code>.scss</code> files in the <code>foo</code> directory, using the <code>syntax</code> option:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.scss\" --syntax scss</code></pre>\n<p>The above can be slightly altered to read Less or SugarSS syntax: <code>--syntax less</code>, <code>--syntax sugarss</code>.</p>\n<h2 id=\"syntax-errors\"><a href=\"#syntax-errors\" class=\"phenomic-HeadingAnchor\">#</a>Syntax errors</h2>\n<p>The CLI informs you about syntax errors in your CSS.\nIt uses the same format as it uses for linting warnings.\nThe error name is <code>CssSyntaxError</code>.</p>\n<h2 id=\"exit-codes\"><a href=\"#exit-codes\" class=\"phenomic-HeadingAnchor\">#</a>Exit codes</h2>\n<p>The CLI can exit the process with the following exit codes:</p>\n<ul>\n<li>1: Something unknown went wrong.</li>\n<li>2: At least one rule with an &quot;error&quot;-level severity triggered at least one warning.</li>\n<li>78: There was some problem with the configuration file.</li>\n<li>80: A file glob was passed both it found no files.</li>\n</ul>\n","rawBody":"\n# The stylelint CLI\n\n`stylelint --help` prints the CLI documentation.\n\nThe CLI outputs formatted results into `process.stdout`, which you can read with your human eyes or pipe elsewhere (e.g. write the information to a file).\n\n## Usage examples\n\nLooking for `.stylelintrc` and linting all `.css` files in the `foo` directory:  \n\n```shell\nstylelint \"foo/*.css\"\n```\n\nLooking for `.stylelintrc` and linting `stdin`:\n\n```shell\necho \"a { color: pink; }\" | stylelint\n```\n\nUsing `bar/mySpecialConfig.json` as config to lint all `.css` files in the `foo` directory, then writing the output to `myTestReport.txt`:\n\n```shell\nstylelint \"foo/*.css\" --config bar/mySpecialConfig.json > myTestReport.txt\n```\n\nUsing `bar/mySpecialConfig.json` as config, with quiet mode on, to lint all `.css` files in the `foo` directory and any of its subdirectories and also all `.css` files in the `bar directory`, then writing the JSON-formatted output to `myJsonReport.json`:\n\n```shell\nstylelint \"foo/**/*.css bar/*.css\" -q -f json --config bar/mySpecialConfig.json > myJsonReport.json\n```\n\nLinting all the `.scss` files in the `foo` directory, using the `syntax` option:\n\n```shell\nstylelint \"foo/**/*.scss\" --syntax scss\n```\n\nThe above can be slightly altered to read Less or SugarSS syntax: `--syntax less`, `--syntax sugarss`.\n\n## Syntax errors\n\nThe CLI informs you about syntax errors in your CSS.\nIt uses the same format as it uses for linting warnings.\nThe error name is `CssSyntaxError`.\n\n## Exit codes\n\nThe CLI can exit the process with the following exit codes:\n\n- 1: Something unknown went wrong.\n- 2: At least one rule with an \"error\"-level severity triggered at least one warning.\n- 78: There was some problem with the configuration file.\n- 80: A file glob was passed both it found no files.\n","raw":"---\ntitle: The stylelint CLI\n---\n\n# The stylelint CLI\n\n`stylelint --help` prints the CLI documentation.\n\nThe CLI outputs formatted results into `process.stdout`, which you can read with your human eyes or pipe elsewhere (e.g. write the information to a file).\n\n## Usage examples\n\nLooking for `.stylelintrc` and linting all `.css` files in the `foo` directory:  \n\n```shell\nstylelint \"foo/*.css\"\n```\n\nLooking for `.stylelintrc` and linting `stdin`:\n\n```shell\necho \"a { color: pink; }\" | stylelint\n```\n\nUsing `bar/mySpecialConfig.json` as config to lint all `.css` files in the `foo` directory, then writing the output to `myTestReport.txt`:\n\n```shell\nstylelint \"foo/*.css\" --config bar/mySpecialConfig.json > myTestReport.txt\n```\n\nUsing `bar/mySpecialConfig.json` as config, with quiet mode on, to lint all `.css` files in the `foo` directory and any of its subdirectories and also all `.css` files in the `bar directory`, then writing the JSON-formatted output to `myJsonReport.json`:\n\n```shell\nstylelint \"foo/**/*.css bar/*.css\" -q -f json --config bar/mySpecialConfig.json > myJsonReport.json\n```\n\nLinting all the `.scss` files in the `foo` directory, using the `syntax` option:\n\n```shell\nstylelint \"foo/**/*.scss\" --syntax scss\n```\n\nThe above can be slightly altered to read Less or SugarSS syntax: `--syntax less`, `--syntax sugarss`.\n\n## Syntax errors\n\nThe CLI informs you about syntax errors in your CSS.\nIt uses the same format as it uses for linting warnings.\nThe error name is `CssSyntaxError`.\n\n## Exit codes\n\nThe CLI can exit the process with the following exit codes:\n\n- 1: Something unknown went wrong.\n- 2: At least one rule with an \"error\"-level severity triggered at least one warning.\n- 78: There was some problem with the configuration file.\n- 80: A file glob was passed both it found no files.\n","__filename":"user-guide/cli.md","__url":"/user-guide/cli/","__resourceUrl":"/user-guide/cli/index.html","__dataUrl":"/user-guide/cli/index.html.4bb45dccc0b5a02925f62c8d87cc06ff.json"}