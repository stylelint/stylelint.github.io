{"head":{"description":"The stylelint CLI Installation stylelint is an npm package. Install it using: Usage stylelint --help prints the CLI documentation. The CLIâ€¦","title":"The stylelint CLI"},"body":"<h1 id=\"the-stylelint-cli\"><a href=\"#the-stylelint-cli\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint CLI</h1>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h2>\n<p>stylelint is an <a href=\"https://www.npmjs.com/package/stylelint\">npm package</a>. Install it using:</p>\n<pre><code class=\"hljs language-shell\">npm install stylelint --save-dev</code></pre>\n<ul>\n<li>\n<p><a href=\"#usage\">Usage</a></p>\n<ul>\n<li><a href=\"#examples\">Examples</a></li>\n<li><a href=\"#recursively-linting-a-directory\">Recursively linting a directory</a></li>\n<li><a href=\"#autofixing-errors\">Autofixing errors</a></li>\n<li><a href=\"#troubleshooting-configurations\">Troubleshooting configurations</a></li>\n</ul>\n</li>\n<li><a href=\"#syntax-errors\">Syntax errors</a></li>\n<li><a href=\"#exit-codes\">Exit codes</a></li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"phenomic-HeadingAnchor\">#</a>Usage</h2>\n<p><code>stylelint --help</code> prints the CLI documentation.</p>\n<p>The CLI outputs formatted results into <code>process.stdout</code>, which you can read with your human eyes or pipe elsewhere (e.g. write the information to a file).</p>\n<h3 id=\"examples\"><a href=\"#examples\" class=\"phenomic-HeadingAnchor\">#</a>Examples</h3>\n<p>When you run commands similar to the examples below, be sure to include the quotation marks around file globs. This ensures that you can use the powers of <a href=\"https://github.com/sindresorhus/globby\">globby</a> (like the <code>**</code> globstar) regardless of your shell.</p>\n<p>Looking for <code>.stylelintrc</code> and linting all <code>.css</code> files in the <code>foo</code> directory:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\"</code></pre>\n<p>Looking for <code>.stylelintrc</code> and linting all <code>&#x3C;style></code> blocks within the <code>.html</code> files in the <code>bar</code> directory:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"bar/*.html\"</code></pre>\n<p>Looking for <code>.stylelintrc</code> and linting <code>stdin</code>:</p>\n<pre><code class=\"hljs language-shell\">echo \"a { color: pink; }\" | stylelint</code></pre>\n<p>Using <code>bar/mySpecialConfig.json</code> as config to lint all <code>.css</code> files in the <code>foo</code> directory, then writing the output to <code>myTestReport.txt</code>:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\" --config bar/mySpecialConfig.json > myTestReport.txt</code></pre>\n<p>Using <code>bar/mySpecialConfig.json</code> as config, with quiet mode on, to lint all <code>.css</code> files in the <code>foo</code> directory and any of its subdirectories and also all <code>.css</code> files in the <code>bar directory</code>:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.css\" \"bar/*.css\" -q -f json --config bar/mySpecialConfig.json</code></pre>\n<p>Linting all <code>.css</code> files except those within <code>docker</code> subfolders, using negation in the input glob:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"**/*.css, !**/docker/**\"</code></pre>\n<p>Caching processed <code>.scss</code> files in order to operate only on changed ones in the <code>foo</code> directory, using the <code>cache</code> and <code>cache-location</code> options:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.scss\" --cache --cache-location \"/Users/user/.stylelintcache/\"</code></pre>\n<p>stylelint will <a href=\"../css-processors/#parsing-non-standard-syntax\">automatically infer the syntax</a>. You can, however, force a specific syntax using the  <code>--syntax</code> option. For example, linting all the <code>.css</code> files in the <code>foo</code> directory <em>as Scss</em>:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.css\" --syntax scss</code></pre>\n<p>stylelint can also accept a custom <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS-compatible syntax</a>. To use a custom syntax, supply a syntax module name or path to the syntax file: <code>--custom-syntax custom-syntax</code> or <code>--custom-syntax ./path/to/custom-syntax</code>.</p>\n<h3 id=\"recursively-linting-a-directory\"><a href=\"#recursively-linting-a-directory\" class=\"phenomic-HeadingAnchor\">#</a>Recursively linting a directory</h3>\n<p>To recursively lint a directory, using the <code>**</code> globstar:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.scss\"</code></pre>\n<p>The quotation marks around the glob are important because they will allow stylelint to interpret the glob, using globby, instead of your shell, which might not support all the same features.</p>\n<h3 id=\"autofixing-errors\"><a href=\"#autofixing-errors\" class=\"phenomic-HeadingAnchor\">#</a>Autofixing errors</h3>\n<p>With <code>--fix</code> option stylelint will fix as many errors as possible. The fixes are made to the actual source files. All unfixed errors will be reported.</p>\n<p>Linting all <code>.css</code> files in the <code>foo</code> directory. And fixing source files if violated rules support autofixing:</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\" --fix</code></pre>\n<p><strong>Note:</strong> It's an <em>experimental</em> feature. It currently does not respect special comments for disabling stylelint within sources (e. g. <code>/* stylelint-disable */</code>). Autofixing will be applied regardless of these comments.</p>\n<p>If you're using both these special comments and autofixing, please run stylelint twice as a temporary solution. On the first run, some violations could be missed, or some violations might be reported incorrectly.</p>\n<p>For CSS with standard syntax, stylelint will use <a href=\"https://github.com/postcss/postcss-safe-parser\">postcss-safe-parser</a> to fix syntax errors.</p>\n<h3 id=\"troubleshooting-configurations\"><a href=\"#troubleshooting-configurations\" class=\"phenomic-HeadingAnchor\">#</a>Troubleshooting configurations</h3>\n<p>With the <code>--print-config</code> option, stylelint outputs the configuration to be used for the file passed. When present, no linting is performed and only config-related options are valid.</p>\n<h2 id=\"syntax-errors\"><a href=\"#syntax-errors\" class=\"phenomic-HeadingAnchor\">#</a>Syntax errors</h2>\n<p>The CLI informs you about syntax errors in your CSS.\nIt uses the same format as it uses for linting violations.\nThe error name is <code>CssSyntaxError</code>.</p>\n<h2 id=\"exit-codes\"><a href=\"#exit-codes\" class=\"phenomic-HeadingAnchor\">#</a>Exit codes</h2>\n<p>The CLI can exit the process with the following exit codes:</p>\n<ul>\n<li>1: Something unknown went wrong.</li>\n<li>2: At least one rule with an \"error\"-level severity triggered at least one violations.</li>\n<li>78: There was some problem with the configuration file.</li>\n<li>80: A file glob was passed, but it found no files.</li>\n</ul>\n","__filename":"user-guide/cli.md","__url":"/user-guide/cli/","__resourceUrl":"/user-guide/cli/index.html","__dataUrl":"/user-guide/cli/index.html.c2fbaeca69d5c8b0e86da334eeb129c9.json"}