{"head":{"description":"Configuration The linter expects a configuration object. You can either craft your own config or extend an existing one. Loading theâ€¦","title":"Configuration"},"body":"<h1 id=\"configuration\"><a href=\"#configuration\" class=\"phenomic-HeadingAnchor\">#</a>Configuration</h1>\n<p>The linter <em>expects a configuration object</em>. You can either craft your own config or extend an existing one.</p>\n<h2 id=\"loading-the-configuration-object\"><a href=\"#loading-the-configuration-object\" class=\"phenomic-HeadingAnchor\">#</a>Loading the configuration object</h2>\n<p>Finding and loading of your configuration object is done with <a href=\"https://github.com/davidtheclark/cosmiconfig\">cosmiconfig</a>. Starting from the current working directory, it will look for the following possible sources, in this order:</p>\n<ul>\n<li>a <code>stylelint</code> property in <code>package.json</code></li>\n<li>a <code>.stylelintrc</code> file</li>\n<li>a <code>stylelint.config.js</code> file exporting a JS object</li>\n</ul>\n<p>The <code>.stylelintrc</code> file (without extension) can be in JSON or YAML format. Alternately, you can add a filename extension to designate JSON, YAML, or JS format: <code>.stylelintrc.json</code>, <code>.stylelintrc.yaml</code>, <code>.stylelintrc.js</code>. You may want to use an extension so that your text editor can better interpret the file, and help with syntax checking and highlighting.</p>\n<p>Once one of these is found and parsed, the search will stop and that object will be used.</p>\n<p>The configuration search can be short-circuited by using either the <code>config</code> or <code>configFile</code> options.</p>\n<h2 id=\"the-configuration-object\"><a href=\"#the-configuration-object\" class=\"phenomic-HeadingAnchor\">#</a>The configuration object</h2>\n<p>The configuration object can have the following properties.</p>\n<h3 id=\"rules\"><a href=\"#rules\" class=\"phenomic-HeadingAnchor\">#</a><code>rules</code></h3>\n<p>Rules determine what the linter looks for and complains about. There are <a href=\"../rules/\">over 150</a> built into stylelint. <em>No rules are turned on by default</em>, so this is where you turn on everything you want to check. All the rules must be explicitly configured as <em>there are no default values</em>.</p>\n<p>The <code>rules</code> property is <em>an object whose keys are rule names and values are rule configurations</em>. Each rule configuration fits one of the following formats:</p>\n<ul>\n<li>a single value (the primary option)</li>\n<li>an array with two values (<code>[primary option, secondary options]</code>)</li>\n<li><code>null</code> (to turn the rule off)</li>\n</ul>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"block-no-empty\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">\"color-no-invalid-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">\"comment-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n      <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"stylelint-commands\"</span>, <span class=\"hljs-string\">\"between-comments\"</span>]\n    } ],\n    <span class=\"hljs-attr\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n    <span class=\"hljs-attr\">\"indentation\"</span>: [<span class=\"hljs-string\">\"tab\"</span>, {\n      <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>]\n    }],\n    <span class=\"hljs-attr\">\"max-empty-lines\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">\"rule-nested-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n      <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"first-nested\"</span>],\n      <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"after-comment\"</span>]\n    } ],\n    <span class=\"hljs-attr\">\"unit-whitelist\"</span>: [<span class=\"hljs-string\">\"em\"</span>, <span class=\"hljs-string\">\"rem\"</span>, <span class=\"hljs-string\">\"%\"</span>, <span class=\"hljs-string\">\"s\"</span>]\n  }\n}</code></pre>\n<p>Specifying a primary option will turn a rule on.</p>\n<h4 id=\"turning-rules-off-from-within-your-css\"><a href=\"#turning-rules-off-from-within-your-css\" class=\"phenomic-HeadingAnchor\">#</a>Turning rules off from within your CSS</h4>\n<p>Rules can be temporarily turned off by using special comments in your CSS. For example, you can either turn all the rules off:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>Or you can turn off individual rules:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable selector-no-id, declaration-no-important  */</span>\n<span class=\"hljs-selector-id\">#id</span> {\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>You can turn off rules for individual lines only with a <code>/* stylelint-disable-line */</code> comment, after which you do not need to explicitly re-enable them:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-id\">#id</span> { <span class=\"hljs-comment\">/* stylelint-disable-line */</span>\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>; <span class=\"hljs-comment\">/* stylelint-disable-line declaration-no-important */</span>\n}</code></pre>\n<p>You can also turn off rules for <em>the next line only</em> with a <code>/* stylelint-disable-next-line */</code> comment, after which you do not need to explicitly re-enable them:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-id\">#id</span> {\n  <span class=\"hljs-comment\">/* stylelint-disable-next-line declaration-no-important */</span>\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n}</code></pre>\n<p>Complex, overlapping disabling &#x26; enabling patterns are supported:</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-enable */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-disable baz */</span>\n<span class=\"hljs-comment\">/* stylelint-enable baz, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span></code></pre>\n<p><strong>Caveat:</strong> Comments within <em>selector and value lists</em> are currently ignored.</p>\n<h4 id=\"severities-error--warning\"><a href=\"#severities-error--warning\" class=\"phenomic-HeadingAnchor\">#</a>Severities: error &#x26; warning</h4>\n<p>By default, all rules have an <code>\"error\"</code>-level severity. You can change this default by adding a <code>defaultSeverity</code> property to your configuration (see below).</p>\n<p>To adjust any specific rule's severity, use the secondary option <code>severity</code>. The available values for <code>severity</code> are:</p>\n<ul>\n<li><code>\"warning\"</code></li>\n<li><code>\"error\"</code></li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// error-level severity examples</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: <span class=\"hljs-number\">2</span> }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>] }\n\n<span class=\"hljs-comment\">// warning-level severity examples</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, { <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span> } ] }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-string\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>],\n    <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  }]\n}</code></pre>\n<p>Different reporters may use these severity levels in different way, e.g. display them differently, or exit the process differently.</p>\n<h4 id=\"custom-messages\"><a href=\"#custom-messages\" class=\"phenomic-HeadingAnchor\">#</a>Custom Messages</h4>\n<p>If you want to deliver a custom message when a rule is violated, you can do so in two ways: provide a <code>message</code> option for the rule, or write a custom formatter.</p>\n<p>All rules accept a <code>message</code> secondary option that, if provided, will be substituted for whatever standard message would be provided. For example, the following rule configuration would substitute in a couple of custom message:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"color-hex-case\"</span>: [ <span class=\"hljs-string\">\"lower\"</span>, {\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"Lowercase letters are easier to distinguish from numbers\"</span>\n  } ],\n  <span class=\"hljs-attr\">\"indentation\"</span>: [ <span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"block\"</span>],\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"Please use 2 spaces for indentation. Tabs make The Architect grumpy.\"</span>,\n    <span class=\"hljs-attr\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  } ]\n}</code></pre>\n<p>Writing a <a href=\"../../developer-guide/formatters/\">custom formatter</a> gives you maximum control if you need serious customization.</p>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"phenomic-HeadingAnchor\">#</a><code>extends</code></h3>\n<p>Your configuration can <em>extend</em> an existing configuration (whether your own or a third-party config). When one configuration extends another, it starts with the other's properties then adds to and overrides what's there.</p>\n<p>You can extend an array of existing configurations, with each item in the array taking precedence over the following (so the first item overrides everything else, the second item overrides everything but the first, the last gets overridden by everything else, etc.).</p>\n<p>For example, extending the <a href=\"https://github.com/stylelint/stylelint-config-standard\"><code>stylelint-config-standard</code></a> and then changing indentation to tabs and turning off the <code>number-leading-zero</code> rule:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>,\n    <span class=\"hljs-attr\">\"number-leading-zero\"</span>: <span class=\"hljs-literal\">null</span>\n  }\n}</code></pre>\n<p>Or starting with <code>stylelint-config-standard</code>, then layering <code>myExtendableConfig</code> on top of that, and then overriding the indentation rule:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: [\n    <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n    <span class=\"hljs-string\">\"./myExtendableConfig\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>\n  }\n}</code></pre>\n<p>The value of <code>\"extends\"</code> is a \"locater\" (or an array of \"locaters\") that is ultimately <code>require()</code>d, so can fit whatever format works with Node's <code>require.resolve()</code> algorithm. That means the a \"locater\" can be:</p>\n<ul>\n<li>The name of a module in <code>node_modules</code> (e.g. <code>stylelint-config-standard</code>; that module's <code>main</code> file must be a valid JSON configuration)</li>\n<li>An absolute path to a file (which makes sense if you're creating a JS object in a Node context and passing it in) with a <code>.js</code> or <code>.json</code> extension.</li>\n<li>A relative path to a file with a <code>.js</code> or <code>.json</code> extension, relative to the referencing configuration (e.g. if configA has <code>extends: \"../configB\"</code>, we'll look for <code>configB</code> relative to configA).</li>\n</ul>\n<p><em>Because of <code>extends</code>, you can create and use shareable stylelint configurations.</em> Use the <code>stylelint-config</code> keyword within your <code>package.json</code> if publishing your config to npm.</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"phenomic-HeadingAnchor\">#</a><code>plugins</code></h3>\n<p>Plugins are rules or sets of rules built by the community that support methodologies, toolsets, <em>non-standard</em> CSS features, or very specific use cases.</p>\n<p>To use one, add a <code>\"plugins\"</code> array to your config, containing \"locaters\" identifying the plugins you want to use. As with <code>extends</code>, above, a \"locater\" can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.</p>\n<p>Once the plugin is declared, within your <code>\"rules\"</code> object <em>you'll need to add options</em> for the plugin's rule(s), just like any standard rule. You will have to look at the plugin's documentation to know what the rule name should be.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../special-rule.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"plugin/special-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  }\n}</code></pre>\n<p>A \"plugin\" can provide a single rule or a set of rules. If the plugin you use provides a set, just invoke the module in your <code>\"plugins\"</code> configuration value, and use the rules it provides in <code>\"rules\"</code>. For example:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../some-rule-set.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"some-rule-set/first-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/second-rule\"</span>: <span class=\"hljs-string\">\"nothing\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/third-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  }\n}</code></pre>\n<h3 id=\"processors\"><a href=\"#processors\" class=\"phenomic-HeadingAnchor\">#</a><code>processors</code></h3>\n<p>Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.</p>\n<p><em>Processors can only be used with the CLI and the Node API, not with the PostCSS plugin.</em> (The PostCSS plugin will ignore them.)</p>\n<p>Processors can enable stylelint to lint the CSS within non-stylesheet files. For example, you could lint the CSS within <code>&#x3C;style></code> tags in HTML, code blocks in Markdown, or strings in JavaScript.</p>\n<p>To use one, add a <code>\"processors\"</code> array to your config, containing \"locaters\" identifying the processors you want to use. As with <code>extends</code>, above, a \"locater\" can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"processors\"</span>: [<span class=\"hljs-string\">\"stylelint-html-processor\"</span>],\n  <span class=\"hljs-attr\">\"rules\"</span>: {..}\n}</code></pre>\n<p>If your processor has options, make that item an array whose first item is the \"locator\" and second item is the options object.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"processors\"</span>: [\n    <span class=\"hljs-string\">\"stylelint-html-processor\"</span>,\n    [ <span class=\"hljs-string\">\"some-other-processor\"</span>, { <span class=\"hljs-attr\">\"optionOne\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">\"optionTwo\"</span>: <span class=\"hljs-literal\">false</span> } ]\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {..}\n}</code></pre>\n<h3 id=\"ignorefiles\"><a href=\"#ignorefiles\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreFiles</code></h3>\n<p>Provide a glob or array of globs to ignore specific files.</p>\n<p>(An alternative method is to use a <code>.stylelintignore</code> file, described below.)</p>\n<p>If the globs are absolute paths, they are used as is. If they are relative, they are analyzed relative to</p>\n<ul>\n<li><code>configBasedir</code>, if it's provided;</li>\n<li>the config's filepath, if the config is a file that stylelint found a loaded;</li>\n<li>or <code>process.cwd()</code>.</li>\n</ul>\n<p>The <code>ignoreFiles</code> property is stripped from extended configs: only the root-level config can ignore files.</p>\n<h3 id=\"defaultseverity\"><a href=\"#defaultseverity\" class=\"phenomic-HeadingAnchor\">#</a><code>defaultSeverity</code></h3>\n<p>The default severity level for all rules that do not have a severity specified in their secondary options. The available values for <code>severity</code> are:</p>\n<ul>\n<li><code>\"warning\"</code></li>\n<li><code>\"error\"</code></li>\n</ul>\n<h2 id=\"stylelintignore\"><a href=\"#stylelintignore\" class=\"phenomic-HeadingAnchor\">#</a><code>.stylelintignore</code></h2>\n<p>You can use a <code>.stylelintignore</code> file (or point to another ignore patterns file) to ignore specific files.</p>\n<p>(An alternative method is to use a <code>config.ignoreFiles</code>, described above.)</p>\n<p>The patterns in your <code>.stylelintignore</code> file must match <a href=\"https://git-scm.com/docs/gitignore\"><code>.gitignore</code> syntax</a>. (Behind the scenes, <a href=\"https://github.com/kaelzhang/node-ignore\"><code>node-ignore</code></a> parses your patterns.) One implication of this is that <em>your patterns in <code>.stylelintignore</code> are always analyzed relative to <code>process.cwd()</code>.</em></p>\n<p>stylelint will look for a <code>.stylelintignore</code> file in <code>process.cwd()</code>. You can also specify a path to your ignore patterns file (absolute or relative to <code>process.cwd()</code>) using the <code>--ignore-path</code> (in the CLI) and <code>ignorePath</code> (in JS) options.</p>\n","__filename":"user-guide/configuration.md","__url":"/user-guide/configuration/","__resourceUrl":"/user-guide/configuration/index.html","__dataUrl":"/user-guide/configuration/index.html.15b6568d2de5c6b94e5c0b1532d5b805.json"}