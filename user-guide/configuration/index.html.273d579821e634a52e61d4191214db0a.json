{"head":{"title":"Configuration","description":"Configuration The linter expects a configuration object. You can either craft your own config or extend an existing one. Loading theâ€¦"},"body":"<h1 id=\"configuration\"><a href=\"#configuration\" class=\"phenomic-HeadingAnchor\">#</a>Configuration</h1>\n<p>The linter <em>expects a configuration object</em>. You can either craft your own config or extend an existing one.</p>\n<h2 id=\"loading-the-configuration-object\"><a href=\"#loading-the-configuration-object\" class=\"phenomic-HeadingAnchor\">#</a>Loading the configuration object</h2>\n<p>Finding and loading of your configuration object is done with <a href=\"https://github.com/davidtheclark/cosmiconfig\">cosmiconfig</a>. Starting from the current working directory, it will look for the following possible sources, in this order:</p>\n<ul>\n<li>a <code>stylelint</code> property in <code>package.json</code></li>\n<li>a <code>.stylelintrc</code> file</li>\n<li>a <code>stylelint.config.js</code> file exporting a JS object</li>\n</ul>\n<p>The <code>.stylelintrc</code> file (without extension) can be in JSON or YAML format. Alternately, you can add a filename extension to designate JSON, YAML, or JS format: <code>.stylelintrc.json</code>, <code>.stylelintrc.yaml</code>, <code>.stylelintrc.js</code>. You may want to use an extension so that your text editor can better interpret the file, and help with syntax checking and highlighting.</p>\n<p>Once one of these is found and parsed, the search will stop and that object will be used.</p>\n<p>The configuration search can be short-circuited by using either the <code>config</code> or <code>configFile</code> options.</p>\n<h2 id=\"the-configuration-object\"><a href=\"#the-configuration-object\" class=\"phenomic-HeadingAnchor\">#</a>The configuration object</h2>\n<p>The configuration object can have the following properties.</p>\n<h3 id=\"rules\"><a href=\"#rules\" class=\"phenomic-HeadingAnchor\">#</a><code>rules</code></h3>\n<p>Rules determine what the linter looks for and complains about. There are <a href=\"/user-guide/rules/\">over 100</a> built into stylelint. <em>No rules are turned on by default</em>, so this is where you turn on everything you want to check. All the rules must be explicitly configured as <em>there are no default values</em>.</p>\n<p>The <code>rules</code> property is <em>an object whose keys are rule names and values are rule configurations</em>. Each rule configuration fits one of the following formats:</p>\n<ul>\n<li>a single value (the primary option)</li>\n<li>an array with two values (<code>[primary option, secondary options]</code>)</li>\n<li><code>null</code> (to turn the rule off)</li>\n</ul>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"block-no-empty\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">\"color-no-invalid-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n    <span class=\"hljs-attr\">\"indentation\"</span>: [<span class=\"hljs-string\">\"tab\"</span>, {\n      <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>]\n    }],\n    <span class=\"hljs-attr\">\"max-empty-lines\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">\"unit-whitelist\"</span>: [<span class=\"hljs-string\">\"em\"</span>, <span class=\"hljs-string\">\"rem\"</span>, <span class=\"hljs-string\">\"%\"</span>, <span class=\"hljs-string\">\"s\"</span>]\n  }\n}</code></pre>\n<p>Specifying a primary option will turn a rule on.</p>\n<h4 id=\"turning-rules-off-from-within-your-css\"><a href=\"#turning-rules-off-from-within-your-css\" class=\"phenomic-HeadingAnchor\">#</a>Turning rules off from within your CSS</h4>\n<p>Rules can be temporarily turned off by using special comments in your CSS. For example, you can either turn all the rules off:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>Or you can turn off individual rules:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* stylelint-disable selector-no-id, declaration-no-important  */</span>\n<span class=\"hljs-selector-id\">#id</span> {\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>And you can turn off rules for individual lines only, after which you do not need to explicitly re-enable them:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#id</span> { <span class=\"hljs-comment\">/* stylelint-disable-line */</span>\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>; <span class=\"hljs-comment\">/* stylelint-disable-line declaration-no-important */</span>\n}</code></pre>\n<p>Complex, overlapping disabling &amp; enabling patterns are supported:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-enable */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-disable baz */</span>\n<span class=\"hljs-comment\">/* stylelint-enable baz, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span></code></pre>\n<h4 id=\"severities-error--warning\"><a href=\"#severities-error--warning\" class=\"phenomic-HeadingAnchor\">#</a>Severities: error &amp; warning</h4>\n<p>By default, all rules have an <code>&quot;error&quot;</code>-level severity.</p>\n<p>To downgrade any rule use the secondary option <code>severity</code>. The available values for <code>severity</code> are:</p>\n<ul>\n<li><code>&quot;warning&quot;</code></li>\n<li><code>&quot;error&quot;</code></li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// error-level severity examples</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: <span class=\"hljs-number\">2</span> }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>] }\n\n<span class=\"hljs-comment\">// warning-level severity examples</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, { <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span> } ] }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-string\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>],\n    <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  }]\n}</code></pre>\n<p>Different reporters may use these severity levels in different way, e.g. display them differently, or exit the process differently.</p>\n<h4 id=\"custom-messages\"><a href=\"#custom-messages\" class=\"phenomic-HeadingAnchor\">#</a>Custom Messages</h4>\n<p>If you want to deliver a custom message when a rule is violated, you can do so in two ways: provide a <code>message</code> option for the rule, or write a custom formatter.</p>\n<p>All rules accept a <code>message</code> secondary option that, if provided, will be substituted for whatever standard message would be provided. For example, the following rule configuration would substitute in a couple of custom message:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"color-hex-case\"</span>: [ <span class=\"hljs-string\">\"lower\"</span>, {\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"Lowercase letters are easier to distinguish from numbers\"</span>\n  } ],\n  <span class=\"hljs-attr\">\"indentation\"</span>: [ <span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"block\"</span>],\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"Please use 2 spaces for indentation. Tabs make The Architect grumpy.\"</span>,\n    <span class=\"hljs-attr\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  } ]\n}</code></pre>\n<p>Writing a <a href=\"/developer-guide/formatters/\">custom formatter</a> gives you maximum control if you need serious customization.</p>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"phenomic-HeadingAnchor\">#</a><code>extends</code></h3>\n<p>Your configuration can <em>extend</em> an existing configuration (whether your own or a third-party config). When one configuration extends another, it starts with the other&#x27;s properties then adds to and overrides what&#x27;s there.</p>\n<p>You can extend an array of existing configurations, with each item in the array taking precedence over the following (so the first item overrides everything else, the second item overrides everything but the first, the last gets overridden by everything else, etc.).</p>\n<p>For example, extending the <a href=\"https://github.com/stylelint/stylelint-config-standard\"><code>stylelint-config-standard</code></a> and then changing indentation to tabs and turning off the <code>number-leading-zero</code> rule:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>,\n    <span class=\"hljs-attr\">\"number-leading-zero\"</span>: <span class=\"hljs-literal\">null</span>\n  }\n}</code></pre>\n<p>Or starting with <code>stylelint-config-standard</code>, then layering <code>myExtendableConfig</code> on top of that, and then overriding the indentation rule:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: [\n    <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n    <span class=\"hljs-string\">\"./myExtendableConfig\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>\n  }\n}</code></pre>\n<p>The value of <code>&quot;extends&quot;</code> is a &quot;locater&quot; (or an array of &quot;locaters&quot;) that is ultimately <code>require()</code>d, so can fit whatever format works with Node&#x27;s <code>require.resolve()</code> algorithm. That means the a &quot;locater&quot; can be:</p>\n<ul>\n<li>The name of a module in <code>node_modules</code> (e.g. <code>stylelint-config-standard</code>; that module&#x27;s <code>main</code> file must be a valid JSON configuration)</li>\n<li>An absolute path to a file (which makes sense if you&#x27;re creating a JS object in a Node context and passing it in) with a <code>.js</code> or <code>.json</code> extension.</li>\n<li>A relative path to a file with a <code>.js</code> or <code>.json</code> extension, relative to the referencing configuration (e.g. if configA has <code>extends: &quot;../configB&quot;</code>, we&#x27;ll look for <code>configB</code> relative to configA).</li>\n</ul>\n<p><em>Because of <code>extends</code>, you can create and use shareable stylelint configurations.</em> Use the <code>stylelint-config</code> keyword within your <code>package.json</code> if publishing your config to npm.</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"phenomic-HeadingAnchor\">#</a><code>plugins</code></h3>\n<p>Plugins are rules or sets of rules built by the community that support methodologies, toolsets, <em>non-standard</em> CSS features, or very specific use cases.</p>\n<p>To use one, add a <code>&quot;plugins&quot;</code> array to your config, containing &quot;locaters&quot; identifying the plugins you want to use. As with <code>extends</code>, above, a &quot;locater&quot; can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.</p>\n<p>Once the plugin is declared, within your <code>&quot;rules&quot;</code> object <em>you&#x27;ll need to add options</em> for the plugin&#x27;s rule(s), just like any standard rule. You will have to look at the plugin&#x27;s documentation to know what the rule name should be.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../special-rule.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"plugin/special-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  },\n}</code></pre>\n<p>A &quot;plugin&quot; can provide a single rule or a set of rules. If the plugin you use provides a set, just invoke the module in your <code>&quot;plugins&quot;</code> configuration value, and use the rules it provides in <code>&quot;rules&quot;</code>. For example:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../some-rule-set.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"some-rule-set/first-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/second-rule\"</span>: <span class=\"hljs-string\">\"nothing\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/third-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  },\n}</code></pre>\n<h3 id=\"ignorefiles\"><a href=\"#ignorefiles\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreFiles</code></h3>\n<p>Provide a glob or array of globs to ignore specific files.</p>\n<p>If the globs are absolute paths, they are used as is. If they are relative, they are analyzed relative to</p>\n<ul>\n<li><code>configBasedir</code>, if it&#x27;s provided;</li>\n<li>the config&#x27;s filepath, if the config is a file that stylelint found a loaded;</li>\n<li>or <code>process.cwd()</code>.</li>\n</ul>\n<p>The <code>ignoreFiles</code> property is stripped from extended configs: only the root-level config can ignore files.</p>\n<h2 id=\"stylelintignore\"><a href=\"#stylelintignore\" class=\"phenomic-HeadingAnchor\">#</a><code>.stylelintignore</code></h2>\n<p>Like <code>ignoreFiles</code> in the configuration object, you can specify a list of files or patterns that will be ignored.</p>\n<p>You must include only one pattern per line. And the patterns are the same globs as for <code>ignoreFiles</code>, above, analyzed relative to the same location.</p>\n<p>stylelint will check for the <code>.stylelintignore</code> file in the config&#x27;s <code>configBasedir</code> (if it&#x27;s provided), the config&#x27;s own directory, or <code>process.cwd()</code>.</p>\n<p>You can also specify an absolute path for your ignore patterns file using the <code>--ignore-path</code> (in the CLI) and <code>ignorePath</code> (in JS) options.</p>\n","rawBody":"\n# Configuration\n\nThe linter *expects a configuration object*. You can either craft your own config or extend an existing one.\n\n## Loading the configuration object\n\nFinding and loading of your configuration object is done with [cosmiconfig](https://github.com/davidtheclark/cosmiconfig). Starting from the current working directory, it will look for the following possible sources, in this order:\n\n- a `stylelint` property in `package.json`\n- a `.stylelintrc` file\n- a `stylelint.config.js` file exporting a JS object\n\nThe `.stylelintrc` file (without extension) can be in JSON or YAML format. Alternately, you can add a filename extension to designate JSON, YAML, or JS format: `.stylelintrc.json`, `.stylelintrc.yaml`, `.stylelintrc.js`. You may want to use an extension so that your text editor can better interpret the file, and help with syntax checking and highlighting.\n\nOnce one of these is found and parsed, the search will stop and that object will be used.\n\nThe configuration search can be short-circuited by using either the `config` or `configFile` options.\n\n## The configuration object\n\nThe configuration object can have the following properties.\n\n### `rules`\n\nRules determine what the linter looks for and complains about. There are [over 100](/user-guide/rules/) built into stylelint. *No rules are turned on by default*, so this is where you turn on everything you want to check. All the rules must be explicitly configured as *there are no default values*.\n\nThe `rules` property is *an object whose keys are rule names and values are rule configurations*. Each rule configuration fits one of the following formats:\n\n- a single value (the primary option)\n- an array with two values (`[primary option, secondary options]`)\n- `null` (to turn the rule off)\n\n```json\n{\n  \"rules\": {\n    \"block-no-empty\": null,\n    \"color-no-invalid-hex\": true,\n    \"declaration-colon-space-after\": \"always\",\n    \"indentation\": [\"tab\", {\n      \"except\": [\"value\"]\n    }],\n    \"max-empty-lines\": 2,\n    \"unit-whitelist\": [\"em\", \"rem\", \"%\", \"s\"]\n  }\n}\n```\n\nSpecifying a primary option will turn a rule on.\n\n#### Turning rules off from within your CSS\n\nRules can be temporarily turned off by using special comments in your CSS. For example, you can either turn all the rules off:\n\n```css\n/* stylelint-disable */\na {}\n/* stylelint-enable */\n```\n\nOr you can turn off individual rules:\n\n```css\n/* stylelint-disable selector-no-id, declaration-no-important  */\n#id {\n  color: pink !important;\n}\n/* stylelint-enable */\n```\n\nAnd you can turn off rules for individual lines only, after which you do not need to explicitly re-enable them:\n\n```css\n#id { /* stylelint-disable-line */\n  color: pink !important; /* stylelint-disable-line declaration-no-important */\n}\n```\n\nComplex, overlapping disabling & enabling patterns are supported:\n\n```css\n/* stylelint-disable */\n/* stylelint-enable foo */\n/* stylelint-disable foo */\n/* stylelint-enable */\n/* stylelint-disable foo, bar */\n/* stylelint-disable baz */\n/* stylelint-enable baz, bar */\n/* stylelint-enable foo */\n```\n\n#### Severities: error & warning\n\nBy default, all rules have an `\"error\"`-level severity.\n\nTo downgrade any rule use the secondary option `severity`. The available values for `severity` are:\n\n- `\"warning\"`\n- `\"error\"`\n\n```js\n// error-level severity examples\n{ \"indentation\": 2 }\n{ \"indentation\": [2] }\n\n// warning-level severity examples\n{ \"indentation\": [2, { \"severity\": \"warning\" } ] }\n{ \"indentation\": [2, {\n    \"except\": [\"value\"],\n    \"severity\": \"warning\"\n  }]\n}\n```\n\nDifferent reporters may use these severity levels in different way, e.g. display them differently, or exit the process differently.\n\n#### Custom Messages\n\nIf you want to deliver a custom message when a rule is violated, you can do so in two ways: provide a `message` option for the rule, or write a custom formatter.\n\nAll rules accept a `message` secondary option that, if provided, will be substituted for whatever standard message would be provided. For example, the following rule configuration would substitute in a couple of custom message:\n\n```json\n{\n  \"color-hex-case\": [ \"lower\", {\n    \"message\": \"Lowercase letters are easier to distinguish from numbers\"\n  } ],\n  \"indentation\": [ 2, {\n    \"ignore\": [\"block\"],\n    \"message\": \"Please use 2 spaces for indentation. Tabs make The Architect grumpy.\",\n    \"severity\": \"warning\"\n  } ]\n}\n```\n\nWriting a [custom formatter](/developer-guide/formatters/) gives you maximum control if you need serious customization.\n\n### `extends`\n\nYour configuration can *extend* an existing configuration (whether your own or a third-party config). When one configuration extends another, it starts with the other's properties then adds to and overrides what's there.\n\nYou can extend an array of existing configurations, with each item in the array taking precedence over the following (so the first item overrides everything else, the second item overrides everything but the first, the last gets overridden by everything else, etc.).\n\nFor example, extending the [`stylelint-config-standard`](https://github.com/stylelint/stylelint-config-standard) and then changing indentation to tabs and turning off the `number-leading-zero` rule:\n\n```json\n{\n  \"extends\": \"stylelint-config-standard\",\n  \"rules\": {\n    \"indentation\": \"tab\",\n    \"number-leading-zero\": null\n  }\n}\n```\n\nOr starting with `stylelint-config-standard`, then layering `myExtendableConfig` on top of that, and then overriding the indentation rule:\n\n```json\n{\n  \"extends\": [\n    \"stylelint-config-standard\",\n    \"./myExtendableConfig\"\n  ],\n  \"rules\": {\n    \"indentation\": \"tab\"\n  }\n}\n```\n\nThe value of `\"extends\"` is a \"locater\" (or an array of \"locaters\") that is ultimately `require()`d, so can fit whatever format works with Node's `require.resolve()` algorithm. That means the a \"locater\" can be:\n\n- The name of a module in `node_modules` (e.g. `stylelint-config-standard`; that module's `main` file must be a valid JSON configuration)\n- An absolute path to a file (which makes sense if you're creating a JS object in a Node context and passing it in) with a `.js` or `.json` extension.\n- A relative path to a file with a `.js` or `.json` extension, relative to the referencing configuration (e.g. if configA has `extends: \"../configB\"`, we'll look for `configB` relative to configA).\n\n*Because of `extends`, you can create and use shareable stylelint configurations.* Use the `stylelint-config` keyword within your `package.json` if publishing your config to npm.\n\n### `plugins`\n\nPlugins are rules or sets of rules built by the community that support methodologies, toolsets, *non-standard* CSS features, or very specific use cases.\n\nTo use one, add a `\"plugins\"` array to your config, containing \"locaters\" identifying the plugins you want to use. As with `extends`, above, a \"locater\" can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.\n\nOnce the plugin is declared, within your `\"rules\"` object *you'll need to add options* for the plugin's rule(s), just like any standard rule. You will have to look at the plugin's documentation to know what the rule name should be.\n\n```json\n{\n  \"plugins\": [\n    \"../special-rule.js\"\n  ],\n  \"rules\": {\n    \"plugin/special-rule\": \"everything\"\n  },\n}\n```\n\nA \"plugin\" can provide a single rule or a set of rules. If the plugin you use provides a set, just invoke the module in your `\"plugins\"` configuration value, and use the rules it provides in `\"rules\"`. For example:\n\n```json\n{\n  \"plugins\": [\n    \"../some-rule-set.js\"\n  ],\n  \"rules\": {\n    \"some-rule-set/first-rule\": \"everything\",\n    \"some-rule-set/second-rule\": \"nothing\",\n    \"some-rule-set/third-rule\": \"everything\"\n  },\n}\n```\n\n### `ignoreFiles`\n\nProvide a glob or array of globs to ignore specific files.\n\nIf the globs are absolute paths, they are used as is. If they are relative, they are analyzed relative to\n\n- `configBasedir`, if it's provided;\n- the config's filepath, if the config is a file that stylelint found a loaded;\n- or `process.cwd()`.\n\nThe `ignoreFiles` property is stripped from extended configs: only the root-level config can ignore files.\n\n## `.stylelintignore`\n\nLike `ignoreFiles` in the configuration object, you can specify a list of files or patterns that will be ignored.\n\nYou must include only one pattern per line. And the patterns are the same globs as for `ignoreFiles`, above, analyzed relative to the same location.\n\nstylelint will check for the `.stylelintignore` file in the config's `configBasedir` (if it's provided), the config's own directory, or `process.cwd()`.\n\nYou can also specify an absolute path for your ignore patterns file using the `--ignore-path` (in the CLI) and `ignorePath` (in JS) options.\n","raw":"---\ntitle: Configuration\n---\n\n# Configuration\n\nThe linter *expects a configuration object*. You can either craft your own config or extend an existing one.\n\n## Loading the configuration object\n\nFinding and loading of your configuration object is done with [cosmiconfig](https://github.com/davidtheclark/cosmiconfig). Starting from the current working directory, it will look for the following possible sources, in this order:\n\n- a `stylelint` property in `package.json`\n- a `.stylelintrc` file\n- a `stylelint.config.js` file exporting a JS object\n\nThe `.stylelintrc` file (without extension) can be in JSON or YAML format. Alternately, you can add a filename extension to designate JSON, YAML, or JS format: `.stylelintrc.json`, `.stylelintrc.yaml`, `.stylelintrc.js`. You may want to use an extension so that your text editor can better interpret the file, and help with syntax checking and highlighting.\n\nOnce one of these is found and parsed, the search will stop and that object will be used.\n\nThe configuration search can be short-circuited by using either the `config` or `configFile` options.\n\n## The configuration object\n\nThe configuration object can have the following properties.\n\n### `rules`\n\nRules determine what the linter looks for and complains about. There are [over 100](/user-guide/rules/) built into stylelint. *No rules are turned on by default*, so this is where you turn on everything you want to check. All the rules must be explicitly configured as *there are no default values*.\n\nThe `rules` property is *an object whose keys are rule names and values are rule configurations*. Each rule configuration fits one of the following formats:\n\n- a single value (the primary option)\n- an array with two values (`[primary option, secondary options]`)\n- `null` (to turn the rule off)\n\n```json\n{\n  \"rules\": {\n    \"block-no-empty\": null,\n    \"color-no-invalid-hex\": true,\n    \"declaration-colon-space-after\": \"always\",\n    \"indentation\": [\"tab\", {\n      \"except\": [\"value\"]\n    }],\n    \"max-empty-lines\": 2,\n    \"unit-whitelist\": [\"em\", \"rem\", \"%\", \"s\"]\n  }\n}\n```\n\nSpecifying a primary option will turn a rule on.\n\n#### Turning rules off from within your CSS\n\nRules can be temporarily turned off by using special comments in your CSS. For example, you can either turn all the rules off:\n\n```css\n/* stylelint-disable */\na {}\n/* stylelint-enable */\n```\n\nOr you can turn off individual rules:\n\n```css\n/* stylelint-disable selector-no-id, declaration-no-important  */\n#id {\n  color: pink !important;\n}\n/* stylelint-enable */\n```\n\nAnd you can turn off rules for individual lines only, after which you do not need to explicitly re-enable them:\n\n```css\n#id { /* stylelint-disable-line */\n  color: pink !important; /* stylelint-disable-line declaration-no-important */\n}\n```\n\nComplex, overlapping disabling & enabling patterns are supported:\n\n```css\n/* stylelint-disable */\n/* stylelint-enable foo */\n/* stylelint-disable foo */\n/* stylelint-enable */\n/* stylelint-disable foo, bar */\n/* stylelint-disable baz */\n/* stylelint-enable baz, bar */\n/* stylelint-enable foo */\n```\n\n#### Severities: error & warning\n\nBy default, all rules have an `\"error\"`-level severity.\n\nTo downgrade any rule use the secondary option `severity`. The available values for `severity` are:\n\n- `\"warning\"`\n- `\"error\"`\n\n```js\n// error-level severity examples\n{ \"indentation\": 2 }\n{ \"indentation\": [2] }\n\n// warning-level severity examples\n{ \"indentation\": [2, { \"severity\": \"warning\" } ] }\n{ \"indentation\": [2, {\n    \"except\": [\"value\"],\n    \"severity\": \"warning\"\n  }]\n}\n```\n\nDifferent reporters may use these severity levels in different way, e.g. display them differently, or exit the process differently.\n\n#### Custom Messages\n\nIf you want to deliver a custom message when a rule is violated, you can do so in two ways: provide a `message` option for the rule, or write a custom formatter.\n\nAll rules accept a `message` secondary option that, if provided, will be substituted for whatever standard message would be provided. For example, the following rule configuration would substitute in a couple of custom message:\n\n```json\n{\n  \"color-hex-case\": [ \"lower\", {\n    \"message\": \"Lowercase letters are easier to distinguish from numbers\"\n  } ],\n  \"indentation\": [ 2, {\n    \"ignore\": [\"block\"],\n    \"message\": \"Please use 2 spaces for indentation. Tabs make The Architect grumpy.\",\n    \"severity\": \"warning\"\n  } ]\n}\n```\n\nWriting a [custom formatter](/developer-guide/formatters/) gives you maximum control if you need serious customization.\n\n### `extends`\n\nYour configuration can *extend* an existing configuration (whether your own or a third-party config). When one configuration extends another, it starts with the other's properties then adds to and overrides what's there.\n\nYou can extend an array of existing configurations, with each item in the array taking precedence over the following (so the first item overrides everything else, the second item overrides everything but the first, the last gets overridden by everything else, etc.).\n\nFor example, extending the [`stylelint-config-standard`](https://github.com/stylelint/stylelint-config-standard) and then changing indentation to tabs and turning off the `number-leading-zero` rule:\n\n```json\n{\n  \"extends\": \"stylelint-config-standard\",\n  \"rules\": {\n    \"indentation\": \"tab\",\n    \"number-leading-zero\": null\n  }\n}\n```\n\nOr starting with `stylelint-config-standard`, then layering `myExtendableConfig` on top of that, and then overriding the indentation rule:\n\n```json\n{\n  \"extends\": [\n    \"stylelint-config-standard\",\n    \"./myExtendableConfig\"\n  ],\n  \"rules\": {\n    \"indentation\": \"tab\"\n  }\n}\n```\n\nThe value of `\"extends\"` is a \"locater\" (or an array of \"locaters\") that is ultimately `require()`d, so can fit whatever format works with Node's `require.resolve()` algorithm. That means the a \"locater\" can be:\n\n- The name of a module in `node_modules` (e.g. `stylelint-config-standard`; that module's `main` file must be a valid JSON configuration)\n- An absolute path to a file (which makes sense if you're creating a JS object in a Node context and passing it in) with a `.js` or `.json` extension.\n- A relative path to a file with a `.js` or `.json` extension, relative to the referencing configuration (e.g. if configA has `extends: \"../configB\"`, we'll look for `configB` relative to configA).\n\n*Because of `extends`, you can create and use shareable stylelint configurations.* Use the `stylelint-config` keyword within your `package.json` if publishing your config to npm.\n\n### `plugins`\n\nPlugins are rules or sets of rules built by the community that support methodologies, toolsets, *non-standard* CSS features, or very specific use cases.\n\nTo use one, add a `\"plugins\"` array to your config, containing \"locaters\" identifying the plugins you want to use. As with `extends`, above, a \"locater\" can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.\n\nOnce the plugin is declared, within your `\"rules\"` object *you'll need to add options* for the plugin's rule(s), just like any standard rule. You will have to look at the plugin's documentation to know what the rule name should be.\n\n```json\n{\n  \"plugins\": [\n    \"../special-rule.js\"\n  ],\n  \"rules\": {\n    \"plugin/special-rule\": \"everything\"\n  },\n}\n```\n\nA \"plugin\" can provide a single rule or a set of rules. If the plugin you use provides a set, just invoke the module in your `\"plugins\"` configuration value, and use the rules it provides in `\"rules\"`. For example:\n\n```json\n{\n  \"plugins\": [\n    \"../some-rule-set.js\"\n  ],\n  \"rules\": {\n    \"some-rule-set/first-rule\": \"everything\",\n    \"some-rule-set/second-rule\": \"nothing\",\n    \"some-rule-set/third-rule\": \"everything\"\n  },\n}\n```\n\n### `ignoreFiles`\n\nProvide a glob or array of globs to ignore specific files.\n\nIf the globs are absolute paths, they are used as is. If they are relative, they are analyzed relative to\n\n- `configBasedir`, if it's provided;\n- the config's filepath, if the config is a file that stylelint found a loaded;\n- or `process.cwd()`.\n\nThe `ignoreFiles` property is stripped from extended configs: only the root-level config can ignore files.\n\n## `.stylelintignore`\n\nLike `ignoreFiles` in the configuration object, you can specify a list of files or patterns that will be ignored.\n\nYou must include only one pattern per line. And the patterns are the same globs as for `ignoreFiles`, above, analyzed relative to the same location.\n\nstylelint will check for the `.stylelintignore` file in the config's `configBasedir` (if it's provided), the config's own directory, or `process.cwd()`.\n\nYou can also specify an absolute path for your ignore patterns file using the `--ignore-path` (in the CLI) and `ignorePath` (in JS) options.\n","__filename":"user-guide/configuration.md","__url":"/user-guide/configuration/","__resourceUrl":"/user-guide/configuration/index.html","__dataUrl":"/user-guide/configuration/index.html.273d579821e634a52e61d4191214db0a.json"}