{"head":{"description":"CSS processors The linter supports current and future CSS syntax. This includes all standard CSS but also special features that useâ€¦","title":"CSS processors"},"body":"<h1 id=\"css-processors\"><a href=\"#css-processors\" class=\"phenomic-HeadingAnchor\">#</a>CSS processors</h1>\n<p>The linter supports current and future CSS syntax. This includes all standard CSS but also special features that use standard CSS syntactic structures, e.g. special at-rules, special properties, and special functions. Some CSS-<em>like</em> language extensions --   features that use non-standard syntactic structures --   are, as such, supported; however, since there are infinite processing possibilities, the linter cannot support everything.</p>\n<p>You can run the linter before or after your css processors. Depending on which processors you use, each approach has caveats:</p>\n<ol>\n<li><em>Before</em>: Some plugins/processors might enable a syntax that isn't compatible with the linter.</li>\n<li><em>After</em>: Some plugins/processors might generate CSS that is invalid against your linter config, causing warnings that do not correspond to your original stylesheets.</li>\n</ol>\n<p><em>In both cases you can either turn off the incompatible linter rule, or stop using the incompatible plugin/processor.</em> You could also approach plugin/processor authors and request alternate formatting options that will make their plugin/processor compatible with stylelint.</p>\n<h2 id=\"parsing-non-standard-syntax\"><a href=\"#parsing-non-standard-syntax\" class=\"phenomic-HeadingAnchor\">#</a>Parsing non-standard syntax</h2>\n<p>By default, the linter can <em>parse</em> any the following non-standard syntaxes by using special PostCSS parsers:</p>\n<ul>\n<li>SCSS (using <a href=\"https://github.com/postcss/postcss-scss\"><code>postcss-scss</code></a>)</li>\n<li>Less (using <a href=\"https://github.com/webschik/postcss-less\"><code>postcss-less</code></a>)</li>\n<li>SugarSS (using <a href=\"https://github.com/postcss/sugarss\"><code>sugarss</code></a>)</li>\n</ul>\n<p><em>Non-standard syntaxes can automatically be inferred from the following file extensions: <code>.less</code>, <code>.scss</code>, and <code>.sss</code>.</em> If you would need to specify your non-standard syntax, though, both the <a href=\"../cli/\">CLI</a> and the <a href=\"../node-api/\">Node API</a> expose a <code>syntax</code> option.</p>\n<ul>\n<li>If you're using the CLI, use the <code>syntax</code> flag like so:  <code>stylelint ... --syntax scss</code>.</li>\n<li>If you're using the Node API, pass in the <code>syntax</code> option like so: <code>stylelint.lint({ syntax: \"sugarss\", ... })</code>.</li>\n</ul>\n<p>Additionally, stylelint can accept a custom <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS-compatible syntax</a> when using the CLI or Node API. For custom syntaxes, please use the <code>custom-syntax</code> and <code>customSyntax</code> options, respectively.</p>\n<ul>\n<li>If you're using the CLI, use the <code>custom-syntax</code> flag like so:  <code>stylelint ... --custom-syntax custom-syntax-module</code> or <code>stylelint ... --custom-syntax ./path/to/custom-syntax-module</code>.</li>\n<li>If you're using the Node API, pass in the <code>customSyntax</code> option like so: <code>stylelint.lint({ customSyntax: path.join(process.cwd(), './path/to/custom-syntax-module') , ... })</code>.</li>\n</ul>\n<p>If you're using the linter as a <a href=\"../postcss-plugin/\">PostCSS Plugin</a>, you'll need to use the special parser directly with PostCSS's <code>syntax</code> option like so:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> scss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-scss\"</span>)\n<span class=\"hljs-comment\">// or use \"postcss-less\" or \"sugarss\"</span>\n\npostcss([\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"reporter\"</span>)\n])\n  .process(css, {\n    <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"lib/app.css\"</span>,\n    <span class=\"hljs-attr\">syntax</span>: scss\n  })\n})</code></pre>\n","__filename":"user-guide/css-processors.md","__url":"/user-guide/css-processors/","__resourceUrl":"/user-guide/css-processors/index.html","__dataUrl":"/user-guide/css-processors/index.html.d06d6a344f3a1ba0b14c108e0d6acc35.json"}