{"head":{"title":"FAQ","description":"FAQ How do I lint within my text editor? The stylelint community maintains a handful of plugins for popular editors. Refer to theirâ€¦"},"body":"<h1 id=\"faq\"><a href=\"#faq\" class=\"phenomic-HeadingAnchor\">#</a>FAQ</h1>\n<h2 id=\"how-do-i-lint-within-my-text-editor\"><a href=\"#how-do-i-lint-within-my-text-editor\" class=\"phenomic-HeadingAnchor\">#</a>How do I lint within my text editor?</h2>\n<p>The stylelint community maintains a <a href=\"/user-guide/complementary-tools/#editor-plugins\">handful of plugins</a> for popular editors. Refer to their individual READMEs to get started.</p>\n<h2 id=\"how-do-i-lint-from-the-command-line\"><a href=\"#how-do-i-lint-from-the-command-line\" class=\"phenomic-HeadingAnchor\">#</a>How do I lint from the command line?</h2>\n<p>First, install stylelint using the <code>-g</code> option:</p>\n<pre><code class=\"hljs language-shell\">npm install -g stylelint</code></pre>\n<p>Then refer to the <a href=\"/user-guide/cli/\">CLI usage examples</a> within the doc.</p>\n<p>The CLI can also be used from within <a href=\"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\">npm run scripts</a> to use a non-global installation of stylelint.</p>\n<h2 id=\"how-do-i-use-stylelint-with-gulp\"><a href=\"#how-do-i-use-stylelint-with-gulp\" class=\"phenomic-HeadingAnchor\">#</a>How do I use stylelint with gulp?</h2>\n<p>Use <a href=\"https://github.com/olegskl/gulp-stylelint\"><code>gulp-stylelint</code></a>.</p>\n<h2 id=\"how-do-i-lint-using-webpack\"><a href=\"#how-do-i-lint-using-webpack\" class=\"phenomic-HeadingAnchor\">#</a>How do I lint using webpack?</h2>\n<p>Use <a href=\"https://github.com/vieron/stylelint-webpack-plugin\">stylelint-webpack-plugin</a>.</p>\n<h2 id=\"how-do-i-lint-using-other-task-runners-like-grunt\"><a href=\"#how-do-i-lint-using-other-task-runners-like-grunt\" class=\"phenomic-HeadingAnchor\">#</a>How do I lint using other task runners like grunt?</h2>\n<p>If there isn&#x27;t a dedicated stylelint plugin for your task runner of choice, you can use stylelint as a PostCSS plugin and make use of PostCSS&#x27;s <a href=\"https://github.com/postcss/postcss#runners\">numerous</a> task runner plugins.</p>\n<p>There are example of using the PostCSS plugin within the <a href=\"/user-guide/postcss-plugin/\">docs</a>.</p>\n<h2 id=\"how-do-i-lint-scss-less-or-other-non-standard-syntax\"><a href=\"#how-do-i-lint-scss-less-or-other-non-standard-syntax\" class=\"phenomic-HeadingAnchor\">#</a>How do I lint SCSS, Less, or other non-standard syntax?</h2>\n<p>stylelint can <em>parse</em> any the following non-standard syntaxes: SCSS, Less and SugarSS. Refer to the <a href=\"/user-guide/css-processors/#parsing-non-standard-syntax\">docs</a> on how to configure stylelint to parse one of these syntaxes.</p>\n<h2 id=\"how-do-i-automatically-fix-stylistic-warnings\"><a href=\"#how-do-i-automatically-fix-stylistic-warnings\" class=\"phenomic-HeadingAnchor\">#</a>How do I automatically fix stylistic warnings?</h2>\n<p><a href=\"https://github.com/morishitter/stylefmt\">stylefmt</a> supports stylelint configuration files and can automatically fix a number of stylistic warnings.</p>\n<h2 id=\"can-i-use-stylelint-as-a-postcss-plugin\"><a href=\"#can-i-use-stylelint-as-a-postcss-plugin\" class=\"phenomic-HeadingAnchor\">#</a>Can I use stylelint as a PostCSS plugin?</h2>\n<p><a href=\"/user-guide/postcss-plugin/\">Yes, you can</a>, but it limits your reporting options to <a href=\"https://github.com/postcss/postcss-reporter/\">postcss-reporter</a>. We recommend using the CLI or Node API, instead, for better reporting.</p>\n<h2 id=\"should-i-lint-before-or-after-processing-my-stylesheets-through-postcss-plugins-or-other-processors\"><a href=\"#should-i-lint-before-or-after-processing-my-stylesheets-through-postcss-plugins-or-other-processors\" class=\"phenomic-HeadingAnchor\">#</a>Should I lint before or after processing my stylesheets through PostCSS plugins or other processors?</h2>\n<p>We <a href=\"/user-guide/css-processors/\">recommend</a> linting your source files before any transformations.</p>\n<h2 id=\"how-should-i-lint-my-css-that-follows-a-bem-like-methodology\"><a href=\"#how-should-i-lint-my-css-that-follows-a-bem-like-methodology\" class=\"phenomic-HeadingAnchor\">#</a>How should I lint my CSS that follows a BEM-like methodology?</h2>\n<p>You&#x27;ll want to make use of the <a href=\"https://github.com/davidtheclark/stylelint-selector-bem-pattern\"><code>stylelint-selector-bem-pattern</code></a> plugin.</p>\n<p>You can also take advantage of <code>selector-*</code> rules to ban certain categories of selectors (e.g. id selectors) and control specificity.</p>\n<p>If you&#x27;re using SUITCSS, you&#x27;ll probably want to use <a href=\"https://github.com/suitcss/stylelint-config-suitcss\">their shareable config</a>.</p>\n<h2 id=\"how-do-i-manage-conflicts-between-rules\"><a href=\"#how-do-i-manage-conflicts-between-rules\" class=\"phenomic-HeadingAnchor\">#</a>How do I manage conflicts between rules?</h2>\n<p>Each rule stands alone, so sometimes it&#x27;s possible to configure rules such that they conflict with one another. For example, you could configure the <code>string-quotes</code> rule to <code>&quot;single&quot;</code>, but configure <code>font-family-name-quotes</code> to use <code>&quot;double-where-recommended&quot;</code>. Or turn on two conflicting blacklist and whitelist rules e.g. <code>unit-blacklist</code> and <code>unit-whitelist</code>.</p>\n<p>It&#x27;s your responsibility as the configuration author to resolve these conflicts.</p>\n<h2 id=\"what-is-the-difference-between-a-plugin-and-a-rule\"><a href=\"#what-is-the-difference-between-a-plugin-and-a-rule\" class=\"phenomic-HeadingAnchor\">#</a>What is the difference between a plugin and a rule?</h2>\n<p>Rules focus on <em>standard css</em> and aim to be valuable to the majority of users. Whereas plugins are rules built by the community that support methodologies, toolsets, <em>non-standard</em> CSS features, or very specific use cases.</p>\n<h2 id=\"can-i-customise-stylelints-messages\"><a href=\"#can-i-customise-stylelints-messages\" class=\"phenomic-HeadingAnchor\">#</a>Can I customise stylelint&#x27;s messages?</h2>\n<p>Yes, you can either use the <a href=\"/user-guide/configuration/#custom-messages\"><code>message</code> secondary option</a> or <a href=\"/developer-guide/formatters/\">write your own formatter</a>.</p>\n","rawBody":"\n# FAQ\n\n## How do I lint within my text editor?\n\nThe stylelint community maintains a [handful of plugins](/user-guide/complementary-tools/#editor-plugins) for popular editors. Refer to their individual READMEs to get started.\n\n## How do I lint from the command line?\n\nFirst, install stylelint using the `-g` option:\n\n```shell\nnpm install -g stylelint\n```\n\nThen refer to the [CLI usage examples](/user-guide/cli/) within the doc.\n\nThe CLI can also be used from within [npm run scripts](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/) to use a non-global installation of stylelint.\n\n## How do I use stylelint with gulp?\n\nUse [`gulp-stylelint`](https://github.com/olegskl/gulp-stylelint).\n\n## How do I lint using webpack?\n\nUse [stylelint-webpack-plugin](https://github.com/vieron/stylelint-webpack-plugin).\n\n## How do I lint using other task runners like grunt?\n\nIf there isn't a dedicated stylelint plugin for your task runner of choice, you can use stylelint as a PostCSS plugin and make use of PostCSS's [numerous](https://github.com/postcss/postcss#runners) task runner plugins.\n\nThere are example of using the PostCSS plugin within the [docs](/user-guide/postcss-plugin/).\n\n## How do I lint SCSS, Less, or other non-standard syntax?\n\nstylelint can *parse* any the following non-standard syntaxes: SCSS, Less and SugarSS. Refer to the [docs](/user-guide/css-processors/#parsing-non-standard-syntax) on how to configure stylelint to parse one of these syntaxes.\n\n## How do I automatically fix stylistic warnings?\n\n[stylefmt](https://github.com/morishitter/stylefmt) supports stylelint configuration files and can automatically fix a number of stylistic warnings.\n\n## Can I use stylelint as a PostCSS plugin?\n\n[Yes, you can](/user-guide/postcss-plugin/), but it limits your reporting options to [postcss-reporter](https://github.com/postcss/postcss-reporter/). We recommend using the CLI or Node API, instead, for better reporting.\n\n## Should I lint before or after processing my stylesheets through PostCSS plugins or other processors?\n\nWe [recommend](/user-guide/css-processors/) linting your source files before any transformations.\n\n## How should I lint my CSS that follows a BEM-like methodology?\n\nYou'll want to make use of the [`stylelint-selector-bem-pattern`](https://github.com/davidtheclark/stylelint-selector-bem-pattern) plugin.\n\nYou can also take advantage of `selector-*` rules to ban certain categories of selectors (e.g. id selectors) and control specificity.\n\nIf you're using SUITCSS, you'll probably want to use [their shareable config](https://github.com/suitcss/stylelint-config-suitcss).\n\n## How do I manage conflicts between rules?\n\nEach rule stands alone, so sometimes it's possible to configure rules such that they conflict with one another. For example, you could configure the `string-quotes` rule to `\"single\"`, but configure `font-family-name-quotes` to use `\"double-where-recommended\"`. Or turn on two conflicting blacklist and whitelist rules e.g. `unit-blacklist` and `unit-whitelist`.\n\nIt's your responsibility as the configuration author to resolve these conflicts.\n\n## What is the difference between a plugin and a rule?\n\nRules focus on *standard css* and aim to be valuable to the majority of users. Whereas plugins are rules built by the community that support methodologies, toolsets, *non-standard* CSS features, or very specific use cases.\n\n## Can I customise stylelint's messages?\n\nYes, you can either use the [`message` secondary option](/user-guide/configuration/#custom-messages) or [write your own formatter](/developer-guide/formatters/).\n","raw":"---\ntitle: FAQ\n---\n\n# FAQ\n\n## How do I lint within my text editor?\n\nThe stylelint community maintains a [handful of plugins](/user-guide/complementary-tools/#editor-plugins) for popular editors. Refer to their individual READMEs to get started.\n\n## How do I lint from the command line?\n\nFirst, install stylelint using the `-g` option:\n\n```shell\nnpm install -g stylelint\n```\n\nThen refer to the [CLI usage examples](/user-guide/cli/) within the doc.\n\nThe CLI can also be used from within [npm run scripts](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/) to use a non-global installation of stylelint.\n\n## How do I use stylelint with gulp?\n\nUse [`gulp-stylelint`](https://github.com/olegskl/gulp-stylelint).\n\n## How do I lint using webpack?\n\nUse [stylelint-webpack-plugin](https://github.com/vieron/stylelint-webpack-plugin).\n\n## How do I lint using other task runners like grunt?\n\nIf there isn't a dedicated stylelint plugin for your task runner of choice, you can use stylelint as a PostCSS plugin and make use of PostCSS's [numerous](https://github.com/postcss/postcss#runners) task runner plugins.\n\nThere are example of using the PostCSS plugin within the [docs](/user-guide/postcss-plugin/).\n\n## How do I lint SCSS, Less, or other non-standard syntax?\n\nstylelint can *parse* any the following non-standard syntaxes: SCSS, Less and SugarSS. Refer to the [docs](/user-guide/css-processors/#parsing-non-standard-syntax) on how to configure stylelint to parse one of these syntaxes.\n\n## How do I automatically fix stylistic warnings?\n\n[stylefmt](https://github.com/morishitter/stylefmt) supports stylelint configuration files and can automatically fix a number of stylistic warnings.\n\n## Can I use stylelint as a PostCSS plugin?\n\n[Yes, you can](/user-guide/postcss-plugin/), but it limits your reporting options to [postcss-reporter](https://github.com/postcss/postcss-reporter/). We recommend using the CLI or Node API, instead, for better reporting.\n\n## Should I lint before or after processing my stylesheets through PostCSS plugins or other processors?\n\nWe [recommend](/user-guide/css-processors/) linting your source files before any transformations.\n\n## How should I lint my CSS that follows a BEM-like methodology?\n\nYou'll want to make use of the [`stylelint-selector-bem-pattern`](https://github.com/davidtheclark/stylelint-selector-bem-pattern) plugin.\n\nYou can also take advantage of `selector-*` rules to ban certain categories of selectors (e.g. id selectors) and control specificity.\n\nIf you're using SUITCSS, you'll probably want to use [their shareable config](https://github.com/suitcss/stylelint-config-suitcss).\n\n## How do I manage conflicts between rules?\n\nEach rule stands alone, so sometimes it's possible to configure rules such that they conflict with one another. For example, you could configure the `string-quotes` rule to `\"single\"`, but configure `font-family-name-quotes` to use `\"double-where-recommended\"`. Or turn on two conflicting blacklist and whitelist rules e.g. `unit-blacklist` and `unit-whitelist`.\n\nIt's your responsibility as the configuration author to resolve these conflicts.\n\n## What is the difference between a plugin and a rule?\n\nRules focus on *standard css* and aim to be valuable to the majority of users. Whereas plugins are rules built by the community that support methodologies, toolsets, *non-standard* CSS features, or very specific use cases.\n\n## Can I customise stylelint's messages?\n\nYes, you can either use the [`message` secondary option](/user-guide/configuration/#custom-messages) or [write your own formatter](/developer-guide/formatters/).\n","__filename":"user-guide/faq.md","__url":"/user-guide/faq/","__resourceUrl":"/user-guide/faq/index.html","__dataUrl":"/user-guide/faq/index.html.76607b2d4153612616d22bfd6b6320c0.json"}