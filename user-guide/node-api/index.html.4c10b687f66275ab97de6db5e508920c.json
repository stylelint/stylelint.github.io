{"head":{"description":"The stylelint Node.js API The stylelint module includes a lint() function that provides the Node.js API. Installation stylelint is an npmâ€¦","title":"The stylelint Node.js API"},"body":"<h1 id=\"the-stylelint-nodejs-api\"><a href=\"#the-stylelint-nodejs-api\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint Node.js API</h1>\n<p>The stylelint module includes a <code>lint()</code> function that provides the Node.js API.</p>\n<pre><code class=\"hljs language-js\">stylelint.lint(options)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resultObject</span>) </span>{ .. });</code></pre>\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li>\n<p><a href=\"#options\">Options</a></p>\n<ul>\n<li><a href=\"#code\">code</a></li>\n<li><a href=\"#codefilename\">codeFilename</a></li>\n<li><a href=\"#config\">config</a></li>\n<li><a href=\"#configfile\">configFile</a></li>\n<li><a href=\"#configbasedir\">configBasedir</a></li>\n<li><a href=\"#configoverrides\">configOverrides</a></li>\n<li><a href=\"#files\">files</a></li>\n<li><a href=\"#globbyoptions\">globbyOptions</a></li>\n<li><a href=\"#formatter\">formatter</a></li>\n<li><a href=\"#ignoredisables\">ignoreDisables</a></li>\n<li><a href=\"#disabledefaultignores\">disableDefaultIgnores</a></li>\n<li><a href=\"#cache\">cache</a></li>\n<li><a href=\"#cachelocation\">cacheLocation</a></li>\n<li><a href=\"#reportneedlessdisables\">reportNeedlessDisables</a></li>\n<li><a href=\"#maxwarnings\">maxWarnings</a></li>\n<li><a href=\"#ignorepath\">ignorePath</a></li>\n<li><a href=\"#syntax\">syntax</a></li>\n<li><a href=\"#customsyntax\">customSyntax</a></li>\n<li><a href=\"#fix\">fix</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#the-returned-promise\">The returned promise</a></p>\n<ul>\n<li><a href=\"#errored\">errored</a></li>\n<li><a href=\"#output\">output</a></li>\n<li><a href=\"#postcssresults\">postcssResults</a></li>\n<li><a href=\"#results\">results</a></li>\n</ul>\n</li>\n<li><a href=\"#syntax-errors\">Syntax errors</a></li>\n<li><a href=\"#usage-examples\">Usage examples</a></li>\n</ul>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h2>\n<p>stylelint is an <a href=\"https://www.npmjs.com/package/stylelint\">npm package</a>. Install it using:</p>\n<pre><code class=\"hljs language-console\">npm install stylelint</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p>Options is an object with the following properties.</p>\n<p>Though both <code>files</code> and <code>code</code> are \"optional\", you <em>must</em> have one and <em>cannot</em> have both. All other options are optional.</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"phenomic-HeadingAnchor\">#</a><code>code</code></h3>\n<p>A CSS string to be linted.</p>\n<h3 id=\"codefilename\"><a href=\"#codefilename\" class=\"phenomic-HeadingAnchor\">#</a><code>codeFilename</code></h3>\n<p>If using <code>code</code> to pass a source string directly, you can use <code>codeFilename</code> to associate that code with a particular filename.</p>\n<p>This can be useful, for example, when making a text editor plugin that passes in code directly but needs to still use the configuration's <code>ignoreFiles</code> functionality to possibly ignore that code.</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p>A <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>If no <code>config</code> or <code>configFile</code> is passed, stylelint will use a <a href=\".././configuration/#loading-the-configuration-object\">config lookup algorithm</a> to find the correct config.</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>The path to a JSON, YAML, or JS file that contains your <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>It should be either absolute or relative to the directory that your process is running from (<code>process.cwd()</code>). We'd recommend absolute.</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>An absolute path to the directory that relative paths defining <code>extends</code> and <code>plugins</code> are <em>relative to</em>.</p>\n<p>This is only necessary if you passed an object directly through the <code>config</code> property. If you used\n<code>configFile</code>, this option is not necessary.</p>\n<p>If the <code>config</code> object passed uses relative paths, e.g. for <code>extends</code> or <code>plugins</code>, you are going to have to pass a <code>configBasedir</code>. If not, you do not need this.</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>A partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the <code>config</code> option or a <code>.stylelintrc</code> file.</p>\n<p>The difference between the <code>configOverrides</code> and <code>config</code> options is this: If any <code>config</code> object is passed, stylelint does not bother looking for a <code>.stylelintrc</code> file and instead just uses whatever <code>config</code> object you've passed; but if you want to <em>both</em> load a <code>.stylelintrc</code> file <em>and</em> override specific parts of it, <code>configOverrides</code> does just that.</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"phenomic-HeadingAnchor\">#</a><code>files</code></h3>\n<p>A file glob, or array of file globs. Ultimately passed to <a href=\"https://github.com/sindresorhus/globby\">globby</a> to figure out what files you want to lint.</p>\n<p>Relative globs are considered relative to <code>globbyOptions.cwd</code>.</p>\n<p>By default, all <code>node_modules</code> and <code>bower_components</code> are ignored.</p>\n<h3 id=\"globbyoptions\"><a href=\"#globbyoptions\" class=\"phenomic-HeadingAnchor\">#</a><code>globbyOptions</code></h3>\n<p>The options that will be passed with <code>files</code> when use globby.</p>\n<p>For example, you can set a specific <code>cwd</code> manually, which is a folder path of current working directory for <code>files</code> glob. Relative globs in <code>files</code> are considered relative to this path. And by default, <code>cwd</code> will be set by <code>process.cwd()</code>.</p>\n<p>For more detail usage, see <a href=\"https://github.com/sindresorhus/globby#options\">Globby Guide</a>.</p>\n<h3 id=\"formatter\"><a href=\"#formatter\" class=\"phenomic-HeadingAnchor\">#</a><code>formatter</code></h3>\n<p>Options: <code>\"compact\"|\"json\"|\"string\"|\"unix\"|\"verbose\"</code>, or a function. Default is <code>\"json\"</code>.</p>\n<p>Specify the formatter that you would like to use to format your results.</p>\n<p>If you pass a function, it must fit the signature described in the <a href=\"../../developer-guide/formatters/\">Developer Guide</a>.</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>If <code>true</code>, all disable comments (e.g. <code>/* stylelint-disable block-no-empty */</code>) will be ignored.</p>\n<p>You can use this option to see what your linting results would be like without those exceptions.</p>\n<h3 id=\"disabledefaultignores\"><a href=\"#disabledefaultignores\" class=\"phenomic-HeadingAnchor\">#</a><code>disableDefaultIgnores</code></h3>\n<p>If <code>true</code>, stylelint will not automatically ignore the contents of <code>node_modules</code> and <code>bower_components</code>. (By default, these directories are automatically ignored.)</p>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"phenomic-HeadingAnchor\">#</a><code>cache</code></h3>\n<p>Store the info about processed files in order to only operate on the changed ones the next time you run stylelint. Enabling this option can dramatically improve stylelint's speed, because only changed files will be linted.</p>\n<p>By default, the cache is stored in <code>.stylelintcache</code> in <code>process.cwd()</code>. To change this, use the <code>cacheLocation</code> option.</p>\n<p><strong>Note:</strong> If you run stylelint with <code>cache</code> and then run stylelint without <code>cache</code>, the <code>.stylelintcache</code> file will be deleted. This is necessary because we have to assume that <code>.stylelintcache</code> was invalidated by that second command.</p>\n<h3 id=\"cachelocation\"><a href=\"#cachelocation\" class=\"phenomic-HeadingAnchor\">#</a><code>cacheLocation</code></h3>\n<p>A path to a file or directory to be used for <code>cache</code>. Only meaningful alongside <code>cache</code>. If no location is specified, <code>.stylelintcache</code> will be created in <code>process.cwd()</code>.</p>\n<p>If a directory is specified, a cache file will be created inside the specified folder. The name of the file will be based on the hash of <code>process.cwd()</code> (e.g. <code>.cache_hashOfCWD</code>). This allows stylelint to reuse a single location for a variety of caches from different projects.</p>\n<p><strong>Note:</strong> If the directory of <code>cacheLocation</code> does not exist, make sure you add a trailing <code>/</code> on *nix systems or <code>\\</code> on Windows. Otherwise, the path will be assumed to be a file.</p>\n<h3 id=\"reportneedlessdisables\"><a href=\"#reportneedlessdisables\" class=\"phenomic-HeadingAnchor\">#</a><code>reportNeedlessDisables</code></h3>\n<p>If <code>true</code>, <code>ignoreDisables</code> will also be set to <code>true</code> and the returned data will contain a <code>needlessDisables</code> property, whose value is an array of objects, one for each source, with tells you which stylelint-disable comments are not blocking a lint violation.</p>\n<p>Use this report to clean up your codebase, keeping only the stylelint-disable comments that serve a purpose.</p>\n<p><em>The recommended way to use this option is through the CLI.</em> It will output a clean report to the console.</p>\n<h3 id=\"maxwarnings\"><a href=\"#maxwarnings\" class=\"phenomic-HeadingAnchor\">#</a><code>maxWarnings</code></h3>\n<p>Sets a limit to the number of warnings accepted. Will add a <code>maxWarningsExceeded</code> property to the returned data if the number of found warnings exceeds the given limit.\nThe value is an Object (e.g. <code>{ maxWarnings: 0, foundWarnings: 12 }</code>).</p>\n<p><em>The recommended way to use this option is through the CLI.</em> It will exit with code 2 when <code>maxWarnings</code> is exceeded.</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>A path to a file containing patterns describing files to ignore. The path can be absolute or relative to <code>process.cwd()</code>. By default, stylelint looks for <code>.stylelintignore</code> in <code>process.cwd()</code>. See <a href=\"../configuration/#stylelintignore\">Configuration</a>.</p>\n<h3 id=\"syntax\"><a href=\"#syntax\" class=\"phenomic-HeadingAnchor\">#</a><code>syntax</code></h3>\n<p>Options: <code>\"css-in-js\"|\"html\"|\"less\"|\"markdown\"|\"sass\"|\"scss\"|\"sugarss\"</code></p>\n<p>Force a specific non-standard syntax that should be used to parse source stylesheets.</p>\n<p>If you do not specify a syntax, non-standard syntaxes will be automatically inferred.</p>\n<p>See the <a href=\"#customsyntax\"><code>customSyntax</code></a> option below if you would like to use stylelint with a custom syntax.</p>\n<h3 id=\"customsyntax\"><a href=\"#customsyntax\" class=\"phenomic-HeadingAnchor\">#</a><code>customSyntax</code></h3>\n<p>An absolute path to a custom <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS-compatible syntax</a> module.</p>\n<p>Note, however, that stylelint can provide no guarantee that core rules will work with syntaxes other than the defaults listed for the <code>syntax</code> option above.</p>\n<h3 id=\"fix\"><a href=\"#fix\" class=\"phenomic-HeadingAnchor\">#</a><code>fix</code></h3>\n<p>If <code>true</code>, stylelint will fix as many errors as possible. The fixes are made to the actual source files. All unfixed errors will be reported. See <a href=\"../cli/#autofixing-errors\">Autofixing errors</a> docs.</p>\n<h2 id=\"the-returned-promise\"><a href=\"#the-returned-promise\" class=\"phenomic-HeadingAnchor\">#</a>The returned promise</h2>\n<p><code>stylelint.lint()</code> returns a Promise that resolves with an object containing the following properties:</p>\n<h3 id=\"errored\"><a href=\"#errored\" class=\"phenomic-HeadingAnchor\">#</a><code>errored</code></h3>\n<p>Boolean. If <code>true</code>, at least one rule with an \"error\"-level severity registered a violation.</p>\n<h3 id=\"output\"><a href=\"#output\" class=\"phenomic-HeadingAnchor\">#</a><code>output</code></h3>\n<p>A string displaying the formatted violations (using the default formatter or whichever you passed).</p>\n<h3 id=\"postcssresults\"><a href=\"#postcssresults\" class=\"phenomic-HeadingAnchor\">#</a><code>postcssResults</code></h3>\n<p>An array containing all the <a href=\"https://api.postcss.org/LazyResult.html\">PostCSS LazyResults</a> that were accumulated during processing.</p>\n<h3 id=\"results\"><a href=\"#results\" class=\"phenomic-HeadingAnchor\">#</a><code>results</code></h3>\n<p>An array containing all the stylelint result objects (the objects that formatters consume).</p>\n<h2 id=\"syntax-errors\"><a href=\"#syntax-errors\" class=\"phenomic-HeadingAnchor\">#</a>Syntax errors</h2>\n<p><code>stylelint.lint()</code> does not reject the Promise when your CSS contains syntax errors.\nIt resolves with an object (see <a href=\"#the-returned-promise\">The returned promise</a>) that contains information about the syntax error.</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>If <code>myConfig</code> contains no relative paths for <code>extends</code> or <code>plugins</code>, you do not have to use <code>configBasedir</code>:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n})\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-comment\">// do things with data.output, data.errored,</span>\n    <span class=\"hljs-comment\">// and data.results</span>\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-comment\">// do things with err e.g.</span>\n    <span class=\"hljs-built_in\">console</span>.error(err.stack);\n  });</code></pre>\n<p>If <code>myConfig</code> <em>does</em> contain relative paths for <code>extends</code> or <code>plugins</code>, you <em>do</em> have to use <code>configBasedir</code>:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">configBasedir</span>: path.join(__dirname, <span class=\"hljs-string\">\"configs\"</span>),\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use a CSS string instead of a file glob, and you want to use the string formatter instead of the default JSON:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"a { color: pink; }\"</span>,\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"string\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use my own custom formatter function and parse <code>.scss</code> source files:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.scss\"</span>,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stylelintResults</span>) </span>{ .. },\n  <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">\"scss\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>The same pattern can be used to lint Less, SCSS or <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> syntax.</p>\n","__filename":"user-guide/node-api.md","__url":"/user-guide/node-api/","__resourceUrl":"/user-guide/node-api/index.html","__dataUrl":"/user-guide/node-api/index.html.4c10b687f66275ab97de6db5e508920c.json"}