{"head":{"title":"The stylelint Node API","description":"The stylelint Node API The stylelint module includes a lint() function that provides the Node API. Installation stylelint is an npmâ€¦"},"body":"<h1 id=\"the-stylelint-node-api\"><a href=\"#the-stylelint-node-api\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint Node API</h1>\n<p>The stylelint module includes a <code>lint()</code> function that provides the Node API.</p>\n<pre><code class=\"hljs language-js\">stylelint.lint(options)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resultObject</span>) </span>{ .. });</code></pre>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h2>\n<p>stylelint is an <a href=\"https://www.npmjs.com/package/stylelint\">npm package</a>. Install it using:</p>\n<pre><code class=\"hljs language-console\">npm install stylelint</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p>Options is an object with the following properties.</p>\n<p>Though both <code>files</code> and <code>code</code> are &quot;optional&quot;, you <em>must</em> have one and <em>cannot</em> have both. All other options are optional.</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"phenomic-HeadingAnchor\">#</a><code>code</code></h3>\n<p>A CSS string to be linted.</p>\n<h3 id=\"codefilename\"><a href=\"#codefilename\" class=\"phenomic-HeadingAnchor\">#</a><code>codeFilename</code></h3>\n<p>If using <code>code</code> to pass a source string directly, you can use <code>codeFilename</code> to associate that code with a particular filename.</p>\n<p>This can be useful, for example, when making a text editor plugin that passes in code directly but needs to still use the configuration&#x27;s <code>ignoreFiles</code> functionality to possibly ignore that code.</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p>A <a href=\"/user-guide/configuration/\">stylelint configuration object</a>.</p>\n<p>If no <code>config</code> or <code>configFile</code> is passed, stylelint will look for a <code>.stylelintrc</code> configuration file.</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>An absolute path to the directory that relative paths defining <code>extends</code> and <code>plugins</code> are <em>relative to</em>.</p>\n<p>If the <code>config</code> object passed uses relative paths, e.g. for <code>extends</code> or <code>plugins</code>, you are going to have to pass a <code>configBasedir</code>. If not, you do not need this.</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>The path to a JSON, YAML, or JS file  that contains your <a href=\"/user-guide/configuration/\">stylelint configuration object</a>.</p>\n<p>It should be either absolute or relative to the directory that your process is running from (<code>process.cwd()</code>). We&#x27;d recommend absolute.</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>A partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the <code>config</code> option or a <code>.stylelintrc</code> file.</p>\n<p>The difference between the <code>configOverrides</code> and <code>config</code> options is this: If any <code>config</code> object is passed, stylelint does not bother looking for a <code>.stylelintrc</code> file and instead just uses whatever <code>config</code> object you&#x27;ve passed; but if you want to <em>both</em> load a <code>.stylelintrc</code> file <em>and</em> override specific parts of it, <code>configOverrides</code> does just that.</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"phenomic-HeadingAnchor\">#</a><code>files</code></h3>\n<p>A file glob, or array of file globs. Ultimately passed to <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> to figure out what files you want to lint.</p>\n<p><code>node_modules</code> and <code>bower_components</code> are always ignored.</p>\n<h3 id=\"formatter\"><a href=\"#formatter\" class=\"phenomic-HeadingAnchor\">#</a><code>formatter</code></h3>\n<p>Options: <code>&quot;json&quot;|&quot;string&quot;|&quot;verbose&quot;</code>, or a function. Default is <code>&quot;json&quot;</code>.</p>\n<p>Specify the formatter that you would like to use to format your results.</p>\n<p>If you pass a function, it must fit the signature described in the <a href=\"/developer-guide/formatters/\">Developer Guide</a>.</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>If <code>true</code>, all disable comments (e.g. <code>/* stylelint-disable block-no-empty */</code>) will be ignored.</p>\n<p>You can use this option to see what your linting results would be like without those exceptions.</p>\n<h3 id=\"reportneedlessdisables\"><a href=\"#reportneedlessdisables\" class=\"phenomic-HeadingAnchor\">#</a><code>reportNeedlessDisables</code></h3>\n<p>If <code>true</code>, <code>ignoreDisables</code> will also be set to <code>true</code> and the returned data will contain a <code>needlessDisables</code> property, whose value is an array of objects, one for each source, with tells you which stylelint-disable comments are not blocking a lint warning.</p>\n<p>Use this report to clean up your codebase, keeping only the stylelint-disable comments that serve a purpose.</p>\n<p><em>The recommended way to use this option is through the CLI.</em> It will output a clean report to the console.</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>A path to a file containing patterns describing files to ignore. The path can be absolute or relative to <code>process.cwd()</code>. By default, stylelint looks for <code>.stylelintignore</code> in <code>process.cwd()</code>. See <a href=\"/user-guide/configuration/#stylelintignore\">Configuration</a>.</p>\n<h3 id=\"syntax\"><a href=\"#syntax\" class=\"phenomic-HeadingAnchor\">#</a><code>syntax</code></h3>\n<p>Options: <code>&quot;scss&quot;|&quot;less&quot;|&quot;sugarss&quot;</code>.</p>\n<p>Specify a non-standard syntax that should be used to parse source stylesheets.</p>\n<p>If you do not specify a syntax, non-standard syntaxes will be automatically inferred by the file extensions <code>.scss</code>, <code>.less</code>, and <code>.sss</code>.</p>\n<h2 id=\"the-returned-promise\"><a href=\"#the-returned-promise\" class=\"phenomic-HeadingAnchor\">#</a>The returned promise</h2>\n<p><code>stylelint.lint()</code> returns a Promise that resolves with an object containing the following properties:</p>\n<h3 id=\"errored\"><a href=\"#errored\" class=\"phenomic-HeadingAnchor\">#</a><code>errored</code></h3>\n<p>Boolean. If <code>true</code>, at least one rule with an &quot;error&quot;-level severity registered a warning.</p>\n<h3 id=\"output\"><a href=\"#output\" class=\"phenomic-HeadingAnchor\">#</a><code>output</code></h3>\n<p>A string displaying the formatted warnings (using the default formatter or whichever you passed).</p>\n<h3 id=\"postcssresults\"><a href=\"#postcssresults\" class=\"phenomic-HeadingAnchor\">#</a><code>postcssResults</code></h3>\n<p>An array containing all the <a href=\"https://github.com/postcss/postcss/blob/master/api/#lazyresult-class\">PostCSS LazyResults</a> that were accumulated during processing.</p>\n<h3 id=\"results\"><a href=\"#results\" class=\"phenomic-HeadingAnchor\">#</a><code>results</code></h3>\n<p>An array containing all the stylelint result objects (the objects that formatters consume).</p>\n<h2 id=\"syntax-errors\"><a href=\"#syntax-errors\" class=\"phenomic-HeadingAnchor\">#</a>Syntax errors</h2>\n<p><code>stylelint.lint()</code> does not reject the Promise when your CSS contains syntax errors.\nIt resolves with an object (see <a href=\"#the-returned-promise\">The returned promise</a>) that contains information about the syntax error.</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>If <code>myConfig</code> contains no relative paths for <code>extends</code> or <code>plugins</code>, you do not have to use <code>configBasedir</code>:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n})\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-comment\">// do things with data.output, data.errored,</span>\n    <span class=\"hljs-comment\">// and data.results</span>\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-comment\">// do things with err e.g.</span>\n    <span class=\"hljs-built_in\">console</span>.error(err.stack);\n  });;</code></pre>\n<p>If <code>myConfig</code> <em>does</em> contain relative paths for <code>extends</code> or <code>plugins</code>, you <em>do</em> have to use <code>configBasedir</code>:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">configBasedir</span>: path.join(__dirname, <span class=\"hljs-string\">\"configs\"</span>),\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use a CSS string instead of a file glob, and you want to use the string formatter instead of the default JSON:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"a { color: pink; }\"</span>,\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"string\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use my own custom formatter function and parse <code>.scss</code> source files:</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.scss\"</span>,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stylelintResults</span>) </span>{ .. },\n  <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">\"scss\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>The same pattern can be used to read Less or <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> syntax.</p>\n","rawBody":"\n# The stylelint Node API\n\nThe stylelint module includes a `lint()` function that provides the Node API.\n\n```js\nstylelint.lint(options)\n  .then(function(resultObject) { .. });\n```\n\n## Installation\n\nstylelint is an [npm package](https://www.npmjs.com/package/stylelint). Install it using:\n\n```console\nnpm install stylelint\n```\n\n## Options\n\nOptions is an object with the following properties.\n\nThough both `files` and `code` are \"optional\", you *must* have one and *cannot* have both. All other options are optional.\n\n### `code`\n\nA CSS string to be linted.\n\n### `codeFilename`\n\nIf using `code` to pass a source string directly, you can use `codeFilename` to associate that code with a particular filename.\n\nThis can be useful, for example, when making a text editor plugin that passes in code directly but needs to still use the configuration's `ignoreFiles` functionality to possibly ignore that code.\n\n### `config`\n\nA [stylelint configuration object](/user-guide/configuration/).\n\nIf no `config` or `configFile` is passed, stylelint will look for a `.stylelintrc` configuration file.\n\n### `configBasedir`\n\nAn absolute path to the directory that relative paths defining `extends` and `plugins` are *relative to*.\n\nIf the `config` object passed uses relative paths, e.g. for `extends` or `plugins`, you are going to have to pass a `configBasedir`. If not, you do not need this.\n\n### `configFile`\n\nThe path to a JSON, YAML, or JS file  that contains your [stylelint configuration object](/user-guide/configuration/).\n\nIt should be either absolute or relative to the directory that your process is running from (`process.cwd()`). We'd recommend absolute.\n\n### `configOverrides`\n\nA partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the `config` option or a `.stylelintrc` file.\n\nThe difference between the `configOverrides` and `config` options is this: If any `config` object is passed, stylelint does not bother looking for a `.stylelintrc` file and instead just uses whatever `config` object you've passed; but if you want to *both* load a `.stylelintrc` file *and* override specific parts of it, `configOverrides` does just that.\n\n### `files`\n\nA file glob, or array of file globs. Ultimately passed to [node-glob](https://github.com/isaacs/node-glob) to figure out what files you want to lint.\n\n`node_modules` and `bower_components` are always ignored.\n\n### `formatter`\n\nOptions: `\"json\"|\"string\"|\"verbose\"`, or a function. Default is `\"json\"`.\n\nSpecify the formatter that you would like to use to format your results.\n\nIf you pass a function, it must fit the signature described in the [Developer Guide](/developer-guide/formatters/).\n\n### `ignoreDisables`\n\nIf `true`, all disable comments (e.g. `/* stylelint-disable block-no-empty */`) will be ignored.\n\nYou can use this option to see what your linting results would be like without those exceptions.\n\n### `reportNeedlessDisables`\n\nIf `true`, `ignoreDisables` will also be set to `true` and the returned data will contain a `needlessDisables` property, whose value is an array of objects, one for each source, with tells you which stylelint-disable comments are not blocking a lint warning.\n\nUse this report to clean up your codebase, keeping only the stylelint-disable comments that serve a purpose.\n\n*The recommended way to use this option is through the CLI.* It will output a clean report to the console.\n\n### `ignorePath`\n\nA path to a file containing patterns describing files to ignore. The path can be absolute or relative to `process.cwd()`. By default, stylelint looks for `.stylelintignore` in `process.cwd()`. See [Configuration](/user-guide/configuration/#stylelintignore).\n\n### `syntax`\n\nOptions: `\"scss\"|\"less\"|\"sugarss\"`.\n\nSpecify a non-standard syntax that should be used to parse source stylesheets.\n\nIf you do not specify a syntax, non-standard syntaxes will be automatically inferred by the file extensions `.scss`, `.less`, and `.sss`.\n\n## The returned promise\n\n`stylelint.lint()` returns a Promise that resolves with an object containing the following properties:\n\n### `errored`\n\nBoolean. If `true`, at least one rule with an \"error\"-level severity registered a warning.\n\n### `output`\n\nA string displaying the formatted warnings (using the default formatter or whichever you passed).\n\n### `postcssResults`\n\nAn array containing all the [PostCSS LazyResults](https://github.com/postcss/postcss/blob/master/api/#lazyresult-class) that were accumulated during processing.\n\n### `results`\n\nAn array containing all the stylelint result objects (the objects that formatters consume).\n\n## Syntax errors\n\n`stylelint.lint()` does not reject the Promise when your CSS contains syntax errors.\nIt resolves with an object (see [The returned promise](#the-returned-promise)) that contains information about the syntax error.\n\n## Usage examples\n\nIf `myConfig` contains no relative paths for `extends` or `plugins`, you do not have to use `configBasedir`:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  files: \"all/my/stylesheets/*.css\"\n})\n  .then(function(data) {\n    // do things with data.output, data.errored,\n    // and data.results\n  })\n  .catch(function(err) {\n    // do things with err e.g.\n    console.error(err.stack);\n  });;\n```\n\nIf `myConfig` *does* contain relative paths for `extends` or `plugins`, you *do* have to use `configBasedir`:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  configBasedir: path.join(__dirname, \"configs\"),\n  files: \"all/my/stylesheets/*.css\"\n}).then(function() { .. });\n```\n\nMaybe you want to use a CSS string instead of a file glob, and you want to use the string formatter instead of the default JSON:\n\n```js\nstylelint.lint({\n  code: \"a { color: pink; }\",\n  config: myConfig,\n  formatter: \"string\"\n}).then(function() { .. });\n```\n\nMaybe you want to use my own custom formatter function and parse `.scss` source files:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  files: \"all/my/stylesheets/*.scss\",\n  formatter: function(stylelintResults) { .. },\n  syntax: \"scss\"\n}).then(function() { .. });\n```\n\nThe same pattern can be used to read Less or [SugarSS](https://github.com/postcss/sugarss) syntax.\n","raw":"---\ntitle: The stylelint Node API\n---\n\n# The stylelint Node API\n\nThe stylelint module includes a `lint()` function that provides the Node API.\n\n```js\nstylelint.lint(options)\n  .then(function(resultObject) { .. });\n```\n\n## Installation\n\nstylelint is an [npm package](https://www.npmjs.com/package/stylelint). Install it using:\n\n```console\nnpm install stylelint\n```\n\n## Options\n\nOptions is an object with the following properties.\n\nThough both `files` and `code` are \"optional\", you *must* have one and *cannot* have both. All other options are optional.\n\n### `code`\n\nA CSS string to be linted.\n\n### `codeFilename`\n\nIf using `code` to pass a source string directly, you can use `codeFilename` to associate that code with a particular filename.\n\nThis can be useful, for example, when making a text editor plugin that passes in code directly but needs to still use the configuration's `ignoreFiles` functionality to possibly ignore that code.\n\n### `config`\n\nA [stylelint configuration object](/user-guide/configuration/).\n\nIf no `config` or `configFile` is passed, stylelint will look for a `.stylelintrc` configuration file.\n\n### `configBasedir`\n\nAn absolute path to the directory that relative paths defining `extends` and `plugins` are *relative to*.\n\nIf the `config` object passed uses relative paths, e.g. for `extends` or `plugins`, you are going to have to pass a `configBasedir`. If not, you do not need this.\n\n### `configFile`\n\nThe path to a JSON, YAML, or JS file  that contains your [stylelint configuration object](/user-guide/configuration/).\n\nIt should be either absolute or relative to the directory that your process is running from (`process.cwd()`). We'd recommend absolute.\n\n### `configOverrides`\n\nA partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the `config` option or a `.stylelintrc` file.\n\nThe difference between the `configOverrides` and `config` options is this: If any `config` object is passed, stylelint does not bother looking for a `.stylelintrc` file and instead just uses whatever `config` object you've passed; but if you want to *both* load a `.stylelintrc` file *and* override specific parts of it, `configOverrides` does just that.\n\n### `files`\n\nA file glob, or array of file globs. Ultimately passed to [node-glob](https://github.com/isaacs/node-glob) to figure out what files you want to lint.\n\n`node_modules` and `bower_components` are always ignored.\n\n### `formatter`\n\nOptions: `\"json\"|\"string\"|\"verbose\"`, or a function. Default is `\"json\"`.\n\nSpecify the formatter that you would like to use to format your results.\n\nIf you pass a function, it must fit the signature described in the [Developer Guide](/developer-guide/formatters/).\n\n### `ignoreDisables`\n\nIf `true`, all disable comments (e.g. `/* stylelint-disable block-no-empty */`) will be ignored.\n\nYou can use this option to see what your linting results would be like without those exceptions.\n\n### `reportNeedlessDisables`\n\nIf `true`, `ignoreDisables` will also be set to `true` and the returned data will contain a `needlessDisables` property, whose value is an array of objects, one for each source, with tells you which stylelint-disable comments are not blocking a lint warning.\n\nUse this report to clean up your codebase, keeping only the stylelint-disable comments that serve a purpose.\n\n*The recommended way to use this option is through the CLI.* It will output a clean report to the console.\n\n### `ignorePath`\n\nA path to a file containing patterns describing files to ignore. The path can be absolute or relative to `process.cwd()`. By default, stylelint looks for `.stylelintignore` in `process.cwd()`. See [Configuration](/user-guide/configuration/#stylelintignore).\n\n### `syntax`\n\nOptions: `\"scss\"|\"less\"|\"sugarss\"`.\n\nSpecify a non-standard syntax that should be used to parse source stylesheets.\n\nIf you do not specify a syntax, non-standard syntaxes will be automatically inferred by the file extensions `.scss`, `.less`, and `.sss`.\n\n## The returned promise\n\n`stylelint.lint()` returns a Promise that resolves with an object containing the following properties:\n\n### `errored`\n\nBoolean. If `true`, at least one rule with an \"error\"-level severity registered a warning.\n\n### `output`\n\nA string displaying the formatted warnings (using the default formatter or whichever you passed).\n\n### `postcssResults`\n\nAn array containing all the [PostCSS LazyResults](https://github.com/postcss/postcss/blob/master/api/#lazyresult-class) that were accumulated during processing.\n\n### `results`\n\nAn array containing all the stylelint result objects (the objects that formatters consume).\n\n## Syntax errors\n\n`stylelint.lint()` does not reject the Promise when your CSS contains syntax errors.\nIt resolves with an object (see [The returned promise](#the-returned-promise)) that contains information about the syntax error.\n\n## Usage examples\n\nIf `myConfig` contains no relative paths for `extends` or `plugins`, you do not have to use `configBasedir`:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  files: \"all/my/stylesheets/*.css\"\n})\n  .then(function(data) {\n    // do things with data.output, data.errored,\n    // and data.results\n  })\n  .catch(function(err) {\n    // do things with err e.g.\n    console.error(err.stack);\n  });;\n```\n\nIf `myConfig` *does* contain relative paths for `extends` or `plugins`, you *do* have to use `configBasedir`:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  configBasedir: path.join(__dirname, \"configs\"),\n  files: \"all/my/stylesheets/*.css\"\n}).then(function() { .. });\n```\n\nMaybe you want to use a CSS string instead of a file glob, and you want to use the string formatter instead of the default JSON:\n\n```js\nstylelint.lint({\n  code: \"a { color: pink; }\",\n  config: myConfig,\n  formatter: \"string\"\n}).then(function() { .. });\n```\n\nMaybe you want to use my own custom formatter function and parse `.scss` source files:\n\n```js\nstylelint.lint({\n  config: myConfig,\n  files: \"all/my/stylesheets/*.scss\",\n  formatter: function(stylelintResults) { .. },\n  syntax: \"scss\"\n}).then(function() { .. });\n```\n\nThe same pattern can be used to read Less or [SugarSS](https://github.com/postcss/sugarss) syntax.\n","__filename":"user-guide/node-api.md","__url":"/user-guide/node-api/","__resourceUrl":"/user-guide/node-api/index.html","__dataUrl":"/user-guide/node-api/index.html.a57182293782b69f2708583127681aa3.json"}