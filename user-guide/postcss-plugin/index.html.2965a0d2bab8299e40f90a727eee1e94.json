{"head":{"title":"The stylelint PostCSS Plugin","description":"The stylelint PostCSS Plugin\n\nAs with any other PostCSS plugin, you can use stylelint's PostCSS plugin either with a PostCSS runner -- suchâ€¦"},"body":"<h1 id=\"the-stylelint-postcss-plugin\"><a href=\"#the-stylelint-postcss-plugin\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint PostCSS Plugin</h1>\n<p>As with any other <a href=\"https://github.com/postcss/postcss#plugins\">PostCSS plugin</a>, you can use stylelint&#x27;s PostCSS plugin either with a PostCSS runner -- such as <a href=\"https://github.com/postcss/gulp-postcss\"><code>gulp-postcss</code></a>, <a href=\"https://github.com/nDmitry/grunt-postcss\"><code>grunt-postcss</code></a> and <a href=\"https://github.com/postcss/postcss-loader\"><code>postcss-loader</code></a> -- or with the PostCSS JS API directly.</p>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p>The plugin accepts an options object as argument, with the following properties:</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p>A <a href=\"/user-guide/configuration/\">stylelint configuration object</a>.</p>\n<p>If no <code>config</code> is passed, stylelint will look for a <code>.stylelintrc</code> configuration file.</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>The path to a JSON, YAML, or JS file  that contains your <a href=\"/user-guide/configuration/\">stylelint configuration object</a>.</p>\n<p>It should be either absolute or relative to the directory that your process is running from (<code>process.cwd()</code>). We&#x27;d recommend absolute.</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>An absolute path to the directory that relative paths defining <code>extends</code> and <code>plugins</code> are <em>relative to</em>.</p>\n<p>This is only necessary if you passed an object directly through the <code>config</code> property. If you used\n<code>configFile</code>, this option is not necessary.</p>\n<p>If the <code>config</code> object passed uses relative paths for <code>extends</code> or <code>plugins</code>, you are going to have to pass a <code>configBasedir</code>. If not, you do not need this.</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>A partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the <code>config</code> option or a <code>.stylelintrc</code> file.</p>\n<p>The difference between the <code>configOverrides</code> and <code>config</code> options is this: If any <code>config</code> object is passed, stylelint does not bother looking for a <code>.stylelintrc</code> file and instead just uses whatever <code>config</code> object you&#x27;ve passed; but if you want to <em>both</em> load a <code>.stylelintrc</code> file <em>and</em> override specific parts of it, <code>configOverrides</code> does just that.</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>We recommend you lint your CSS before applying any transformations. You can do this by either placing stylelint at the beginning of your plugin pipeline, using a plugin like <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> or <a href=\"https://github.com/TrySound/postcss-easy-import\"><code>postcss-easy-import</code></a> to lint the your files before any transformations, or by creating a separate lint process that is independent of your build one.</p>\n<p>You&#x27;ll also need to use a reporter. <em>The stylelint plugin registers warnings via PostCSS</em>. Therefore, you&#x27;ll want to use it with a PostCSS runner that prints warnings (e.g. <a href=\"https://github.com/postcss/gulp-postcss\"><code>gulp-postcss</code></a>) or another PostCSS plugin whose purpose is to format and print warnings (e.g. <a href=\"https://github.com/postcss/postcss-reporter\"><code>postcss-reporter</code></a>).</p>\n<h3 id=\"example-a\"><a href=\"#example-a\" class=\"phenomic-HeadingAnchor\">#</a>Example A</h3>\n<p>Using the plugin with <a href=\"https://github.com/postcss/gulp-postcss\"><code>gulp-postcss</code></a>, and as a separate lint task:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> reporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\ngulp.task(<span class=\"hljs-string\">\"lint:css\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">\"src/**/*.css\"</span>)\n    .pipe(postcss([\n      stylelint({ <span class=\"hljs-comment\">/* your options */</span> }),\n      reporter({ clearMessages: <span class=\"hljs-literal\">true</span> }),\n    ]))\n})</code></pre>\n<h3 id=\"example-b\"><a href=\"#example-b\" class=\"phenomic-HeadingAnchor\">#</a>Example B</h3>\n<p>Using the plugin within <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> or <a href=\"https://github.com/TrySound/postcss-easy-import\"><code>postcss-easy-import</code></a>, as part of the build task:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> easyImport = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-easy-import\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> reporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\ngulp.task(<span class=\"hljs-string\">\"build:css\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">\"src/main.css\"</span>)\n    .pipe(postcss([\n      stylelint({ <span class=\"hljs-comment\">/* your options */</span> })\n      easyImport({\n        plugins: [\n          stylelint({ <span class=\"hljs-comment\">/* your options */</span> })\n        ]\n      })\n      <span class=\"hljs-comment\">/* other plugins... */</span>\n      reporter({ clearMessages: <span class=\"hljs-literal\">true</span> })\n    ]))\n})</code></pre>\n<h3 id=\"example-c\"><a href=\"#example-c\" class=\"phenomic-HeadingAnchor\">#</a>Example C</h3>\n<p>Using the plugin with <a href=\"https://github.com/postcss/gulp-postcss\"><code>gulp-postcss</code></a> and <a href=\"https://github.com/webschik/postcss-less\"><code>postcss-less</code></a> to lint Less, and as part of the build task:</p>\n<p><em>Note: the stylelint PostCSS plugin, unlike the stylelint CLI and node API, doesn&#x27;t have a <code>syntax</code> option. Instead, the syntax must be set within the <a href=\"https://github.com/postcss/postcss#options\">PostCSS options</a> as there can only be one parser/syntax in a pipeline.</em></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> reporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)\n<span class=\"hljs-keyword\">var</span> less = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-less\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\ngulp.task(<span class=\"hljs-string\">\"build:less\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">\"src/**/*.less\"</span>)\n    .pipe(postcss([\n      stylelint({ <span class=\"hljs-comment\">/* your options */</span> }),\n      <span class=\"hljs-comment\">/* other plugins... */</span>\n      reporter({ clearMessages: <span class=\"hljs-literal\">true</span> }),\n    ], {\n      syntax: less\n    }))\n})</code></pre>\n<p>The same pattern can be used to read SCSS or <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> syntax.</p>\n<h3 id=\"example-d\"><a href=\"#example-d\" class=\"phenomic-HeadingAnchor\">#</a>Example D</h3>\n<p>Using the plugin with the PostCSS JS API:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> reporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\n<span class=\"hljs-comment\">// CSS to be processed</span>\n<span class=\"hljs-keyword\">var</span> css = fs.readFileSync(<span class=\"hljs-string\">\"input.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n\npostcss([\n  stylelint({ <span class=\"hljs-comment\">/* your options */</span> }),\n  reporter({ clearMessages: <span class=\"hljs-literal\">true</span> }),\n])\n  .process(css, { <span class=\"hljs-keyword\">from</span>: <span class=\"hljs-string\">\"input.css\"</span> })\n  .then()\n  .catch(err =&gt; <span class=\"hljs-built_in\">console</span>.error(err.stack))</code></pre>\n<h2 id=\"postcss-version-compatibility\"><a href=\"#postcss-version-compatibility\" class=\"phenomic-HeadingAnchor\">#</a>PostCSS version compatibility</h2>\n<ul>\n<li>Versions <code>1.0.0+</code> of the linter are compatible with PostCSS <code>5.0.2+</code>.</li>\n<li>Versions <code>0.8.0 and below</code> of the linter are compatible with PostCSS <code>4.x</code>.</li>\n</ul>\n","rawBody":"\n# The stylelint PostCSS Plugin\n\nAs with any other [PostCSS plugin](https://github.com/postcss/postcss#plugins), you can use stylelint's PostCSS plugin either with a PostCSS runner -- such as [`gulp-postcss`](https://github.com/postcss/gulp-postcss), [`grunt-postcss`](https://github.com/nDmitry/grunt-postcss) and [`postcss-loader`](https://github.com/postcss/postcss-loader) -- or with the PostCSS JS API directly.\n\n## Options\n\nThe plugin accepts an options object as argument, with the following properties:\n\n### `config`\n\nA [stylelint configuration object](/user-guide/configuration/).\n\nIf no `config` is passed, stylelint will look for a `.stylelintrc` configuration file.\n\n### `configFile`\n\nThe path to a JSON, YAML, or JS file  that contains your [stylelint configuration object](/user-guide/configuration/).\n\nIt should be either absolute or relative to the directory that your process is running from (`process.cwd()`). We'd recommend absolute.\n\n### `configBasedir`\n\nAn absolute path to the directory that relative paths defining `extends` and `plugins` are *relative to*.\n\nThis is only necessary if you passed an object directly through the `config` property. If you used\n`configFile`, this option is not necessary.\n\nIf the `config` object passed uses relative paths for `extends` or `plugins`, you are going to have to pass a `configBasedir`. If not, you do not need this.\n\n### `configOverrides`\n\nA partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the `config` option or a `.stylelintrc` file.\n\nThe difference between the `configOverrides` and `config` options is this: If any `config` object is passed, stylelint does not bother looking for a `.stylelintrc` file and instead just uses whatever `config` object you've passed; but if you want to *both* load a `.stylelintrc` file *and* override specific parts of it, `configOverrides` does just that.\n\n## Usage examples\n\nWe recommend you lint your CSS before applying any transformations. You can do this by either placing stylelint at the beginning of your plugin pipeline, using a plugin like [`postcss-import`](https://github.com/postcss/postcss-import) or [`postcss-easy-import`](https://github.com/TrySound/postcss-easy-import) to lint the your files before any transformations, or by creating a separate lint process that is independent of your build one.\n\nYou'll also need to use a reporter. *The stylelint plugin registers warnings via PostCSS*. Therefore, you'll want to use it with a PostCSS runner that prints warnings (e.g. [`gulp-postcss`](https://github.com/postcss/gulp-postcss)) or another PostCSS plugin whose purpose is to format and print warnings (e.g. [`postcss-reporter`](https://github.com/postcss/postcss-reporter)).\n\n### Example A\n\nUsing the plugin with [`gulp-postcss`](https://github.com/postcss/gulp-postcss), and as a separate lint task:\n\n```js\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"lint:css\", function () {\n  return gulp.src(\"src/**/*.css\")\n    .pipe(postcss([\n      stylelint({ /* your options */ }),\n      reporter({ clearMessages: true }),\n    ]))\n})\n```\n\n### Example B\n\nUsing the plugin within [`postcss-import`](https://github.com/postcss/postcss-import) or [`postcss-easy-import`](https://github.com/TrySound/postcss-easy-import), as part of the build task:\n\n```js\nvar easyImport = require(\"postcss-easy-import\")\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"build:css\", function () {\n  return gulp.src(\"src/main.css\")\n    .pipe(postcss([\n      stylelint({ /* your options */ })\n      easyImport({\n        plugins: [\n          stylelint({ /* your options */ })\n        ]\n      })\n      /* other plugins... */\n      reporter({ clearMessages: true })\n    ]))\n})\n```\n\n### Example C\n\nUsing the plugin with [`gulp-postcss`](https://github.com/postcss/gulp-postcss) and [`postcss-less`](https://github.com/webschik/postcss-less) to lint Less, and as part of the build task:\n\n*Note: the stylelint PostCSS plugin, unlike the stylelint CLI and node API, doesn't have a `syntax` option. Instead, the syntax must be set within the [PostCSS options](https://github.com/postcss/postcss#options) as there can only be one parser/syntax in a pipeline.*\n\n```js\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar less = require(\"postcss-less\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"build:less\", function () {\n  return gulp.src(\"src/**/*.less\")\n    .pipe(postcss([\n      stylelint({ /* your options */ }),\n      /* other plugins... */\n      reporter({ clearMessages: true }),\n    ], {\n      syntax: less\n    }))\n})\n```\n\nThe same pattern can be used to read SCSS or [SugarSS](https://github.com/postcss/sugarss) syntax.\n\n### Example D\n\nUsing the plugin with the PostCSS JS API:\n\n```js\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\n// CSS to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\npostcss([\n  stylelint({ /* your options */ }),\n  reporter({ clearMessages: true }),\n])\n  .process(css, { from: \"input.css\" })\n  .then()\n  .catch(err => console.error(err.stack))\n```\n\n## PostCSS version compatibility\n\n- Versions `1.0.0+` of the linter are compatible with PostCSS `5.0.2+`.\n- Versions `0.8.0 and below` of the linter are compatible with PostCSS `4.x`.\n","raw":"---\ntitle: The stylelint PostCSS Plugin\n---\n\n# The stylelint PostCSS Plugin\n\nAs with any other [PostCSS plugin](https://github.com/postcss/postcss#plugins), you can use stylelint's PostCSS plugin either with a PostCSS runner -- such as [`gulp-postcss`](https://github.com/postcss/gulp-postcss), [`grunt-postcss`](https://github.com/nDmitry/grunt-postcss) and [`postcss-loader`](https://github.com/postcss/postcss-loader) -- or with the PostCSS JS API directly.\n\n## Options\n\nThe plugin accepts an options object as argument, with the following properties:\n\n### `config`\n\nA [stylelint configuration object](/user-guide/configuration/).\n\nIf no `config` is passed, stylelint will look for a `.stylelintrc` configuration file.\n\n### `configFile`\n\nThe path to a JSON, YAML, or JS file  that contains your [stylelint configuration object](/user-guide/configuration/).\n\nIt should be either absolute or relative to the directory that your process is running from (`process.cwd()`). We'd recommend absolute.\n\n### `configBasedir`\n\nAn absolute path to the directory that relative paths defining `extends` and `plugins` are *relative to*.\n\nThis is only necessary if you passed an object directly through the `config` property. If you used\n`configFile`, this option is not necessary.\n\nIf the `config` object passed uses relative paths for `extends` or `plugins`, you are going to have to pass a `configBasedir`. If not, you do not need this.\n\n### `configOverrides`\n\nA partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the `config` option or a `.stylelintrc` file.\n\nThe difference between the `configOverrides` and `config` options is this: If any `config` object is passed, stylelint does not bother looking for a `.stylelintrc` file and instead just uses whatever `config` object you've passed; but if you want to *both* load a `.stylelintrc` file *and* override specific parts of it, `configOverrides` does just that.\n\n## Usage examples\n\nWe recommend you lint your CSS before applying any transformations. You can do this by either placing stylelint at the beginning of your plugin pipeline, using a plugin like [`postcss-import`](https://github.com/postcss/postcss-import) or [`postcss-easy-import`](https://github.com/TrySound/postcss-easy-import) to lint the your files before any transformations, or by creating a separate lint process that is independent of your build one.\n\nYou'll also need to use a reporter. *The stylelint plugin registers warnings via PostCSS*. Therefore, you'll want to use it with a PostCSS runner that prints warnings (e.g. [`gulp-postcss`](https://github.com/postcss/gulp-postcss)) or another PostCSS plugin whose purpose is to format and print warnings (e.g. [`postcss-reporter`](https://github.com/postcss/postcss-reporter)).\n\n### Example A\n\nUsing the plugin with [`gulp-postcss`](https://github.com/postcss/gulp-postcss), and as a separate lint task:\n\n```js\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"lint:css\", function () {\n  return gulp.src(\"src/**/*.css\")\n    .pipe(postcss([\n      stylelint({ /* your options */ }),\n      reporter({ clearMessages: true }),\n    ]))\n})\n```\n\n### Example B\n\nUsing the plugin within [`postcss-import`](https://github.com/postcss/postcss-import) or [`postcss-easy-import`](https://github.com/TrySound/postcss-easy-import), as part of the build task:\n\n```js\nvar easyImport = require(\"postcss-easy-import\")\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"build:css\", function () {\n  return gulp.src(\"src/main.css\")\n    .pipe(postcss([\n      stylelint({ /* your options */ })\n      easyImport({\n        plugins: [\n          stylelint({ /* your options */ })\n        ]\n      })\n      /* other plugins... */\n      reporter({ clearMessages: true })\n    ]))\n})\n```\n\n### Example C\n\nUsing the plugin with [`gulp-postcss`](https://github.com/postcss/gulp-postcss) and [`postcss-less`](https://github.com/webschik/postcss-less) to lint Less, and as part of the build task:\n\n*Note: the stylelint PostCSS plugin, unlike the stylelint CLI and node API, doesn't have a `syntax` option. Instead, the syntax must be set within the [PostCSS options](https://github.com/postcss/postcss#options) as there can only be one parser/syntax in a pipeline.*\n\n```js\nvar postcss = require(\"gulp-postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar less = require(\"postcss-less\")\nvar stylelint = require(\"stylelint\")\n\ngulp.task(\"build:less\", function () {\n  return gulp.src(\"src/**/*.less\")\n    .pipe(postcss([\n      stylelint({ /* your options */ }),\n      /* other plugins... */\n      reporter({ clearMessages: true }),\n    ], {\n      syntax: less\n    }))\n})\n```\n\nThe same pattern can be used to read SCSS or [SugarSS](https://github.com/postcss/sugarss) syntax.\n\n### Example D\n\nUsing the plugin with the PostCSS JS API:\n\n```js\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar reporter = require(\"postcss-reporter\")\nvar stylelint = require(\"stylelint\")\n\n// CSS to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\npostcss([\n  stylelint({ /* your options */ }),\n  reporter({ clearMessages: true }),\n])\n  .process(css, { from: \"input.css\" })\n  .then()\n  .catch(err => console.error(err.stack))\n```\n\n## PostCSS version compatibility\n\n- Versions `1.0.0+` of the linter are compatible with PostCSS `5.0.2+`.\n- Versions `0.8.0 and below` of the linter are compatible with PostCSS `4.x`.\n","__filename":"user-guide/postcss-plugin.md","__url":"/user-guide/postcss-plugin/","__resourceUrl":"/user-guide/postcss-plugin/index.html","__dataUrl":"/user-guide/postcss-plugin/index.html.2965a0d2bab8299e40f90a727eee1e94.json"}