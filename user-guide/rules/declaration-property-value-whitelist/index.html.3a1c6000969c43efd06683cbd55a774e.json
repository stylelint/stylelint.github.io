{"head":{"layout":"RulePage","next":"/user-guide/rules/declaration-block-single-line-max-declarations/","prev":"/user-guide/rules/declaration-property-value-blacklist/","description":"declaration-property-value-whitelist Specify a whitelist of allowed property and value pairs within declarations. Options object: {  …","title":""},"body":"<h1 id=\"declaration-property-value-whitelist\"><a href=\"#declaration-property-value-whitelist\" class=\"phenomic-HeadingAnchor\">#</a>declaration-property-value-whitelist</h1>\n<p>Specify a whitelist of allowed property and value pairs within declarations.</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">text-transform</span>: uppercase; }\n<span class=\"hljs-comment\">/** ↑               ↑\n * These properties and these values */</span></code></pre>\n<ul>\n<li><a href=\"#options\">Options</a></li>\n</ul>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>object</code>: <code>{ \"unprefixed-property-name\": [\"array\", \"of\", \"values\"], \"unprefixed-property-name\": [\"/regex/\", \"non-regex\"] }</code></p>\n<p>If a property name is found in the object, only its whitelisted property values are allowed. This rule complains about all non-matching values. (If the property name is not included in the object, anything goes.)</p>\n<p>If a property name is surrounded with <code>\"/\"</code> (e.g. <code>\"/^animation/\"</code>), it is interpreted as a regular expression. This allows, for example, easy targeting of shorthands: <code>/^animation/</code> will match <code>animation</code>, <code>animation-duration</code>, <code>animation-timing-function</code>, etc.</p>\n<p>The same goes for values. Keep in mind that a regular expression value is matched against the entire value of the declaration, not specific parts of it. For example, a value like <code>\"10px solid rgba( 255 , 0 , 0 , 0.5 )\"</code> will <em>not</em> match <code>\"/^solid/\"</code> (notice beginning of the line boundary) but <em>will</em> match <code>\"/\\\\s+solid\\\\s+/\"</code> or <code>\"/\\\\bsolid\\\\b/\"</code>.</p>\n<p>Be careful with regex matching not to accidentally consider quoted string values and <code>url()</code> arguments. For example, <code>\"/red/\"</code> will match value such as <code>\"1px dotted red\"</code> as well as <code>\"\\\"foo\\\"\"</code> and <code>\"white url(/mysite.com/red.png)\"</code>.</p>\n<p>Given:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"transform\"</span>: [<span class=\"hljs-string\">\"/scale/\"</span>],\n  <span class=\"hljs-string\">\"whitespace\"</span>: [<span class=\"hljs-string\">\"nowrap\"</span>],\n  <span class=\"hljs-string\">\"/color/\"</span>: [<span class=\"hljs-string\">\"/^green/\"</span>]\n}</code></pre>\n<p>The following patterns are considered violations:</p>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">whitespace</span>: pre; }</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-color</span>: pink; }</code></pre>\n<p>The following patterns are <em>not</em> considered violations:</p>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">whitespace</span>: nowrap; }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">scale</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: green; }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-color</span>: green; }</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background</span>: pink; }</code></pre>\n","__filename":"user-guide/rules/declaration-property-value-whitelist.md","__url":"/user-guide/rules/declaration-property-value-whitelist/","__resourceUrl":"/user-guide/rules/declaration-property-value-whitelist/index.html","__dataUrl":"/user-guide/rules/declaration-property-value-whitelist/index.html.3a1c6000969c43efd06683cbd55a774e.json"}