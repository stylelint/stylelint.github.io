{"head":{"title":"indentation","description":"indentation\n\nSpecify indentation.\n\nOptions\n\nint|\"tab\" - int = number of spaces\n\n2\n\nAlways indent at-rules, rules, comments, declarations…"},"body":"<h1 id=\"indentation\"><a href=\"#indentation\" class=\"phenomic-HeadingAnchor\">#</a>indentation</h1>\n<p>Specify indentation.</p>\n<pre><code class=\"hljs language-css\">   |@media print {\n   |  a {\n   | ↑  background-position: top left,\n   | ↑ ↑  top right;\n   | ↑}↑ ↑\n   |}↑ ↑ ↑\n/**  ↑ ↑ ↑\n * The indentation at these three points */</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>int|&quot;tab&quot;</code> - int = number of spaces</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"phenomic-HeadingAnchor\">#</a><code>2</code></h3>\n<p>Always indent at-rules, rules, comments, declarations, and multi-line values by 2 spaces.</p>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n<span class=\"hljs-selector-tag\">a</span> {\n<span class=\"hljs-attribute\">background-position</span>: top left,\ntop right;\n}\n}</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background-position</span>: top left,\n    top right;\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">background-position</span>: top left,\n    top right;\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span>,\n    <span class=\"hljs-selector-tag\">b</span> {\n    <span class=\"hljs-attribute\">background-position</span>: top left,\n      top right;\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n<span class=\"hljs-comment\">/* blergh */</span>\n  <span class=\"hljs-attribute\">color</span>: pink;\n}\n  <span class=\"hljs-comment\">/* blergh */</span></code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print,\n(-webkit-min-device-pixel-ratio: <span class=\"hljs-number\">1.25</span>),\n(min-resolution: <span class=\"hljs-number\">120dpi</span>) {}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">background-position</span>: top left,\n      top right;\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span>,\n  <span class=\"hljs-selector-tag\">b</span> {\n    <span class=\"hljs-attribute\">background-position</span>: top left,\n      top right;\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-comment\">/* blergh */</span>\n  <span class=\"hljs-attribute\">color</span>: pink;\n}\n<span class=\"hljs-comment\">/* blergh */</span></code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print,\n  (-webkit-min-device-pixel-ratio: <span class=\"hljs-number\">1.25</span>),\n  (min-resolution: <span class=\"hljs-number\">120dpi</span>) {}</code></pre>\n<h2 id=\"optional-options\"><a href=\"#optional-options\" class=\"phenomic-HeadingAnchor\">#</a>Optional options</h2>\n<h3 id=\"indentinsideparens-once-twice-once-at-root-twice-in-block\"><a href=\"#indentinsideparens-once-twice-once-at-root-twice-in-block\" class=\"phenomic-HeadingAnchor\">#</a><code>indentInsideParens: [&quot;once&quot;, &quot;twice&quot;, &quot;once-at-root-twice-in-block&quot;]</code></h3>\n<p>By default, indentation within function arguments and other parentheses are ignored. If you would like to enforce indentation inside parentheses, use this option.</p>\n<p><code>&quot;once&quot;</code> means you expect one extra indentation (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have no extra indentation. For example:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(\n    255,\n    255,\n    255\n  );\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p><code>&quot;twice&quot;</code> means you expect two extra indentations (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have one extra indentation. For example:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(\n      255,\n      255,\n      255\n    );\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p><code>&quot;once-at-root-twice-in-block&quot;</code> means two things: You want the behavior of <code>&quot;once&quot;</code>, as documented above, when the parenthetical expression is part of a node that is an immediate descendent of the root — i.e. not inside a block. And you want the behavior of <code>&quot;twice&quot;</code>, as documented above, when the parenthetical expression is part of a node that is inside a block. For example, with a SCSS map:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-variable\">$foo</span>: (\n  bar: <span class=\"hljs-number\">1</span>,\n  baz: <span class=\"hljs-number\">2</span>\n);\n\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: rgb(\n      <span class=\"hljs-number\">255</span>,\n      <span class=\"hljs-number\">255</span>,\n      <span class=\"hljs-number\">255</span>\n    );\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<h3 id=\"except-block-value-param\"><a href=\"#except-block-value-param\" class=\"phenomic-HeadingAnchor\">#</a><code>except: [&quot;block&quot;, &quot;value&quot;, &quot;param&quot;]</code></h3>\n<p>Do <em>not</em> indent for these things.</p>\n<p>For example, with <code>2</code>:</p>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print,\n  (-webkit-min-device-pixel-ratio: <span class=\"hljs-number\">1.25</span>),\n  (min-resolution: <span class=\"hljs-number\">120dpi</span>) {\n  <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">background-position</span>: top left,\n      top right;\n  }\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print,\n(-webkit-min-device-pixel-ratio: <span class=\"hljs-number\">1.25</span>),\n(min-resolution: <span class=\"hljs-number\">120dpi</span>) {\n<span class=\"hljs-selector-tag\">a</span> {\n<span class=\"hljs-attribute\">background-position</span>: top left,\ntop right;\n}\n}</code></pre>\n<h3 id=\"ignore-value\"><a href=\"#ignore-value\" class=\"phenomic-HeadingAnchor\">#</a><code>ignore: [&quot;value&quot;]</code></h3>\n<p>Ignore the indentation of values.</p>\n<p>For example, with <code>2</code>:</p>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background-position</span>: top left,\ntop right,\n  bottom left,\n    bottom right;\n}</code></pre>\n<h3 id=\"ignore-param\"><a href=\"#ignore-param\" class=\"phenomic-HeadingAnchor\">#</a><code>ignore: [&quot;param&quot;]</code></h3>\n<p>Ignore the indentation of at-rule params.</p>\n<p>For example, with <code>2</code>:</p>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print,\n  (-webkit-min-device-pixel-ratio: <span class=\"hljs-number\">1.25</span>),\n    (min-resolution: <span class=\"hljs-number\">120dpi</span>) {\n}</code></pre>\n<h3 id=\"hierarchicalselectors-truefalse\"><a href=\"#hierarchicalselectors-truefalse\" class=\"phenomic-HeadingAnchor\">#</a><code>hierarchicalSelectors: true|false</code></h3>\n<p>Add additional indentation levels for hierarchical relationships between selectors.</p>\n<p>The basic rule is this: If selectors are grouped in such a way that Rule A should be followed by other rules whose selectors <em>start</em> with the same characters as Rule A&#x27;s (complete) selector, then Rule A is superordinate to those rules. This hierarchy can nest indefinitely.</p>\n<p>If a <code>@media</code> statement only contains rules that are subordinate to the rule <em>before</em> the <code>@media</code> statement, it is considered subordinate to that rule (see example below).</p>\n<p>Such a pattern can apply to combinators or BEM-style naming.</p>\n<p>For example, with <code>2</code>:</p>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n<span class=\"hljs-selector-class\">.foo-sub</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> {}\n<span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> &gt; <span class=\"hljs-selector-tag\">li</span> {}\n<span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> &gt; <span class=\"hljs-selector-tag\">li</span> &gt; <span class=\"hljs-selector-tag\">a</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n  <span class=\"hljs-selector-class\">.foo-two</span> {}\n  <span class=\"hljs-selector-class\">.foo-two-sub</span> {}\n<span class=\"hljs-selector-class\">.bar</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-class\">.foo-one</span> {}\n  <span class=\"hljs-selector-class\">.foo-two</span> {}\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n  <span class=\"hljs-selector-class\">.foo-sub</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> {}\n  <span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> &gt; <span class=\"hljs-selector-tag\">li</span> {}\n    <span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-tag\">ul</span> &gt; <span class=\"hljs-selector-tag\">li</span> &gt; <span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-id\">#bar</span> <span class=\"hljs-selector-tag\">ul</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n  <span class=\"hljs-selector-class\">.foo-one</span> {}\n  <span class=\"hljs-selector-class\">.foo-two</span> {}\n    <span class=\"hljs-selector-class\">.foo-two-sub</span> {}\n  <span class=\"hljs-selector-class\">.foo-three</span> {}\n<span class=\"hljs-selector-class\">.bar</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> {}\n  @<span class=\"hljs-keyword\">media</span> print {\n    <span class=\"hljs-selector-class\">.foo-one</span> {}\n    <span class=\"hljs-selector-class\">.foo-two</span> {}\n      <span class=\"hljs-selector-class\">.foo-two-sub</span> {}\n  }\n<span class=\"hljs-selector-class\">.bar</span> {}</code></pre>\n<h3 id=\"indentclosingbrace-truefalse\"><a href=\"#indentclosingbrace-truefalse\" class=\"phenomic-HeadingAnchor\">#</a><code>indentClosingBrace: true|false</code></h3>\n<p>If <code>true</code>, the closing brace of a block (rule or at-rule) will be expected at the same indentation level as the block&#x27;s inner nodes.</p>\n<p>For example, with <code>indentClosingBrace: true</code>, the following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: pink;\n}</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">color</span>: pink;\n  }  \n}</code></pre>\n<p>And the following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: pink;\n  }</code></pre>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">color</span>: pink;\n    }  \n  }</code></pre>\n","rawBody":"\n# indentation\n\nSpecify indentation.\n\n```css\n   |@media print {\n   |  a {\n   | ↑  background-position: top left,\n   | ↑ ↑  top right;\n   | ↑}↑ ↑\n   |}↑ ↑ ↑\n/**  ↑ ↑ ↑\n * The indentation at these three points */\n```\n\n## Options\n\n`int|\"tab\"` - int = number of spaces\n\n### `2`\n\nAlways indent at-rules, rules, comments, declarations, and multi-line values by 2 spaces.\n\nThe following patterns are considered warnings:\n\n```css\n@media print {\na {\nbackground-position: top left,\ntop right;\n}\n}\n```\n\n```css\n@media print {\na {\n  background-position: top left,\n    top right;\n  }\n}\n```\n\n```css\n@media print {\n  a {\n    background-position: top left,\n    top right;\n  }\n}\n```\n\n```css\n@media print {\n  a,\n    b {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\na {\n/* blergh */\n  color: pink;\n}\n  /* blergh */\n```\n\n```css\n@media print,\n(-webkit-min-device-pixel-ratio: 1.25),\n(min-resolution: 120dpi) {}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print {\n  a {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\n@media print {\n  a,\n  b {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\na {\n  /* blergh */\n  color: pink;\n}\n/* blergh */\n```\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n  (min-resolution: 120dpi) {}\n```\n\n## Optional options\n\n### `indentInsideParens: [\"once\", \"twice\", \"once-at-root-twice-in-block\"]`\n\nBy default, indentation within function arguments and other parentheses are ignored. If you would like to enforce indentation inside parentheses, use this option.\n\n`\"once\"` means you expect one extra indentation (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have no extra indentation. For example:\n\n```css\na {\n  color: rgb(\n    255,\n    255,\n    255\n  );\n  top: 0;\n}\n```\n\n`\"twice\"` means you expect two extra indentations (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have one extra indentation. For example:\n\n```css\na {\n  color: rgb(\n      255,\n      255,\n      255\n    );\n  top: 0;\n}\n```\n\n`\"once-at-root-twice-in-block\"` means two things: You want the behavior of `\"once\"`, as documented above, when the parenthetical expression is part of a node that is an immediate descendent of the root — i.e. not inside a block. And you want the behavior of `\"twice\"`, as documented above, when the parenthetical expression is part of a node that is inside a block. For example, with a SCSS map:\n\n```scss\n$foo: (\n  bar: 1,\n  baz: 2\n);\n\na {\n  color: rgb(\n      255,\n      255,\n      255\n    );\n  top: 0;\n}\n```\n\n### `except: [\"block\", \"value\", \"param\"]`\n\nDo *not* indent for these things.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n  (min-resolution: 120dpi) {\n  a {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print,\n(-webkit-min-device-pixel-ratio: 1.25),\n(min-resolution: 120dpi) {\na {\nbackground-position: top left,\ntop right;\n}\n}\n```\n\n### `ignore: [\"value\"]`\n\nIgnore the indentation of values.\n\nFor example, with `2`:\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  background-position: top left,\ntop right,\n  bottom left,\n    bottom right;\n}\n```\n\n### `ignore: [\"param\"]`\n\nIgnore the indentation of at-rule params.\n\nFor example, with `2`:\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n    (min-resolution: 120dpi) {\n}\n```\n\n### `hierarchicalSelectors: true|false`\n\nAdd additional indentation levels for hierarchical relationships between selectors.\n\nThe basic rule is this: If selectors are grouped in such a way that Rule A should be followed by other rules whose selectors *start* with the same characters as Rule A's (complete) selector, then Rule A is superordinate to those rules. This hierarchy can nest indefinitely.\n\nIf a `@media` statement only contains rules that are subordinate to the rule *before* the `@media` statement, it is considered subordinate to that rule (see example below).\n\nSuch a pattern can apply to combinators or BEM-style naming.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\n.foo {}\n.foo-sub {}\n```\n\n```css\n#foo ul {}\n#foo ul > li {}\n#foo ul > li > a {}\n```\n\n```css\n.foo {}\n  .foo-two {}\n  .foo-two-sub {}\n.bar {}\n```\n\n```css\n.foo {}\n@media print {\n  .foo-one {}\n  .foo-two {}\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.foo {}\n  .foo-sub {}\n```\n\n```css\n#foo ul {}\n  #foo ul > li {}\n    #foo ul > li > a {}\n#bar ul {}\n```\n\n```css\n.foo {}\n  .foo-one {}\n  .foo-two {}\n    .foo-two-sub {}\n  .foo-three {}\n.bar {}\n```\n\n```css\n.foo {}\n  @media print {\n    .foo-one {}\n    .foo-two {}\n      .foo-two-sub {}\n  }\n.bar {}\n```\n\n### `indentClosingBrace: true|false`\n\nIf `true`, the closing brace of a block (rule or at-rule) will be expected at the same indentation level as the block's inner nodes.\n\nFor example, with `indentClosingBrace: true`, the following patterns are considered warnings:\n\n```css\na {\n  color: pink;\n}\n```\n\n```css\n@media print {\n  a {\n    color: pink;\n  }  \n}\n```\n\nAnd the following patterns are *not* considered warnings:\n\n```css\na {\n  color: pink;\n  }\n```\n\n```css\n@media print {\n  a {\n    color: pink;\n    }  \n  }\n```\n","raw":"---\ntitle: indentation\n---\n\n# indentation\n\nSpecify indentation.\n\n```css\n   |@media print {\n   |  a {\n   | ↑  background-position: top left,\n   | ↑ ↑  top right;\n   | ↑}↑ ↑\n   |}↑ ↑ ↑\n/**  ↑ ↑ ↑\n * The indentation at these three points */\n```\n\n## Options\n\n`int|\"tab\"` - int = number of spaces\n\n### `2`\n\nAlways indent at-rules, rules, comments, declarations, and multi-line values by 2 spaces.\n\nThe following patterns are considered warnings:\n\n```css\n@media print {\na {\nbackground-position: top left,\ntop right;\n}\n}\n```\n\n```css\n@media print {\na {\n  background-position: top left,\n    top right;\n  }\n}\n```\n\n```css\n@media print {\n  a {\n    background-position: top left,\n    top right;\n  }\n}\n```\n\n```css\n@media print {\n  a,\n    b {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\na {\n/* blergh */\n  color: pink;\n}\n  /* blergh */\n```\n\n```css\n@media print,\n(-webkit-min-device-pixel-ratio: 1.25),\n(min-resolution: 120dpi) {}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print {\n  a {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\n@media print {\n  a,\n  b {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\n```css\na {\n  /* blergh */\n  color: pink;\n}\n/* blergh */\n```\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n  (min-resolution: 120dpi) {}\n```\n\n## Optional options\n\n### `indentInsideParens: [\"once\", \"twice\", \"once-at-root-twice-in-block\"]`\n\nBy default, indentation within function arguments and other parentheses are ignored. If you would like to enforce indentation inside parentheses, use this option.\n\n`\"once\"` means you expect one extra indentation (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have no extra indentation. For example:\n\n```css\na {\n  color: rgb(\n    255,\n    255,\n    255\n  );\n  top: 0;\n}\n```\n\n`\"twice\"` means you expect two extra indentations (of your specified type) after newlines inside parentheses, and expect the closing parenthesis to have one extra indentation. For example:\n\n```css\na {\n  color: rgb(\n      255,\n      255,\n      255\n    );\n  top: 0;\n}\n```\n\n`\"once-at-root-twice-in-block\"` means two things: You want the behavior of `\"once\"`, as documented above, when the parenthetical expression is part of a node that is an immediate descendent of the root — i.e. not inside a block. And you want the behavior of `\"twice\"`, as documented above, when the parenthetical expression is part of a node that is inside a block. For example, with a SCSS map:\n\n```scss\n$foo: (\n  bar: 1,\n  baz: 2\n);\n\na {\n  color: rgb(\n      255,\n      255,\n      255\n    );\n  top: 0;\n}\n```\n\n### `except: [\"block\", \"value\", \"param\"]`\n\nDo *not* indent for these things.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n  (min-resolution: 120dpi) {\n  a {\n    background-position: top left,\n      top right;\n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print,\n(-webkit-min-device-pixel-ratio: 1.25),\n(min-resolution: 120dpi) {\na {\nbackground-position: top left,\ntop right;\n}\n}\n```\n\n### `ignore: [\"value\"]`\n\nIgnore the indentation of values.\n\nFor example, with `2`:\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  background-position: top left,\ntop right,\n  bottom left,\n    bottom right;\n}\n```\n\n### `ignore: [\"param\"]`\n\nIgnore the indentation of at-rule params.\n\nFor example, with `2`:\n\nThe following patterns are *not* considered warnings:\n\n```css\n@media print,\n  (-webkit-min-device-pixel-ratio: 1.25),\n    (min-resolution: 120dpi) {\n}\n```\n\n### `hierarchicalSelectors: true|false`\n\nAdd additional indentation levels for hierarchical relationships between selectors.\n\nThe basic rule is this: If selectors are grouped in such a way that Rule A should be followed by other rules whose selectors *start* with the same characters as Rule A's (complete) selector, then Rule A is superordinate to those rules. This hierarchy can nest indefinitely.\n\nIf a `@media` statement only contains rules that are subordinate to the rule *before* the `@media` statement, it is considered subordinate to that rule (see example below).\n\nSuch a pattern can apply to combinators or BEM-style naming.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\n.foo {}\n.foo-sub {}\n```\n\n```css\n#foo ul {}\n#foo ul > li {}\n#foo ul > li > a {}\n```\n\n```css\n.foo {}\n  .foo-two {}\n  .foo-two-sub {}\n.bar {}\n```\n\n```css\n.foo {}\n@media print {\n  .foo-one {}\n  .foo-two {}\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.foo {}\n  .foo-sub {}\n```\n\n```css\n#foo ul {}\n  #foo ul > li {}\n    #foo ul > li > a {}\n#bar ul {}\n```\n\n```css\n.foo {}\n  .foo-one {}\n  .foo-two {}\n    .foo-two-sub {}\n  .foo-three {}\n.bar {}\n```\n\n```css\n.foo {}\n  @media print {\n    .foo-one {}\n    .foo-two {}\n      .foo-two-sub {}\n  }\n.bar {}\n```\n\n### `indentClosingBrace: true|false`\n\nIf `true`, the closing brace of a block (rule or at-rule) will be expected at the same indentation level as the block's inner nodes.\n\nFor example, with `indentClosingBrace: true`, the following patterns are considered warnings:\n\n```css\na {\n  color: pink;\n}\n```\n\n```css\n@media print {\n  a {\n    color: pink;\n  }  \n}\n```\n\nAnd the following patterns are *not* considered warnings:\n\n```css\na {\n  color: pink;\n  }\n```\n\n```css\n@media print {\n  a {\n    color: pink;\n    }  \n  }\n```\n","__filename":"user-guide/rules/indentation.md","__url":"/user-guide/rules/indentation/","__resourceUrl":"/user-guide/rules/indentation/index.html","__dataUrl":"/user-guide/rules/indentation/index.html.c09ab06d9e1c91df46e7284a4c212d7f.json"}