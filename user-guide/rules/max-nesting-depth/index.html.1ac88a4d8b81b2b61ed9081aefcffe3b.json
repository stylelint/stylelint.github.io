{"head":{"title":"max-nesting-depth","description":"max-nesting-depth Limit the allowed nesting depth. This rule works by checking rules' and at-rules' actual \"nesting depth\" against your…"},"body":"<h1 id=\"max-nesting-depth\"><a href=\"#max-nesting-depth\" class=\"phenomic-HeadingAnchor\">#</a>max-nesting-depth</h1>\n<p>Limit the allowed nesting depth.</p>\n<pre><code class=\"hljs language-css\">a { &amp; &gt; b { top: 0; }\n/** ↑\n * This nesting */</code></pre>\n<p>This rule works by checking rules&#x27; and at-rules&#x27; actual &quot;nesting depth&quot; against your specified max. Here&#x27;s how nesting depths works:</p>\n<pre><code class=\"hljs language-css\">a {\n  &amp; b { /* nesting depth 1 */\n    &amp; .foo { /* nesting depth 2 */\n      @media print { /* nesting depth 3 */\n        &amp; .baz { /* nesting depth 4 */\n          color: pink;\n        }\n      }\n    }\n  }\n}</code></pre>\n<p>Note that <strong>root-level at-rules will <em>not</em> be included in the nesting depth calculation</strong>, because most users would take for granted that root-level at-rules are &quot;free&quot; (because necessary). So both of the following <code>.foo</code> rules have a nesting depth of 2, and will therefore pass if your <code>max</code> is less than or equal to 2:</p>\n<pre><code class=\"hljs language-css\">a {\n  b { /* 1 */\n    .foo {} /* 2 */\n  }\n}\n\n@media print { /* ignored */\n  a {\n    b { /* 1 */\n      .foo {} /* 2 */\n    }\n  }\n}</code></pre>\n<p>This rule integrates into stylelint&#x27;s core the functionality of the (now deprecated) plugin <a href=\"https://github.com/davidtheclark/stylelint-statement-max-nesting-depth\"><code>stylelint-statement-max-nesting-depth</code></a>.</p>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>int</code>: Maximum nesting depth allowed.</p>\n<p>For example, with <code>2</code>:</p>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\">a {\n  &amp; .foo { /* 1 */\n    &amp;__foo { /* 2 */\n      &amp; &gt; .bar {} /* 3 */\n    }\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @media print { /* 1 */\n    &amp; .foo { /* 2 */\n      &amp; .bar {} /* 3 */\n    }\n  }\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">a {\n  &amp; .foo { /* 1 */\n    &amp;__foo {} /* 2 */\n  }\n}\n\na .foo__foo .bar .baz {}</code></pre>\n<pre><code class=\"hljs language-css\">@media print {\n  a {\n    &amp; .foo { /* 1 */\n      &amp;__foo {} /* 2 */\n    }\n  }\n}</code></pre>\n<h2 id=\"optional-secondary-options\"><a href=\"#optional-secondary-options\" class=\"phenomic-HeadingAnchor\">#</a>Optional secondary options</h2>\n<h3 id=\"ignore-at-rules-without-declaration-blocks\"><a href=\"#ignore-at-rules-without-declaration-blocks\" class=\"phenomic-HeadingAnchor\">#</a><code>ignore: [&quot;at-rules-without-declaration-blocks&quot;]</code></h3>\n<p>Ignore at-rules that only wrap other rules, and do not themselves have declaration blocks.</p>\n<p>For example, with <code>1</code>:</p>\n<p>The following patterns are considered warnings:</p>\n<p>As the at-rules have a declarations blocks.</p>\n<pre><code class=\"hljs language-css\">a {\n  &amp;:hover { /* 1 */\n    @media (min-width: 500px) { color: pink; } /* 2 */      \n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @nest &gt; b { /* 1 */\n    .foo { color: pink; } /* 2 */      \n  }\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<p>As all of the following <code>.foo</code> rules would have a nesting depth of just 1.</p>\n<pre><code class=\"hljs language-css\">a {\n  .foo { color: pink; } /* 1 */\n}</code></pre>\n<pre><code class=\"hljs language-css\">@media print { /* ignored regardless of options */\n  a {\n    .foo { color: pink; } /* 1 */\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @media print { /* ignored because it's an at-rule without a declaration block of its own */\n    .foo { color: pink; } /* 1 */\n  }\n}</code></pre>\n<h3 id=\"ignoreatrules-regex-string\"><a href=\"#ignoreatrules-regex-string\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreAtRules: [&quot;/regex/&quot;, &quot;string&quot;]</code></h3>\n<p>Ignore the specified at-rules.</p>\n<p>For example, with <code>1</code> and given:</p>\n<pre><code class=\"hljs language-js\">[<span class=\"hljs-string\">\"/^my-/\"</span>, <span class=\"hljs-string\">\"media\"</span>]</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">a {\n  @media print {      /* 1 */\n    b {               /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  b {                 /* 1 */\n    @media print {    /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @my-at-rule print {  /* 1 */\n    b {                /* 2 */\n      c { top: 0; }    /* 3 */\n    }\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @my-other-at-rule print {  /* 1 */\n    b {                      /* 2 */\n      c { top: 0; }          /* 3 */\n    }\n  }\n}</code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\">a {\n  @import print {       /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}</code></pre>\n<pre><code class=\"hljs language-css\">a {\n  @not-my-at-rule print {   /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}</code></pre>\n","rawBody":"\n# max-nesting-depth\n\nLimit the allowed nesting depth.\n\n```css\na { & > b { top: 0; }\n/** ↑\n * This nesting */\n```\n\nThis rule works by checking rules' and at-rules' actual \"nesting depth\" against your specified max. Here's how nesting depths works:\n\n```css\na {\n  & b { /* nesting depth 1 */\n    & .foo { /* nesting depth 2 */\n      @media print { /* nesting depth 3 */\n        & .baz { /* nesting depth 4 */\n          color: pink;\n        }\n      }\n    }\n  }\n}\n```\n\nNote that **root-level at-rules will *not* be included in the nesting depth calculation**, because most users would take for granted that root-level at-rules are \"free\" (because necessary). So both of the following `.foo` rules have a nesting depth of 2, and will therefore pass if your `max` is less than or equal to 2:\n\n```css\na {\n  b { /* 1 */\n    .foo {} /* 2 */\n  }\n}\n\n@media print { /* ignored */\n  a {\n    b { /* 1 */\n      .foo {} /* 2 */\n    }\n  }\n}\n```\n\nThis rule integrates into stylelint's core the functionality of the (now deprecated) plugin [`stylelint-statement-max-nesting-depth`](https://github.com/davidtheclark/stylelint-statement-max-nesting-depth).\n\n## Options\n\n`int`: Maximum nesting depth allowed.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\na {\n  & .foo { /* 1 */\n    &__foo { /* 2 */\n      & > .bar {} /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @media print { /* 1 */\n    & .foo { /* 2 */\n      & .bar {} /* 3 */\n    }\n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  & .foo { /* 1 */\n    &__foo {} /* 2 */\n  }\n}\n\na .foo__foo .bar .baz {}\n```\n\n```css\n@media print {\n  a {\n    & .foo { /* 1 */\n      &__foo {} /* 2 */\n    }\n  }\n}\n```\n\n## Optional secondary options\n\n### `ignore: [\"at-rules-without-declaration-blocks\"]`\n\nIgnore at-rules that only wrap other rules, and do not themselves have declaration blocks.\n\nFor example, with `1`:\n\nThe following patterns are considered warnings:\n\nAs the at-rules have a declarations blocks.\n\n```css\na {\n  &:hover { /* 1 */\n    @media (min-width: 500px) { color: pink; } /* 2 */      \n  }\n}\n```\n\n```css\na {\n  @nest > b { /* 1 */\n    .foo { color: pink; } /* 2 */      \n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\nAs all of the following `.foo` rules would have a nesting depth of just 1.\n\n```css\na {\n  .foo { color: pink; } /* 1 */\n}\n```\n\n```css\n@media print { /* ignored regardless of options */\n  a {\n    .foo { color: pink; } /* 1 */\n  }\n}\n```\n\n```css\na {\n  @media print { /* ignored because it's an at-rule without a declaration block of its own */\n    .foo { color: pink; } /* 1 */\n  }\n}\n```\n\n### `ignoreAtRules: [\"/regex/\", \"string\"]`\n\nIgnore the specified at-rules.\n\nFor example, with `1` and given:\n\n```js\n[\"/^my-/\", \"media\"]\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  @media print {      /* 1 */\n    b {               /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  b {                 /* 1 */\n    @media print {    /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @my-at-rule print {  /* 1 */\n    b {                /* 2 */\n      c { top: 0; }    /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @my-other-at-rule print {  /* 1 */\n    b {                      /* 2 */\n      c { top: 0; }          /* 3 */\n    }\n  }\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\na {\n  @import print {       /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}\n```\n\n```css\na {\n  @not-my-at-rule print {   /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}\n```\n","raw":"---\ntitle: max-nesting-depth\n---\n\n# max-nesting-depth\n\nLimit the allowed nesting depth.\n\n```css\na { & > b { top: 0; }\n/** ↑\n * This nesting */\n```\n\nThis rule works by checking rules' and at-rules' actual \"nesting depth\" against your specified max. Here's how nesting depths works:\n\n```css\na {\n  & b { /* nesting depth 1 */\n    & .foo { /* nesting depth 2 */\n      @media print { /* nesting depth 3 */\n        & .baz { /* nesting depth 4 */\n          color: pink;\n        }\n      }\n    }\n  }\n}\n```\n\nNote that **root-level at-rules will *not* be included in the nesting depth calculation**, because most users would take for granted that root-level at-rules are \"free\" (because necessary). So both of the following `.foo` rules have a nesting depth of 2, and will therefore pass if your `max` is less than or equal to 2:\n\n```css\na {\n  b { /* 1 */\n    .foo {} /* 2 */\n  }\n}\n\n@media print { /* ignored */\n  a {\n    b { /* 1 */\n      .foo {} /* 2 */\n    }\n  }\n}\n```\n\nThis rule integrates into stylelint's core the functionality of the (now deprecated) plugin [`stylelint-statement-max-nesting-depth`](https://github.com/davidtheclark/stylelint-statement-max-nesting-depth).\n\n## Options\n\n`int`: Maximum nesting depth allowed.\n\nFor example, with `2`:\n\nThe following patterns are considered warnings:\n\n```css\na {\n  & .foo { /* 1 */\n    &__foo { /* 2 */\n      & > .bar {} /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @media print { /* 1 */\n    & .foo { /* 2 */\n      & .bar {} /* 3 */\n    }\n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  & .foo { /* 1 */\n    &__foo {} /* 2 */\n  }\n}\n\na .foo__foo .bar .baz {}\n```\n\n```css\n@media print {\n  a {\n    & .foo { /* 1 */\n      &__foo {} /* 2 */\n    }\n  }\n}\n```\n\n## Optional secondary options\n\n### `ignore: [\"at-rules-without-declaration-blocks\"]`\n\nIgnore at-rules that only wrap other rules, and do not themselves have declaration blocks.\n\nFor example, with `1`:\n\nThe following patterns are considered warnings:\n\nAs the at-rules have a declarations blocks.\n\n```css\na {\n  &:hover { /* 1 */\n    @media (min-width: 500px) { color: pink; } /* 2 */      \n  }\n}\n```\n\n```css\na {\n  @nest > b { /* 1 */\n    .foo { color: pink; } /* 2 */      \n  }\n}\n```\n\nThe following patterns are *not* considered warnings:\n\nAs all of the following `.foo` rules would have a nesting depth of just 1.\n\n```css\na {\n  .foo { color: pink; } /* 1 */\n}\n```\n\n```css\n@media print { /* ignored regardless of options */\n  a {\n    .foo { color: pink; } /* 1 */\n  }\n}\n```\n\n```css\na {\n  @media print { /* ignored because it's an at-rule without a declaration block of its own */\n    .foo { color: pink; } /* 1 */\n  }\n}\n```\n\n### `ignoreAtRules: [\"/regex/\", \"string\"]`\n\nIgnore the specified at-rules.\n\nFor example, with `1` and given:\n\n```js\n[\"/^my-/\", \"media\"]\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na {\n  @media print {      /* 1 */\n    b {               /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  b {                 /* 1 */\n    @media print {    /* 2 */\n      c { top: 0; }   /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @my-at-rule print {  /* 1 */\n    b {                /* 2 */\n      c { top: 0; }    /* 3 */\n    }\n  }\n}\n```\n\n```css\na {\n  @my-other-at-rule print {  /* 1 */\n    b {                      /* 2 */\n      c { top: 0; }          /* 3 */\n    }\n  }\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\na {\n  @import print {       /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}\n```\n\n```css\na {\n  @not-my-at-rule print {   /* 1 */\n    b { top: 0; }       /* 2 */\n  }\n}\n```\n","__filename":"user-guide/rules/max-nesting-depth.md","__url":"/user-guide/rules/max-nesting-depth/","__resourceUrl":"/user-guide/rules/max-nesting-depth/index.html","__dataUrl":"/user-guide/rules/max-nesting-depth/index.html.1ac88a4d8b81b2b61ed9081aefcffe3b.json"}