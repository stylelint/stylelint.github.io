{"head":{"layout":"RulePage","next":"/user-guide/rules/no-duplicate-at-import-rules/","prev":"/user-guide/rules/comment-no-empty/","description":"no-descending-specificity Disallow selectors of lower specificity from coming after overriding selectors of higher specificity. Source…","title":""},"body":"<h1 id=\"no-descending-specificity\"><a href=\"#no-descending-specificity\" class=\"phenomic-HeadingAnchor\">#</a>no-descending-specificity</h1>\n<p>Disallow selectors of lower specificity from coming after overriding selectors of higher specificity.</p>\n<pre><code class=\"hljs   language-css\">    <span class=\"hljs-selector-id\">#container</span> <span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">10px</span>; } <span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>; }\n<span class=\"hljs-comment\">/** ↑                           ↑\n * The order of these selectors represents descending specificity */</span></code></pre>\n<p>Source order is important in CSS, and when two selectors have the <em>same</em> specificity, the one that occurs <em>last</em> will take priority. However, the situation is different when one of the selectors has a <em>higher</em> specificity. In that case, source order does <em>not</em> matter: the selector with higher specificity will win out even if it comes first.</p>\n<p>The clashes of these two mechanisms for prioritization, source order and specificity, can cause some confusion when reading stylesheets. If a selector with higher specificity comes <em>before</em> the selector it overrides, we have to think harder to understand it, because it violates the source order expectation. <strong>Stylesheets are most legible when overriding selectors always come <em>after</em> the selectors they override.</strong> That way both mechanisms, source order and specificity, work together nicely.</p>\n<p>This rule enforces that practice <em>as best it can</em>. (It cannot catch every <em>actual</em> overriding selector (because it does not know the DOM structure, for one), but it can catch certain common mistakes.)</p>\n<p>Here's how it works: <strong>This rule looks at the last <em>compound selector</em> in every full selector, and then compares it with other selectors in the stylesheet that end in the same way.</strong></p>\n<p>So <code>.foo .bar</code> (whose last compound selector is <code>.bar</code>) will be compared to <code>.bar</code> and <code>#baz .bar</code>, but not to <code>#baz .foo</code> or <code>.bar .foo</code>.</p>\n<p>And <code>a > li#wag.pit</code> (whose last compound selector is <code>li#wag.pit</code>) will be compared to <code>div li#wag.pit</code> and <code>a > b > li + li#wag.pit</code>, but not to <code>li</code>, or <code>li #wag</code>, etc.</p>\n<p>There's one other important feature: Selectors targeting pseudo-elements are not considered comparable to similar selectors without the pseudo-element, because they target other elements on the rendered page. For example, <code>a::before {}</code> will not be compared to <code>a:hover {}</code>, because <code>a::before</code> targets a pseudo-element whereas <code>a:hover</code> targets the actual <code>&#x3C;a></code>.</p>\n<p>This rule only compares rules that are within the same media context. So <code>a {} @media print { #baz a {} }</code> is fine.</p>\n<p>This rule resolves nested selectors before calculating the specificity of the selectors.</p>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<h3 id=\"true\"><a href=\"#true\" class=\"phenomic-HeadingAnchor\">#</a><code>true</code></h3>\n<p>The following patterns are considered violations:</p>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-tag\">a</span> {}</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> + <span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-tag\">a</span> {}</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">b</span> > <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[foo]</span> {}\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[foo]</span> {}</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  &#x26; > b {}\n}\n<span class=\"hljs-selector-tag\">b</span> {}</code></pre>\n<pre><code class=\"hljs  invalid-pattern language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-id\">#c</span> <span class=\"hljs-selector-tag\">a</span> {}\n  <span class=\"hljs-selector-tag\">a</span> {}\n}</code></pre>\n<p>The following patterns are <em>not</em> considered violations:</p>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">a</span> {}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-tag\">a</span> + <span class=\"hljs-selector-tag\">a</span> {}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[foo]</span> {}\n<span class=\"hljs-selector-tag\">b</span> > <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[foo]</span> {}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">b</span> {}\n<span class=\"hljs-selector-tag\">a</span> {\n  &#x26; > b {}\n}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">::before</span> {}\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span><span class=\"hljs-selector-pseudo\">::before</span> {}\n<span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> {}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\">@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-tag\">a</span> {}\n  <span class=\"hljs-selector-id\">#c</span> <span class=\"hljs-selector-tag\">a</span> {}\n}</code></pre>\n<pre><code class=\"hljs valid-pattern  language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n@<span class=\"hljs-keyword\">media</span> print {\n  <span class=\"hljs-selector-id\">#baz</span> <span class=\"hljs-selector-tag\">a</span> {}\n}</code></pre>\n","__filename":"user-guide/rules/no-descending-specificity.md","__url":"/user-guide/rules/no-descending-specificity/","__resourceUrl":"/user-guide/rules/no-descending-specificity/index.html","__dataUrl":"/user-guide/rules/no-descending-specificity/index.html.861ed4a6ccd5de099e5f873c27bd6198.json"}