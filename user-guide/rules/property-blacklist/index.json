{"head":{"title":"property-blacklist"},"body":"<h1 id=\"property-blacklist\"><a class=\"markdownIt-Anchor\" href=\"#property-blacklist\">#</a> property-blacklist</h1>\n<p>Specify a blacklist of disallowed properties.</p>\n<pre><code class=\"language-css\">    <span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">text-rendering</span>: optimizeLegibility; }\n<span class=\"hljs-comment\">/**          ↑\n * These properties */</span>\n</code></pre>\n<h2 id=\"options\"><a class=\"markdownIt-Anchor\" href=\"#options\">#</a> Options</h2>\n<p><code>array</code>: <code>&quot;[&quot;array&quot;, &quot;of&quot;, &quot;unprefixed&quot;, &quot;properties&quot;]</code></p>\n<h3 id=\"array-of-unprefixed-properties\"><a class=\"markdownIt-Anchor\" href=\"#array-of-unprefixed-properties\">#</a> <code>[&quot;array&quot;, &quot;of&quot;, &quot;unprefixed&quot;, properties&quot;]</code></h3>\n<p>Blacklisted properties <em>must never</em> be used.</p>\n<p>If a string in the array is surrounded with <code>&quot;/&quot;</code> (e.g. <code>&quot;/^background/&quot;</code>),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: <code>/^background/</code> will match <code>background</code>,\n<code>background-size</code>, <code>background-color</code>, etc.</p>\n<p>Given:</p>\n<pre><code class=\"language-js\">[ <span class=\"hljs-string\">\"text-rendering\"</span>, <span class=\"hljs-string\">\"animation\"</span>, <span class=\"hljs-string\">\"/^background/\"</span> ]\n</code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">text-rendering</span>: optimizeLegibility; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">animation</span>: my-animation <span class=\"hljs-number\">2s</span>;\n  <span class=\"hljs-attribute\">color</span>: pink;\n}\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-animation</span>: my-animation <span class=\"hljs-number\">2s</span>; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background</span>: pink; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-size</span>: cover; }\n</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">no-background</span>: sure; }\n</code></pre>\n","rawBody":"\n# property-blacklist\n\nSpecify a blacklist of disallowed properties.\n\n```css\n    a { text-rendering: optimizeLegibility; }\n/**          ↑\n * These properties */\n```\n\n## Options\n\n`array`: `\"[\"array\", \"of\", \"unprefixed\", \"properties\"]`\n\n### `[\"array\", \"of\", \"unprefixed\", properties\"]`\n\nBlacklisted properties *must never* be used.\n\nIf a string in the array is surrounded with `\"/\"` (e.g. `\"/^background/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^background/` will match `background`,\n`background-size`, `background-color`, etc.\n\nGiven:\n\n```js\n[ \"text-rendering\", \"animation\", \"/^background/\" ]\n```\n\nThe following patterns are considered warnings:\n\n\n```css\na { text-rendering: optimizeLegibility; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  color: pink;\n}\n```\n\n```css\na { -webkit-animation: my-animation 2s; }\n```\n\n```css\na { background: pink; }\n```\n\n```css\na { background-size: cover; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\na { no-background: sure; }\n```\n","raw":"---\ntitle: property-blacklist\n---\n\n# property-blacklist\n\nSpecify a blacklist of disallowed properties.\n\n```css\n    a { text-rendering: optimizeLegibility; }\n/**          ↑\n * These properties */\n```\n\n## Options\n\n`array`: `\"[\"array\", \"of\", \"unprefixed\", \"properties\"]`\n\n### `[\"array\", \"of\", \"unprefixed\", properties\"]`\n\nBlacklisted properties *must never* be used.\n\nIf a string in the array is surrounded with `\"/\"` (e.g. `\"/^background/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^background/` will match `background`,\n`background-size`, `background-color`, etc.\n\nGiven:\n\n```js\n[ \"text-rendering\", \"animation\", \"/^background/\" ]\n```\n\nThe following patterns are considered warnings:\n\n\n```css\na { text-rendering: optimizeLegibility; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  color: pink;\n}\n```\n\n```css\na { -webkit-animation: my-animation 2s; }\n```\n\n```css\na { background: pink; }\n```\n\n```css\na { background-size: cover; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\na { no-background: sure; }\n```\n","__filename":"user-guide/rules/property-blacklist.md","__url":"/user-guide/rules/property-blacklist/"}