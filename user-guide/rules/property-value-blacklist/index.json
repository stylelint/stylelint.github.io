{"head":{"title":"property-value-blacklist"},"body":"<h1 id=\"property-value-blacklist\"><a class=\"markdownIt-Anchor\" href=\"#property-value-blacklist\">#</a> property-value-blacklist</h1>\n<p>Specify a blacklist of disallowed property-value pairs.</p>\n<pre><code class=\"language-css\">    <span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">text-transform</span>: uppercase; }\n<span class=\"hljs-comment\">/**       ↑             ↑\n * These properties and these values */</span>\n</code></pre>\n<h2 id=\"options\"><a class=\"markdownIt-Anchor\" href=\"#options\">#</a> Options</h2>\n<p><code>object</code>: <code>{ &quot;unprefixed-property-name&quot;: [&quot;array&quot;, &quot;of&quot;, &quot;values&quot;], &quot;unprefixed-property-name&quot;: [&quot;/regex/&quot;, &quot;non-regex&quot;] }</code></p>\n<p>If a property name is surrounded with <code>&quot;/&quot;</code> (e.g. <code>&quot;/^animation/&quot;</code>),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: <code>/^animation/</code> will match <code>animation</code>,\n<code>animation-duration</code>, <code>animation-timing-function</code>, etc.</p>\n<p>The same goes for values. Keep in mind that a regular expression value\nis matched against the entire value of the declaration, not specific parts of it.\nFor example, a value like “10px solid rgba( 255 , 0 , 0 , 0.5 )” will <em>not</em> match “/^solid/”\n(notice beginning of the line boundary) but <em>will</em> match “/\\s+solid\\s+/” or “/\\bsolid\\b/”.</p>\n<p>Be careful with regex matching not to accidentally consider quoted string values and <code>url()</code> arguments.\nFor example, “/red/” will match value such as “1px dotted red” as well as &quot;“foo”&quot;\nand “white url(/mysite.com/red.png)”.</p>\n<p>Given:</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"transform\"</span>: [<span class=\"hljs-string\">\"/scale3d/\"</span>, <span class=\"hljs-string\">\"/rotate3d/\"</span>, <span class=\"hljs-string\">\"/translate3d/\"</span>],\n  <span class=\"hljs-string\">\"position\"</span>: [<span class=\"hljs-string\">\"fixed\"</span>],\n  <span class=\"hljs-string\">\"color\"</span>: [<span class=\"hljs-string\">\"/^green/\"</span>]\n  <span class=\"hljs-string\">\"/^animation/\"</span>: [<span class=\"hljs-string\">\"/ease/\"</span>]\n}\n</code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> { <span class=\"hljs-attribute\">position</span>: fixed; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale3d</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">scale3d</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: green; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">animation</span>: foo <span class=\"hljs-number\">2s</span> ease-in-out; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">animation-timing-function</span>: ease-in-out; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-animation-timing-function</span>: ease-in-out; }\n</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> { <span class=\"hljs-attribute\">position</span>: relative; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">2</span>); }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">2</span>); }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: lightgreen; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">animation</span>: foo <span class=\"hljs-number\">2s</span> linear; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">animation-timing-function</span>: linear; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-animation-timing-function</span>: linear; }\n</code></pre>\n","rawBody":"\n# property-value-blacklist\n\nSpecify a blacklist of disallowed property-value pairs.\n\n```css\n    a { text-transform: uppercase; }\n/**       ↑             ↑\n * These properties and these values */\n```\n\n## Options\n\n`object`: `{\n  \"unprefixed-property-name\": [\"array\", \"of\", \"values\"],\n  \"unprefixed-property-name\": [\"/regex/\", \"non-regex\"]\n}`\n\nIf a property name is surrounded with `\"/\"` (e.g. `\"/^animation/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^animation/` will match `animation`,\n`animation-duration`, `animation-timing-function`, etc.\n\nThe same goes for values. Keep in mind that a regular expression value\nis matched against the entire value of the declaration, not specific parts of it.\nFor example, a value like \"10px solid rgba( 255 , 0 , 0 , 0.5 )\" will *not* match \"/^solid/\"\n(notice beginning of the line boundary) but *will* match \"/\\\\s+solid\\\\s+/\" or \"/\\\\bsolid\\\\b/\".\n\nBe careful with regex matching not to accidentally consider quoted string values and `url()` arguments.\nFor example, \"/red/\" will match value such as \"1px dotted red\" as well as \"\\\"foo\\\"\"\nand \"white url(/mysite.com/red.png)\".\n\nGiven:\n\n```js\n{\n  \"transform\": [\"/scale3d/\", \"/rotate3d/\", \"/translate3d/\"],\n  \"position\": [\"fixed\"],\n  \"color\": [\"/^green/\"]\n  \"/^animation/\": [\"/ease/\"]\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\ndiv { position: fixed; }\n```\n\n```css\na { transform: scale3d(1, 2, 3); }\n```\n\n```css\na { -webkit-transform: scale3d(1, 2, 3); }\n```\n\n```css\na { color: green; }\n```\n\n```css\na { animation: foo 2s ease-in-out; }\n```\n\n```css\na { animation-timing-function: ease-in-out; }\n```\n\n```css\na { -webkit-animation-timing-function: ease-in-out; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\ndiv { position: relative; }\n```\n\n```css\na { transform: scale(2); }\n```\n\n```css\na { -webkit-transform: scale(2); }\n```\n\n```css\na { color: lightgreen; }\n```\n\n\n```css\na { animation: foo 2s linear; }\n```\n\n```css\na { animation-timing-function: linear; }\n```\n\n```css\na { -webkit-animation-timing-function: linear; }\n```\n","raw":"---\ntitle: property-value-blacklist\n---\n\n# property-value-blacklist\n\nSpecify a blacklist of disallowed property-value pairs.\n\n```css\n    a { text-transform: uppercase; }\n/**       ↑             ↑\n * These properties and these values */\n```\n\n## Options\n\n`object`: `{\n  \"unprefixed-property-name\": [\"array\", \"of\", \"values\"],\n  \"unprefixed-property-name\": [\"/regex/\", \"non-regex\"]\n}`\n\nIf a property name is surrounded with `\"/\"` (e.g. `\"/^animation/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^animation/` will match `animation`,\n`animation-duration`, `animation-timing-function`, etc.\n\nThe same goes for values. Keep in mind that a regular expression value\nis matched against the entire value of the declaration, not specific parts of it.\nFor example, a value like \"10px solid rgba( 255 , 0 , 0 , 0.5 )\" will *not* match \"/^solid/\"\n(notice beginning of the line boundary) but *will* match \"/\\\\s+solid\\\\s+/\" or \"/\\\\bsolid\\\\b/\".\n\nBe careful with regex matching not to accidentally consider quoted string values and `url()` arguments.\nFor example, \"/red/\" will match value such as \"1px dotted red\" as well as \"\\\"foo\\\"\"\nand \"white url(/mysite.com/red.png)\".\n\nGiven:\n\n```js\n{\n  \"transform\": [\"/scale3d/\", \"/rotate3d/\", \"/translate3d/\"],\n  \"position\": [\"fixed\"],\n  \"color\": [\"/^green/\"]\n  \"/^animation/\": [\"/ease/\"]\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\ndiv { position: fixed; }\n```\n\n```css\na { transform: scale3d(1, 2, 3); }\n```\n\n```css\na { -webkit-transform: scale3d(1, 2, 3); }\n```\n\n```css\na { color: green; }\n```\n\n```css\na { animation: foo 2s ease-in-out; }\n```\n\n```css\na { animation-timing-function: ease-in-out; }\n```\n\n```css\na { -webkit-animation-timing-function: ease-in-out; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\ndiv { position: relative; }\n```\n\n```css\na { transform: scale(2); }\n```\n\n```css\na { -webkit-transform: scale(2); }\n```\n\n```css\na { color: lightgreen; }\n```\n\n\n```css\na { animation: foo 2s linear; }\n```\n\n```css\na { animation-timing-function: linear; }\n```\n\n```css\na { -webkit-animation-timing-function: linear; }\n```\n","__filename":"user-guide/rules/property-value-blacklist.md","__url":"/user-guide/rules/property-value-blacklist/"}