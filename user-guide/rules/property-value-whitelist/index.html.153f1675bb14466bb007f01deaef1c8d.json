{"head":{"title":"property-value-whitelist","description":"property-value-whitelist Specify a whitelist of allowed values for specific properties. Options object: {   \"unprefixed-property-name…"},"body":"<h1 id=\"property-value-whitelist\"><a href=\"#property-value-whitelist\" class=\"phenomic-HeadingAnchor\">#</a>property-value-whitelist</h1>\n<p>Specify a whitelist of allowed values for specific properties.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">text-transform</span>: uppercase; }\n<span class=\"hljs-comment\">/** ↑               ↑\n * These properties and these values */</span></code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>object</code>: <code>{ &quot;unprefixed-property-name&quot;: [&quot;array&quot;, &quot;of&quot;, &quot;values&quot;], &quot;unprefixed-property-name&quot;: [&quot;/regex/&quot;, &quot;non-regex&quot;] }</code></p>\n<p>If a property name is found in the object, only its whitelisted property values are allowed. This rule complains about all non-matching values. (If the property name is not included in the object, anything goes.)</p>\n<p>If a property name is surrounded with <code>&quot;/&quot;</code> (e.g. <code>&quot;/^animation/&quot;</code>), it is interpreted as a regular expression. This allows, for example, easy targeting of shorthands: <code>/^animation/</code> will match <code>animation</code>, <code>animation-duration</code>, <code>animation-timing-function</code>, etc.</p>\n<p>The same goes for values. Keep in mind that a regular expression value is matched against the entire value of the declaration, not specific parts of it. For example, a value like <code>&quot;10px solid rgba( 255 , 0 , 0 , 0.5 )&quot;</code> will <em>not</em> match <code>&quot;/^solid/&quot;</code> (notice beginning of the line boundary) but <em>will</em> match <code>&quot;/\\\\s+solid\\\\s+/&quot;</code> or <code>&quot;/\\\\bsolid\\\\b/&quot;</code>.</p>\n<p>Be careful with regex matching not to accidentally consider quoted string values and <code>url()</code> arguments. For example, <code>&quot;/red/&quot;</code> will match value such as <code>&quot;1px dotted red&quot;</code> as well as <code>&quot;\\&quot;foo\\&quot;&quot;</code> and <code>&quot;white url(/mysite.com/red.png)&quot;</code>.</p>\n<p>Given:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"transform\"</span>: [<span class=\"hljs-string\">\"/scale/\"</span>],\n  <span class=\"hljs-string\">\"whitespace\"</span>: [<span class=\"hljs-string\">\"nowrap\"</span>],\n  <span class=\"hljs-string\">\"/color/\"</span>: [<span class=\"hljs-string\">\"/^green/\"</span>]\n}</code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> { <span class=\"hljs-attribute\">whitespace</span>: pre; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-color</span>: pink; }</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> { <span class=\"hljs-attribute\">whitespace</span>: nowrap; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">scale</span>(1, 1); }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: green; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-color</span>: green; }</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background</span>: pink; }</code></pre>\n","rawBody":"\n# property-value-whitelist\n\nSpecify a whitelist of allowed values for specific properties.\n\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n## Options\n\n`object`: `{\n  \"unprefixed-property-name\": [\"array\", \"of\", \"values\"],\n  \"unprefixed-property-name\": [\"/regex/\", \"non-regex\"]\n}`\n\nIf a property name is found in the object, only its whitelisted property values are allowed. This rule complains about all non-matching values. (If the property name is not included in the object, anything goes.)\n\nIf a property name is surrounded with `\"/\"` (e.g. `\"/^animation/\"`), it is interpreted as a regular expression. This allows, for example, easy targeting of shorthands: `/^animation/` will match `animation`, `animation-duration`, `animation-timing-function`, etc.\n\nThe same goes for values. Keep in mind that a regular expression value is matched against the entire value of the declaration, not specific parts of it. For example, a value like `\"10px solid rgba( 255 , 0 , 0 , 0.5 )\"` will *not* match `\"/^solid/\"` (notice beginning of the line boundary) but *will* match `\"/\\\\s+solid\\\\s+/\"` or `\"/\\\\bsolid\\\\b/\"`.\n\nBe careful with regex matching not to accidentally consider quoted string values and `url()` arguments. For example, `\"/red/\"` will match value such as `\"1px dotted red\"` as well as `\"\\\"foo\\\"\"` and `\"white url(/mysite.com/red.png)\"`.\n\nGiven:\n\n```js\n{\n  \"transform\": [\"/scale/\"],\n  \"whitespace\": [\"nowrap\"],\n  \"/color/\": [\"/^green/\"]\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\ndiv { whitespace: pre; }\n```\n\n```css\na { transform: translate(1, 1); }\n```\n\n```css\na { -webkit-transform: translate(1, 1); }\n```\n\n```css\na { color: pink; }\n```\n\n```css\na { background-color: pink; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\ndiv { whitespace: nowrap; }\n```\n\n```css\na { transform: scale(1, 1); }\n```\n\n```css\na { -webkit-transform: scale(1, 1); }\n```\n\n```css\na { color: green; }\n```\n\n```css\na { background-color: green; }\n```\n\n```css\na { background: pink; }\n```\n","raw":"---\ntitle: property-value-whitelist\n---\n\n# property-value-whitelist\n\nSpecify a whitelist of allowed values for specific properties.\n\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n## Options\n\n`object`: `{\n  \"unprefixed-property-name\": [\"array\", \"of\", \"values\"],\n  \"unprefixed-property-name\": [\"/regex/\", \"non-regex\"]\n}`\n\nIf a property name is found in the object, only its whitelisted property values are allowed. This rule complains about all non-matching values. (If the property name is not included in the object, anything goes.)\n\nIf a property name is surrounded with `\"/\"` (e.g. `\"/^animation/\"`), it is interpreted as a regular expression. This allows, for example, easy targeting of shorthands: `/^animation/` will match `animation`, `animation-duration`, `animation-timing-function`, etc.\n\nThe same goes for values. Keep in mind that a regular expression value is matched against the entire value of the declaration, not specific parts of it. For example, a value like `\"10px solid rgba( 255 , 0 , 0 , 0.5 )\"` will *not* match `\"/^solid/\"` (notice beginning of the line boundary) but *will* match `\"/\\\\s+solid\\\\s+/\"` or `\"/\\\\bsolid\\\\b/\"`.\n\nBe careful with regex matching not to accidentally consider quoted string values and `url()` arguments. For example, `\"/red/\"` will match value such as `\"1px dotted red\"` as well as `\"\\\"foo\\\"\"` and `\"white url(/mysite.com/red.png)\"`.\n\nGiven:\n\n```js\n{\n  \"transform\": [\"/scale/\"],\n  \"whitespace\": [\"nowrap\"],\n  \"/color/\": [\"/^green/\"]\n}\n```\n\nThe following patterns are considered warnings:\n\n```css\ndiv { whitespace: pre; }\n```\n\n```css\na { transform: translate(1, 1); }\n```\n\n```css\na { -webkit-transform: translate(1, 1); }\n```\n\n```css\na { color: pink; }\n```\n\n```css\na { background-color: pink; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\ndiv { whitespace: nowrap; }\n```\n\n```css\na { transform: scale(1, 1); }\n```\n\n```css\na { -webkit-transform: scale(1, 1); }\n```\n\n```css\na { color: green; }\n```\n\n```css\na { background-color: green; }\n```\n\n```css\na { background: pink; }\n```\n","__filename":"user-guide/rules/property-value-whitelist.md","__url":"/user-guide/rules/property-value-whitelist/","__resourceUrl":"/user-guide/rules/property-value-whitelist/index.html","__dataUrl":"/user-guide/rules/property-value-whitelist/index.html.153f1675bb14466bb007f01deaef1c8d.json"}