{"head":{"title":"property-whitelist"},"body":"<h1 id=\"property-whitelist\"><a class=\"markdownIt-Anchor\" href=\"#property-whitelist\">#</a> property-whitelist</h1>\n<p>Specify a whitelist of allowed properties.</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">display</span>: block; }\n<span class=\"hljs-comment\">/** ↑\n * These properties */</span>\n</code></pre>\n<p>The rule ignores variables (<code>$sass</code>, <code>@less</code>, <code>--custom-property</code>).</p>\n<h2 id=\"options\"><a class=\"markdownIt-Anchor\" href=\"#options\">#</a> Options</h2>\n<p><code>array</code>: <code>&quot;[&quot;array&quot;, &quot;of&quot;, &quot;unprefixed&quot;, &quot;properties&quot;]</code></p>\n<h3 id=\"array-of-unprefixed-properties\"><a class=\"markdownIt-Anchor\" href=\"#array-of-unprefixed-properties\">#</a> <code>[&quot;array&quot;, &quot;of&quot;, &quot;unprefixed&quot;, properties&quot;]</code></h3>\n<p>Whitelisted properties are the only <em>allowed</em> properties.</p>\n<p>If a string in the array is surrounded with <code>&quot;/&quot;</code> (e.g. <code>&quot;/^background/&quot;</code>),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: <code>/^background/</code> will match <code>background</code>,\n<code>background-size</code>, <code>background-color</code>, etc.</p>\n<p>Given:</p>\n<pre><code class=\"language-js\">[<span class=\"hljs-string\">\"display\"</span>, <span class=\"hljs-string\">\"animation\"</span>, <span class=\"hljs-string\">\"/^background/\"</span>]\n</code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">animation</span>: my-animation <span class=\"hljs-number\">2s</span>;\n  <span class=\"hljs-attribute\">color</span>: pink;\n}\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">borkgrund</span>: orange; }\n</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">display</span>: block; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">-webkit-animation</span>: my-animation <span class=\"hljs-number\">2s</span>; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">animation</span>: my-animation <span class=\"hljs-number\">2s</span>;\n  <span class=\"hljs-attribute\">-webkit-animation</span>: my-animation <span class=\"hljs-number\">2s</span>;\n  <span class=\"hljs-attribute\">display</span>: block;\n}\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background</span>: pink; }\n</code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">background-color</span>: pink; }\n</code></pre>\n","rawBody":"\n# property-whitelist\n\nSpecify a whitelist of allowed properties.\n\n```css\na { display: block; }\n/** ↑\n * These properties */\n```\n\nThe rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n## Options\n\n`array`: `\"[\"array\", \"of\", \"unprefixed\", \"properties\"]`\n\n### `[\"array\", \"of\", \"unprefixed\", properties\"]`\n\nWhitelisted properties are the only *allowed* properties.\n\nIf a string in the array is surrounded with `\"/\"` (e.g. `\"/^background/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^background/` will match `background`,\n`background-size`, `background-color`, etc.\n\nGiven:\n\n```js\n[\"display\", \"animation\", \"/^background/\"]\n```\n\nThe following patterns are considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  color: pink;\n}\n```\n\n```css\na { borkgrund: orange; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { display: block; }\n```\n\n```css\na { -webkit-animation: my-animation 2s; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  -webkit-animation: my-animation 2s;\n  display: block;\n}\n```\n\n```css\na { background: pink; }\n```\n\n```css\na { background-color: pink; }\n```\n","raw":"---\ntitle: property-whitelist\n---\n\n# property-whitelist\n\nSpecify a whitelist of allowed properties.\n\n```css\na { display: block; }\n/** ↑\n * These properties */\n```\n\nThe rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n## Options\n\n`array`: `\"[\"array\", \"of\", \"unprefixed\", \"properties\"]`\n\n### `[\"array\", \"of\", \"unprefixed\", properties\"]`\n\nWhitelisted properties are the only *allowed* properties.\n\nIf a string in the array is surrounded with `\"/\"` (e.g. `\"/^background/\"`),\nit is interpreted as a regular expression. This allows, for example,\neasy targeting of shorthands: `/^background/` will match `background`,\n`background-size`, `background-color`, etc.\n\nGiven:\n\n```js\n[\"display\", \"animation\", \"/^background/\"]\n```\n\nThe following patterns are considered warnings:\n\n```css\na { color: pink; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  color: pink;\n}\n```\n\n```css\na { borkgrund: orange; }\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\na { display: block; }\n```\n\n```css\na { -webkit-animation: my-animation 2s; }\n```\n\n```css\na {\n  animation: my-animation 2s;\n  -webkit-animation: my-animation 2s;\n  display: block;\n}\n```\n\n```css\na { background: pink; }\n```\n\n```css\na { background-color: pink; }\n```\n","__filename":"user-guide/rules/property-whitelist.md","__url":"/user-guide/rules/property-whitelist/"}