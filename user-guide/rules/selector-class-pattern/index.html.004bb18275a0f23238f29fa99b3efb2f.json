{"head":{"title":"selector-class-pattern","description":"selector-class-pattern Specify a pattern for class selectors. This rule ignores non-ouputting Less mixin definitions and called Less…"},"body":"<h1 id=\"selector-class-pattern\"><a href=\"#selector-class-pattern\" class=\"phenomic-HeadingAnchor\">#</a>selector-class-pattern</h1>\n<p>Specify a pattern for class selectors.</p>\n<pre><code class=\"hljs language-css\">    <span class=\"hljs-selector-class\">.foo</span>, <span class=\"hljs-selector-id\">#bar</span><span class=\"hljs-selector-class\">.baz</span> <span class=\"hljs-selector-tag\">span</span>, <span class=\"hljs-selector-id\">#hoo</span><span class=\"hljs-selector-attr\">[disabled]</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n<span class=\"hljs-comment\">/** ↑         ↑\n * These class selectors */</span></code></pre>\n<p>This rule ignores non-ouputting Less mixin definitions and called Less mixins.</p>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>regex|string</code></p>\n<p>A string will be translated into a RegExp — <code>new RegExp(yourString)</code> — so <em>be sure to escape properly</em>.</p>\n<p>The selector value <em>after <code>.</code></em> will be checked. No need to include <code>.</code> in your pattern.</p>\n<p>Given the string:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"foo-[a-z]+\"</span></code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foop</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo-BAR</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> &gt; <span class=\"hljs-selector-id\">#zing</span> + <span class=\"hljs-selector-class\">.foo-BAR</span> {}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo-bar</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> &gt; <span class=\"hljs-selector-id\">#zing</span> + <span class=\"hljs-selector-class\">.foo-bar</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#foop</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-attr\">[foo='bar']</span> {}</code></pre>\n<pre><code class=\"hljs language-less\"><span class=\"hljs-selector-class\">.foop</span>() {}</code></pre>\n<pre><code class=\"hljs language-less\"><span class=\"hljs-selector-class\">.foo-bar</span> {\n  <span class=\"hljs-selector-class\">.foop</span>;\n}</code></pre>\n<h2 id=\"optional-options\"><a href=\"#optional-options\" class=\"phenomic-HeadingAnchor\">#</a>Optional options</h2>\n<h3 id=\"resolvenestedselectors-true--false-default-false\"><a href=\"#resolvenestedselectors-true--false-default-false\" class=\"phenomic-HeadingAnchor\">#</a><code>resolveNestedSelectors: true | false</code> (default: <code>false</code>)</h3>\n<p>This option will resolve nested selectors with <code>&amp;</code> interpolation.</p>\n<p>For example, with <code>true</code>.</p>\n<p>Given the string:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"^[A-Z]+$\"</span></code></pre>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\">.A {\n  &amp;__B {} /* resolved to \".A__B\" */\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\">.A {\n  &amp;B {} /* resolved to \".AB\" */\n}</code></pre>\n","rawBody":"\n# selector-class-pattern\n\nSpecify a pattern for class selectors.\n\n```css\n    .foo, #bar.baz span, #hoo[disabled] { color: pink; }\n/** ↑         ↑\n * These class selectors */\n```\n\nThis rule ignores non-ouputting Less mixin definitions and called Less mixins.\n\n## Options\n\n`regex|string`\n\nA string will be translated into a RegExp — `new RegExp(yourString)` — so *be sure to escape properly*.\n\nThe selector value *after `.`* will be checked. No need to include `.` in your pattern.\n\nGiven the string:\n\n```js\n\"foo-[a-z]+\"\n```\n\nThe following patterns are considered warnings:\n\n```css\n.foop {}\n```\n\n```css\n.foo-BAR {}\n```\n\n```css\ndiv > #zing + .foo-BAR {}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.foo-bar {}\n```\n\n```css\ndiv > #zing + .foo-bar {}\n```\n\n```css\n#foop {}\n```\n\n```css\n[foo='bar'] {}\n```\n\n```less\n.foop() {}\n```\n\n```less\n.foo-bar {\n  .foop;\n}\n```\n\n## Optional options\n\n### `resolveNestedSelectors: true | false` (default: `false`)\n\nThis option will resolve nested selectors with `&` interpolation.\n\nFor example, with `true`.\n\nGiven the string:\n\n```js\n\"^[A-Z]+$\"\n```\n\nThe following patterns are considered warnings:\n\n```css\n.A {\n  &__B {} /* resolved to \".A__B\" */\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.A {\n  &B {} /* resolved to \".AB\" */\n}\n```\n","raw":"---\ntitle: selector-class-pattern\n---\n\n# selector-class-pattern\n\nSpecify a pattern for class selectors.\n\n```css\n    .foo, #bar.baz span, #hoo[disabled] { color: pink; }\n/** ↑         ↑\n * These class selectors */\n```\n\nThis rule ignores non-ouputting Less mixin definitions and called Less mixins.\n\n## Options\n\n`regex|string`\n\nA string will be translated into a RegExp — `new RegExp(yourString)` — so *be sure to escape properly*.\n\nThe selector value *after `.`* will be checked. No need to include `.` in your pattern.\n\nGiven the string:\n\n```js\n\"foo-[a-z]+\"\n```\n\nThe following patterns are considered warnings:\n\n```css\n.foop {}\n```\n\n```css\n.foo-BAR {}\n```\n\n```css\ndiv > #zing + .foo-BAR {}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.foo-bar {}\n```\n\n```css\ndiv > #zing + .foo-bar {}\n```\n\n```css\n#foop {}\n```\n\n```css\n[foo='bar'] {}\n```\n\n```less\n.foop() {}\n```\n\n```less\n.foo-bar {\n  .foop;\n}\n```\n\n## Optional options\n\n### `resolveNestedSelectors: true | false` (default: `false`)\n\nThis option will resolve nested selectors with `&` interpolation.\n\nFor example, with `true`.\n\nGiven the string:\n\n```js\n\"^[A-Z]+$\"\n```\n\nThe following patterns are considered warnings:\n\n```css\n.A {\n  &__B {} /* resolved to \".A__B\" */\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\n.A {\n  &B {} /* resolved to \".AB\" */\n}\n```\n","__filename":"user-guide/rules/selector-class-pattern.md","__url":"/user-guide/rules/selector-class-pattern/","__resourceUrl":"/user-guide/rules/selector-class-pattern/index.html","__dataUrl":"/user-guide/rules/selector-class-pattern/index.html.004bb18275a0f23238f29fa99b3efb2f.json"}