{"head":{"title":"selector-max-compound-selectors","description":"selector-max-compound-selectors Limit the number of compound selectors in a selector. A compound selector is a chain of one or more simple…"},"body":"<h1 id=\"selector-max-compound-selectors\"><a href=\"#selector-max-compound-selectors\" class=\"phenomic-HeadingAnchor\">#</a>selector-max-compound-selectors</h1>\n<p>Limit the number of compound selectors in a selector.</p>\n<pre><code class=\"hljs language-css\">   <span class=\"hljs-selector-tag\">div</span> <span class=\"hljs-selector-class\">.bar</span><span class=\"hljs-selector-attr\">[data-val]</span> &gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.baz</span> + <span class=\"hljs-selector-class\">.boom</span> &gt; <span class=\"hljs-selector-id\">#lorem</span> {}\n<span class=\"hljs-comment\">/* ↑   ↑                ↑       ↑       ↑\n   |   |                |       |       |\n  Lv1  v2               Lv3     Lv4     Lv5  -- these are compound selectors */</span></code></pre>\n<p>A <a href=\"https://www.w3.org/TR/selectors4/#compound\">compound selector</a> is a chain of one or more simple (tag, class, id, universal, attribute) selectors. If there is more than one compound selector in a complete selector, they will be separated by combinators (e.g. <code></code>, <code>+</code>, <code>&gt;</code>). One reason why you might want to limit the number of compound selectors is described in the <a href=\"http://smacss.com/book/applicability\">SMACSS book</a>.</p>\n<p>This rule resolves nested selectors before calculating the depth of a selector.</p>\n<p><code>:not()</code> is considered one compound selector irrespective to the complexity of the selector inside it. The rule <em>does</em> process that inner selector, but does so separately, independent of the main selector.</p>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p><code>int</code>: Maximum compound selectors allowed.</p>\n<p>For example, with <code>3</code>:</p>\n<p>The following patterns are considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> <span class=\"hljs-selector-class\">.bar</span> <span class=\"hljs-selector-class\">.baz</span> <span class=\"hljs-selector-class\">.lorem</span> {}</code></pre>\n<pre><code class=\"hljs language-css\">.foo .baz {\n  &amp; &gt; .bar .lorem {}\n}</code></pre>\n<p>The following patterns are <em>not</em> considered warnings:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> <span class=\"hljs-selector-tag\">div</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#foo</span> <span class=\"hljs-selector-id\">#bar</span> &gt; <span class=\"hljs-selector-id\">#baz</span> {}</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.foo</span> + <span class=\"hljs-selector-tag\">div</span> <span class=\"hljs-selector-pseudo\">:not</span> (<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> ~ <span class=\"hljs-selector-tag\">c</span>) {} <span class=\"hljs-comment\">/* `a b ~ c` is inside :not() and is processed separately */</span></code></pre>\n","rawBody":"\n# selector-max-compound-selectors\n\nLimit the number of compound selectors in a selector.\n\n```css\n   div .bar[data-val] > a.baz + .boom > #lorem {}\n/* ↑   ↑                ↑       ↑       ↑\n   |   |                |       |       |\n  Lv1  v2               Lv3     Lv4     Lv5  -- these are compound selectors */\n```\n\nA [compound selector](https://www.w3.org/TR/selectors4/#compound) is a chain of one or more simple (tag, class, id, universal, attribute) selectors. If there is more than one compound selector in a complete selector, they will be separated by combinators (e.g. ` `, `+`, `>`). One reason why you might want to limit the number of compound selectors is described in the [SMACSS book](http://smacss.com/book/applicability).\n\nThis rule resolves nested selectors before calculating the depth of a selector.\n\n`:not()` is considered one compound selector irrespective to the complexity of the selector inside it. The rule *does* process that inner selector, but does so separately, independent of the main selector.\n\n## Options\n\n`int`: Maximum compound selectors allowed.\n\nFor example, with `3`:\n\nThe following patterns are considered warnings:\n\n```css\n.foo .bar .baz .lorem {}\n```\n\n```css\n.foo .baz {\n  & > .bar .lorem {}\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\ndiv {}\n```\n\n```css\n.foo div {}\n```\n\n```css\n#foo #bar > #baz {}\n```\n\n```css\n.foo + div :not (a b ~ c) {} /* `a b ~ c` is inside :not() and is processed separately */\n```\n","raw":"---\ntitle: selector-max-compound-selectors\n---\n\n# selector-max-compound-selectors\n\nLimit the number of compound selectors in a selector.\n\n```css\n   div .bar[data-val] > a.baz + .boom > #lorem {}\n/* ↑   ↑                ↑       ↑       ↑\n   |   |                |       |       |\n  Lv1  v2               Lv3     Lv4     Lv5  -- these are compound selectors */\n```\n\nA [compound selector](https://www.w3.org/TR/selectors4/#compound) is a chain of one or more simple (tag, class, id, universal, attribute) selectors. If there is more than one compound selector in a complete selector, they will be separated by combinators (e.g. ` `, `+`, `>`). One reason why you might want to limit the number of compound selectors is described in the [SMACSS book](http://smacss.com/book/applicability).\n\nThis rule resolves nested selectors before calculating the depth of a selector.\n\n`:not()` is considered one compound selector irrespective to the complexity of the selector inside it. The rule *does* process that inner selector, but does so separately, independent of the main selector.\n\n## Options\n\n`int`: Maximum compound selectors allowed.\n\nFor example, with `3`:\n\nThe following patterns are considered warnings:\n\n```css\n.foo .bar .baz .lorem {}\n```\n\n```css\n.foo .baz {\n  & > .bar .lorem {}\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```css\ndiv {}\n```\n\n```css\n.foo div {}\n```\n\n```css\n#foo #bar > #baz {}\n```\n\n```css\n.foo + div :not (a b ~ c) {} /* `a b ~ c` is inside :not() and is processed separately */\n```\n","__filename":"user-guide/rules/selector-max-compound-selectors.md","__url":"/user-guide/rules/selector-max-compound-selectors/","__resourceUrl":"/user-guide/rules/selector-max-compound-selectors/index.html","__dataUrl":"/user-guide/rules/selector-max-compound-selectors/index.html.2bb7126b3f9f8cded16413d53ebba740.json"}